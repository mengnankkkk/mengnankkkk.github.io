<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>mengnankkのblog</title>
    <link>https://blog.tokenlen.top/</link>
    
    <image>
      <url>https://blog.tokenlen.top/icon.png</url>
      <title>mengnankkのblog</title>
      <link>https://blog.tokenlen.top/</link>
    </image>
    
    <atom:link href="https://blog.tokenlen.top/rss2.xml" rel="self" type="application/rss+xml"/>
    <atom:link href="https://pubsubhubbub.appspot.com/" rel="hub"/>
    <description>清风拂柳影，碧水映花香。</description>
    <pubDate>Thu, 10 Jul 2025 09:16:58 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Leetcode HOT面试题目2</title>
      <link>https://blog.tokenlen.top/2025/07/06/leetcode/leetcodehot2/</link>
      <guid>https://blog.tokenlen.top/2025/07/06/leetcode/leetcodehot2/</guid>
      <pubDate>Sat, 05 Jul 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1&gt;面试二轮&lt;/h1&gt;
&lt;h2 id=&quot;76-最小覆盖子串&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/minimum-window-substring/&quot;&gt;76. 最小覆盖子串&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;给你一个字符串</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1>面试二轮</h1><h2 id="76-最小覆盖子串"><a href="https://leetcode.cn/problems/minimum-window-substring/">76. 最小覆盖子串</a></h2><p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    public <span class="title class_">String</span> <span class="title function_">minWindow</span>(<span class="params"><span class="built_in">String</span> S, <span class="built_in">String</span> t</span>) &#123;</span><br><span class="line">        int[] cnt = <span class="keyword">new</span> int[<span class="number">128</span>];</span><br><span class="line">        int less = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (char <span class="attr">c</span>:t.<span class="title function_">toCharArray</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt[c]==<span class="number">0</span>)&#123;</span><br><span class="line">                less++;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt[c]++;</span><br><span class="line">        &#125;</span><br><span class="line">        char[] s = S.<span class="title function_">toCharArray</span>();</span><br><span class="line">        int m  = s.<span class="property">length</span>;</span><br><span class="line">        int ansleft  = -<span class="number">1</span>;</span><br><span class="line">        int ansRight = m;</span><br><span class="line">        </span><br><span class="line">        int left =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (int right = <span class="number">0</span>;right&lt;m;right++)&#123;</span><br><span class="line">            char c =s[right];</span><br><span class="line">            cnt[c]--;</span><br><span class="line">            <span class="keyword">if</span> (cnt[c]==<span class="number">0</span>)&#123;</span><br><span class="line">                less--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (less==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (right-left&lt;ansRight-ansleft)&#123;</span><br><span class="line">                    ansleft = left;</span><br><span class="line">                    ansRight = right;</span><br><span class="line">                &#125;</span><br><span class="line">                char x = s[left];</span><br><span class="line">                <span class="keyword">if</span> (cnt[x]==<span class="number">0</span>)&#123;</span><br><span class="line">                    less++;</span><br><span class="line">                &#125;</span><br><span class="line">                cnt[x]++;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ansleft&lt;<span class="number">0</span>?<span class="string">&quot;&quot;</span>:S.<span class="title function_">substring</span>(ansleft,ansRight+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码使用了滑动窗口的方法，一看他是个window就是滑动窗口</p><p>解决思路是进-改-出</p><p>先区遍历元素，然后确定要出现的最少的次数</p><p>然后进右端端点，需要的出现次数–</p><p>然后最少字母次数–</p><p>当最小次数为0的时候，这个时候如果滑动窗口的长度小于结果的长度的时候</p><p>更新节点位置</p><p>然后出左节点，如果需要出现的为0了</p><p>那么最少字母次数++</p><p>然后左端点对应的字母需要次数++，左端点移动</p><p>最后需要的是结果左端点和右端点之间的</p><p>也就是我们常说的right-left+1</p><h2 id="124-二叉树中的最大路径和"><a href="https://leetcode.cn/problems/binary-tree-maximum-path-sum/">124. 二叉树中的最大路径和</a></h2><p>二叉树中的 <strong>路径</strong> 被定义为一条节点序列，序列中每对相邻节点之间都存在一条边。同一个节点在一条路径序列中 <strong>至多出现一次</strong> 。该路径 <strong>至少包含一个</strong> 节点，且不一定经过根节点。</p><p><strong>路径和</strong> 是路径中各节点值的总和。</p><p>给你一个二叉树的根节点 <code>root</code> ，返回其 <strong>最大路径和</strong> 。</p><p>就是一个贪心算法，我们每一步都选dfs的最优解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution124A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxPathSum</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lval</span> <span class="operator">=</span> dfs(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rval</span>  <span class="operator">=</span>dfs(root.right);</span><br><span class="line">        ans  = Math.max(ans,lval+rval+root.val);</span><br><span class="line">        <span class="keyword">return</span> Math.max(Math.max(lval,rval)+ root.val,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是选左还是选右的问题</p><h2 id="208-实现-Trie-前缀树"><a href="https://leetcode.cn/problems/implement-trie-prefix-tree/">208. 实现 Trie (前缀树)</a></h2><p><strong><a href="https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E6%A0%91/9825209?fr=aladdin">Trie</a></strong>（发音类似 “try”）或者说 <strong>前缀树</strong> 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补全和拼写检查。</p><p>请你实现 Trie 类：</p><ul><li><code>Trie()</code> 初始化前缀树对象。</li><li><code>void insert(String word)</code> 向前缀树中插入字符串 <code>word</code> 。</li><li><code>boolean search(String word)</code> 如果字符串 <code>word</code> 在前缀树中，返回 <code>true</code>（即，在检索之前已经插入）；否则，返回 <code>false</code> 。</li><li><code>boolean startsWith(String prefix)</code> 如果之前已经插入的字符串 <code>word</code> 的前缀之一为 <code>prefix</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li></ul><p>前缀树就是记录字符串用的，一个放孩子孩子节点的字母表，一个放是不是结束的标志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">        Node[] son = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="type">boolean</span> end;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c:word.toCharArray())&#123;</span><br><span class="line">            c -=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (cur.son[c]==<span class="literal">null</span>)&#123;</span><br><span class="line">                cur.son[c] = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.son[c];</span><br><span class="line">        &#125;</span><br><span class="line">        cur.end = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> find(word)==<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> find(prefix)!=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(String word)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c:word.toCharArray())&#123;</span><br><span class="line">            c-=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(cur.son[c]==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.son[c];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.end?<span class="number">2</span>:<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="295-数据流的中位数"><a href="https://leetcode.cn/problems/find-median-from-data-stream/">295. 数据流的中位数</a></h2><p><strong>中位数</strong>是有序整数列表中的中间值。如果列表的大小是偶数，则没有中间值，中位数是两个中间值的平均值。</p><ul><li>例如 <code>arr = [2,3,4]</code> 的中位数是 <code>3</code> 。</li><li>例如 <code>arr = [2,3]</code> 的中位数是 <code>(2 + 3) / 2 = 2.5</code> 。</li></ul><p>实现 MedianFinder 类:</p><ul><li><code>MedianFinder() </code>初始化 <code>MedianFinder</code> 对象。</li><li><code>void addNum(int num)</code> 将数据流中的整数 <code>num</code> 添加到数据结构中。</li><li><code>double findMedian()</code> 返回到目前为止所有元素的中位数。与实际答案相差 <code>10-5</code> 以内的答案将被接受。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">[&quot;MedianFinder&quot;, &quot;addNum&quot;, &quot;addNum&quot;, &quot;findMedian&quot;, &quot;addNum&quot;, &quot;findMedian&quot;]</span><br><span class="line">[[], [1], [2], [], [3], []]</span><br><span class="line">输出</span><br><span class="line">[null, null, null, 1.5, null, 2.0]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">MedianFinder medianFinder = new MedianFinder();</span><br><span class="line">medianFinder.addNum(1);    // arr = [1]</span><br><span class="line">medianFinder.addNum(2);    // arr = [1, 2]</span><br><span class="line">medianFinder.findMedian(); // 返回 1.5 ((1 + 2) / 2)</span><br><span class="line">medianFinder.addNum(3);    // arr[1, 2, 3]</span><br><span class="line">medianFinder.findMedian(); // return 2.0</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>-105 &lt;= num &lt;= 105</code></li><li>在调用 <code>findMedian</code> 之前，数据结构中至少有一个元素</li><li>最多 <code>5 * 104</code> 次调用 <code>addNum</code> 和 <code>findMedian</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MedianFinder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PriorityQueue&lt;Integer&gt; left = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a,b)-&gt;b-a);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PriorityQueue&lt;Integer&gt; right = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MedianFinder</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNum</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left.size()==right.size())&#123;</span><br><span class="line">            right.offer(num);</span><br><span class="line">            left.offer(right.poll());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            left.offer(num);</span><br><span class="line">            right.offer(left.poll());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedian</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(left.size()&gt;right.size())&#123;</span><br><span class="line">            <span class="keyword">return</span> left.peek();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (left.peek()+right.peek())/<span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们维护一个最大堆left和一个最小堆right</p><p>加元素的时候，如果当前左右数量相等的话，那么优先加入最小堆，然后把最小堆的栈顶给左堆</p><p>不想等的话，一般是最大堆需要，然后小的栈顶给最小堆</p><p>取中位数的时候，如果是偶数，那么是最大堆和最小堆顶的平均值</p><p>不是的话就是最大堆的顶</p><h2 id="32-最长有效括号"><a href="https://leetcode.cn/problems/longest-valid-parentheses/">32. 最长有效括号</a></h2><p>给你一个只包含 <code>'('</code> 和 <code>')'</code> 的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p><p>看到这种括号题目，第一个想到就是使用栈来解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution32AA</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestValidParentheses</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length()&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span> vaild[] = <span class="keyword">new</span> <span class="title class_">boolean</span>[s.length()];</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i)==<span class="string">&#x27;(&#x27;</span>) stack.push(i);</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i)==<span class="string">&#x27;)&#x27;</span>&amp;&amp;!stack.isEmpty())&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                vaild[i] = <span class="literal">true</span>;</span><br><span class="line">                vaild[index]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;vaild.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (vaild[i])</span><br><span class="line">                count++;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                res = Math.max(res,count);</span><br><span class="line">                count=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = Math.max(res,count);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用栈，记录一个有效值的数字。</p><p>然后遍历字符找到有效括号</p><h2 id="141-环形链表"><a href="https://leetcode.cn/problems/linked-list-cycle/">141. 环形链表</a></h2><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong> 。仅仅是为了标识链表的实际情况。</p><p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution141A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head,fast=head;</span><br><span class="line">        <span class="keyword">while</span> (fast!=<span class="literal">null</span>&amp;&amp;fast.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span> (fast==slow)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常easy的环形链表</p><h2 id="72-编辑距离"><a href="https://leetcode.cn/problems/edit-distance/">72. 编辑距离</a></h2><p>给你两个单词 <code>word1</code> 和 <code>word2</code>， <em>请返回将 <code>word1</code> 转换成 <code>word2</code> 所使用的最少操作数</em> 。</p><p>你可以对一个单词进行如下三种操作：</p><ul><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution72A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String text1, String text2)</span>&#123;</span><br><span class="line">        <span class="type">char</span>[] t=  text2.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> t.length;</span><br><span class="line">        <span class="type">int</span>[] f= <span class="keyword">new</span> <span class="title class_">int</span>[m+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            f[j+<span class="number">1</span>] = j+<span class="number">1</span>;<span class="comment">//text2 的前 j + 1 个字符所需的操作数为 j + 1 (即插入 j + 1 个字符)。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> x:text1.toCharArray())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> f[<span class="number">0</span>];</span><br><span class="line">            f[<span class="number">0</span>]++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span>f[j+<span class="number">1</span>];</span><br><span class="line">                f[j+<span class="number">1</span>] = x ==t[j]?pre:Math.min(Math.min(f[j+<span class="number">1</span>],f[j]),pre)+<span class="number">1</span>;</span><br><span class="line">                pre = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>text1</code> 的当前字符 <code>x</code> 与 <code>text2</code> 的当前字符 <code>t[j]</code> 相同，那么不需要任何操作</p><ul><li></li><li><p><code>f[j + 1]</code>: 表示删除 <code>text1</code> 的当前字符 <code>x</code>。对应于操作&quot;删除&quot;。</p></li><li><p><code>f[j]</code>: 表示在 <code>text1</code> 中插入一个字符，使得 <code>text1</code> 的当前字符等于 <code>t[j]</code>。对应于操作&quot;插入&quot;。</p></li><li><p><code>pre</code>: 表示将 <code>text1</code> 的当前字符 <code>x</code> 替换为 <code>t[j]</code>。对应于操作&quot;替换&quot;。 由于需要经过一次编辑(删除/插入/替换)才能让<code>text1</code>前<code>i</code>个字符匹配<code>text2</code>前<code>j+1</code>个字符，所以操作总数要+1。</p></li></ul><h2 id="692-前K个高频单词"><a href="https://leetcode.cn/problems/top-k-frequent-words/">692. 前K个高频单词</a></h2><p>给定一个单词列表 <code>words</code> 和一个整数 <code>k</code> ，返回前 <code>k</code> 个出现次数最多的单词。</p><p>返回的答案应该按单词出现频率由高到低排序。如果不同的单词有相同出现频率， <strong>按字典顺序</strong> 排序。</p><p>一看到这个题，我就想到用hashmap来做，然后我看又需要顺序，那我直接使用linkedhashmap不久得了。发现并不是的</p><p>可以使用优先队列，或者是规定compare的List，这里直接用优先队列吧</p><p>然后挑出前k个</p><p>放入list即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution692</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">topKFrequent</span><span class="params">(String[] words, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Map&lt;String,Integer&gt; map =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String word:words)&#123;</span><br><span class="line">            map.put(word,map.getOrDefault(word,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        PriorityQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(</span><br><span class="line">                (w1,w2)-&gt;map.get(w1).equals(map.get(w2))?w2.compareTo(w1):map.get(w1)-map.get(w2)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">for</span> (String word:map.keySet())&#123;</span><br><span class="line">            queue.offer(word);</span><br><span class="line">            <span class="keyword">if</span> (queue.size()&gt;k)&#123;</span><br><span class="line">                queue.poll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            res.add(queue.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.reverse(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-无重复字符的最长子串"><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h2><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长 子串</strong> 的长度。</p><p>又是不重复，直接上hashset,一开始想这样做来，但发现不对，这样做的是字符串的数量</p><p>然后就想使用滑动窗口，更新值。如果含有就更新左端点，</p><p>不含有就更新最大值，然后放入右端点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution3B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> -<span class="number">1</span>, maxlen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; s.length(); right++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(s.charAt(right))) &#123;</span><br><span class="line">                left = Math.max(left, map.get(s.charAt(right)));</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(s.charAt(right), right);</span><br><span class="line">            maxlen = Math.max(maxlen, right - left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxlen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="394-字符串解码"><a href="https://leetcode.cn/problems/decode-string/">394. 字符串解码</a></h2><p>给定一个经过编码的字符串，返回它解码后的字符串。</p><p>编码规则为: <code>k[encoded_string]</code>，表示其中方括号内部的 <code>encoded_string</code> 正好重复 <code>k</code> 次。注意 <code>k</code> 保证为正整数。</p><p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p><p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 <code>k</code> ，例如不会出现像 <code>3a</code> 或 <code>2[4]</code> 的输入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution394A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decodeString</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span>  <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">String</span>  <span class="variable">curSting</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Stack&lt;Integer&gt; stack_multi=  <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;String&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Character c:s.toCharArray())&#123;</span><br><span class="line">                <span class="keyword">if</span> (Character.isDigit(c))&#123;</span><br><span class="line">                    num = num*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (c==<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                    stack_multi.push(num);</span><br><span class="line">                    stack.push(curSting);</span><br><span class="line">                    num = <span class="number">0</span>;</span><br><span class="line">                    curSting = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (c==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">longnum</span> <span class="operator">=</span> stack_multi.pop();</span><br><span class="line">                    <span class="type">StringBuilder</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(stack.pop());</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;longnum;i++)&#123;</span><br><span class="line">                        temp.append(curSting);</span><br><span class="line">                    &#125;</span><br><span class="line">                    curSting=  temp.toString();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    curSting +=c;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> curSting;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>经典的括号和栈的问题</p><p>一个放之前的字符，一个放数字。当变成】结束的时候。将里面的字符遍历数字遍</p><h2 id="82-删除排序链表中的重复元素-II"><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/">82. 删除排序链表中的重复元素 II</a></h2><p>给定一个已排序的链表的头 <code>head</code> ， <em>删除原始链表中所有重复数字的节点，只留下不同的数字</em> 。返回 <em>已排序的链表</em> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution82AA</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>,head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span>  <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> (cur.next!=<span class="literal">null</span>&amp;&amp;cur.next.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> cur.next.val;</span><br><span class="line">            <span class="keyword">if</span> (cur.next.next.val == val)&#123;</span><br><span class="line">                <span class="keyword">while</span> (cur.next!=<span class="literal">null</span>&amp;&amp;cur.next.val == val)&#123;</span><br><span class="line">                    cur.next = cur.next.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>就是去检测cur.next和cur和cur.next之后的值是不是想到，想到就只留cur，然后其他的跳过</p><h2 id="18-四数之和"><a href="https://leetcode.cn/problems/4sum/">18. 四数之和</a></h2><p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且<strong>不重复</strong>的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：</p><ul><li><code>0 &lt;= a, b, c, d &lt; n</code></li><li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> <strong>互不相同</strong></li><li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li></ul><p>你可以按 <strong>任意顺序</strong> 返回答案 。</p><p>可以使用hash表+定长的滑动窗口试试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length &lt; <span class="number">4</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="comment">//简单去重</span></span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">long</span>) nums[i] + nums[i + <span class="number">1</span>] + nums[i + <span class="number">2</span>] + nums[i + <span class="number">3</span>] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="comment">//最小的都大，直接抛弃</span></span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">long</span>) nums[i] + nums[n - <span class="number">3</span>] + nums[n - <span class="number">2</span>] + nums[n - <span class="number">1</span>] &lt; target) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="comment">//最大的都小直接抛弃</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n - <span class="number">2</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;<span class="comment">//简单去重</span></span><br><span class="line">                <span class="keyword">if</span> ((<span class="type">long</span>) nums[i] + nums[j] + nums[j + <span class="number">1</span>] + nums[j + <span class="number">2</span>] &gt; target) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="comment">//最小的三个都大，抛弃</span></span><br><span class="line">                <span class="keyword">if</span> ((<span class="type">long</span>) nums[i] + nums[j] + nums[n - <span class="number">2</span>] + nums[n - <span class="number">1</span>] &lt; target) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;<span class="comment">//最大的三个都小抛弃</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> j + <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n - <span class="number">1</span>;<span class="comment">//找出左右边界</span></span><br><span class="line">                <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                    <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> (<span class="type">long</span>) nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">                    <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                        res.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                            left++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                            right--;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        left++;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="40-组合总和-II"><a href="https://leetcode.cn/problems/combination-sum-ii/">40. 组合总和 II</a></h2><p>给定一个候选人编号的集合 <code>candidates</code> 和一个目标数 <code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合。</p><p><code>candidates</code> 中的每个数字在每个组合中只能使用 <strong>一次</strong> 。</p><p>**注意：**解集不能包含重复的组合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution40A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dfs(<span class="number">0</span>,target,candidates,ans,path);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> left,<span class="type">int</span>[] candidates,List&lt;List&lt;Integer&gt;&gt; ans,List&lt;Integer&gt; path)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left==<span class="number">0</span>)&#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=i;j&lt;candidates.length&amp;&amp;candidates[j]&lt;=left;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (j&gt;i&amp;&amp;candidates.length==candidates[j-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.add(candidates[j]);</span><br><span class="line">            dfs(j+<span class="number">1</span>,left-candidates[j],candidates,ans,path);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是选与不选的问题，如果j&gt;i且等与j的数都不选</p><p>记得回溯哈</p>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/java/">java</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="https://blog.tokenlen.top/tags/java/">java</category>
      
      <category domain="https://blog.tokenlen.top/tags/leetcode/">leetcode</category>
      
      
      <comments>https://blog.tokenlen.top/2025/07/06/leetcode/leetcodehot2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MQ面试场景题</title>
      <link>https://blog.tokenlen.top/2025/07/06/new-stack/MQ2/</link>
      <guid>https://blog.tokenlen.top/2025/07/06/new-stack/MQ2/</guid>
      <pubDate>Sat, 05 Jul 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1&gt;场景题&lt;/h1&gt;
&lt;h2</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1>场景题</h1><h2 id="1-如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时，说说怎么解决？">1.如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时，说说怎么解决？</h2><p>问题分析：</p><p>1.大量的消息在MQ里积压了</p><p>2.MQ中的消息过期失效了</p><p>3.MQ的队列快满了</p><p>第一个问题：</p><p>消息在MQ大量积压是消费者和生成者生产消费的速度差距过大</p><p>消费者消费的少，生产者生产的多</p><p>那么我们就先修复消费者的问题，确保消费者都能使用</p><p>然后紧急扩容，新建一个 topic，partition 是原来的 10 倍，临时建立好原先 10 倍的 queue 数量。</p><p>写一个临时的分发数据的 consumer 程序，这个程序部署上去消费积压的数据，<strong>消费之后不做耗时的处理</strong>，直接均匀轮询写入临时建立好的 10 倍数量的 queue。</p><p>临时征用 10 倍的机器来部署 consumer，每一批 consumer 消费一个临时 queue 的数据。这种做法相当于是临时将 queue 资源和 consumer 资源扩大 10 倍，以正常的 10 倍速度来消费数据。</p><p>然后恢复原先的架构</p><p>或者是业务支持批量发送的时候，使用批量发送</p><p>或者是跳过非重要的消息，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title function_">consumeMessage</span><span class="params">(</span></span><br><span class="line"><span class="params">            List&lt;MessageExt&gt; msgs,</span></span><br><span class="line"><span class="params">            ConsumeConcurrentlyContext context)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> msgs.get(<span class="number">0</span>).getQueueOffset();</span><br><span class="line">    <span class="type">String</span> <span class="variable">maxOffset</span> <span class="operator">=</span></span><br><span class="line">            msgs.get(<span class="number">0</span>).getProperty(Message.PROPERTY_MAX_OFFSET);</span><br><span class="line">    <span class="type">long</span> <span class="variable">diff</span> <span class="operator">=</span> Long.parseLong(maxOffset) - offset;</span><br><span class="line">    <span class="keyword">if</span> (diff &gt; <span class="number">100000</span>) &#123;</span><br><span class="line">        <span class="comment">// TODO 消息堆积情况的特殊处理</span></span><br><span class="line">        <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// TODO 正常消费过程</span></span><br><span class="line">    <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者优化消息的处理步骤，比如需要查两次，写两次，可以合并为查/写一次完成</p><p>第二个问题：</p><p>RabbitMQ，RabbtiMQ 是可以设置过期时间的，也就是 TTL。如果消息在 queue 中积压超过一定的时间就会被 RabbitMQ 给清理掉，这个数据就没了。</p><p>我们丢了大量的数据，没办法，我们只能等队列比较少的时候。人工的去找出少了哪些数据，然后人工恢复数据</p><p>我们可以先访问RabbitMQ 自带的管理界面提供队列长度、消息速率等基本监控信息</p><p>默认端口15672，查看目标队列的 “Messages ready” (就绪消息数量) 和 “Messages unacknowledged” (未确认消息数量)。 如果 “Messages ready” 持续增长，说明队列存在积压。</p><p>第三个问题：</p><p>mq快写满了，我们可以直接丢弃，然后再补数据了只能</p>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/">技术栈</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/%E9%9D%A2%E8%AF%95/">面试</category>
      
      
      <comments>https://blog.tokenlen.top/2025/07/06/new-stack/MQ2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Elasticsearch</title>
      <link>https://blog.tokenlen.top/2025/07/06/new-stack/es1/</link>
      <guid>https://blog.tokenlen.top/2025/07/06/new-stack/es1/</guid>
      <pubDate>Sat, 05 Jul 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1&gt;介绍&lt;/h1&gt;
&lt;p&gt;Elastic 本质上是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。&lt;/p&gt;
&lt;p&gt;单个 Elastic</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1>介绍</h1><p>Elastic 本质上是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。</p><p>单个 Elastic 实例称为一个节点（node）。一组节点构成一个集群（cluster）。</p><p>Elastic 会索引所有字段，经过处理后写入一个反向索引（Inverted Index）。查找数据的时候，直接查找该索引。</p><p>所以，Elastic 数据管理的顶层单位就叫做 Index（索引）。它是单个数据库的同义词。每个 Index （即数据库）的名字必须是小写。</p><p>下面的命令可以查看当前节点的所有 Index。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &#x27;http://localhost:9200/_cat/indices?v&#x27;</span><br></pre></td></tr></table></figure><p>Index 里面单条的记录称为 Document（文档）。许多条 Document 构成了一个 Index。</p><p>Document 使用 JSON 格式表示，下面是一个例子。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;user&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="string">&quot;title&quot;</span>: <span class="string">&quot;工程师&quot;</span>,</span><br><span class="line">  <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;数据库管理&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>同一个 Index 里面的 Document，不要求有相同的结构（scheme），但是最好保持相同，这样有利于提高搜索效率。</p><p>Document 可以分组，比如<code>weather</code>这个 Index 里面，可以按城市分组（北京和上海），也可以按气候分组（晴天和雨天）。这种分组就叫做 Type，它是虚拟的逻辑分组，用来过滤 Document。</p><p>不同的 Type 应该有相似的结构（schema），举例来说，<code>id</code>字段不能在这个组是字符串，在另一个组是数值。这是与关系型数据库的表的<a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/mapping.html">一个区别</a>。性质完全不同的数据（比如<code>products</code>和<code>logs</code>）应该存成两个 Index，而不是一个 Index 里面的两个 Type（虽然可以做到）。</p><p>下面的命令可以列出每个 Index 所包含的 Type。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&#x27;localhost:9200/_mapping?pretty=true&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>根据<a href="https://www.elastic.co/blog/index-type-parent-child-join-now-future-in-elasticsearch">规划</a>，Elastic 6.x 版只允许每个 Index 包含一个 Type，7.x 版将会彻底移除 Type。</p><p>新建 Index，可以直接向 Elastic 服务器发出 PUT 请求。下面的例子是新建一个名叫<code>weather</code>的 Index。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X PUT <span class="string">&#x27;localhost:9200/weather&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>服务器返回一个 JSON 对象，里面的<code>acknowledged</code>字段表示操作成功。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;shards_acknowledged&quot;</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>然后，我们发出 DELETE 请求，删除这个 Index。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X DELETE <span class="string">&#x27;localhost:9200/weather&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>需要指定中文分词器，不能使用默认的英文分词器。</p><p>Elastic 的分词器称为 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis.html">analyzer</a>。我们对每个字段指定分词器。</p><hr><h1>操作</h1><p>新增：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X PUT &#x27;localhost:9200/accounts/person/1&#x27; -d &#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;user&quot;: &quot;张三&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;工程师&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;数据库管理&quot;</span><br><span class="line">&#125;&#x27; </span><br></pre></td></tr></table></figure><p>新增记录的时候，也可以不指定 Id，这时要改成 POST 请求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ curl -X POST &#x27;localhost:9200/accounts/person&#x27; -d &#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;user&quot;: &quot;李四&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;工程师&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;系统管理&quot;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><p>不进行指定的话<code>_id</code>字段就是一个随机字符串。</p><p>查询：</p><p>向<code>/Index/Type/Id</code>发出 GET 请求，就可以查看这条记录。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&#x27;localhost:9200/accounts/person/1?pretty=true&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>删除：</p><p>删除记录就是发出 DELETE 请求。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X DELETE <span class="string">&#x27;localhost:9200/accounts/person/1&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>这里先不要删除这条记录，后面还要用到。</p><p>更新：</p><p>更新记录就是使用 PUT 请求，重新发送一次数据。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X PUT <span class="string">&#x27;localhost:9200/accounts/person/1&#x27;</span> -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;user&quot; : &quot;张三&quot;,</span></span><br><span class="line"><span class="string">    &quot;title&quot; : &quot;工程师&quot;,</span></span><br><span class="line"><span class="string">    &quot;desc&quot; : &quot;数据库管理，软件开发&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;_index&quot;</span>:<span class="string">&quot;accounts&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_type&quot;</span>:<span class="string">&quot;person&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_version&quot;</span>:2,</span><br><span class="line">  <span class="string">&quot;result&quot;</span>:<span class="string">&quot;updated&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span>:&#123;<span class="string">&quot;total&quot;</span>:2,<span class="string">&quot;successful&quot;</span>:1,<span class="string">&quot;failed&quot;</span>:0&#125;,</span><br><span class="line">  <span class="string">&quot;created&quot;</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>返回所有记录：</p><p>使用 GET 方法，直接请求<code>/Index/Type/_search</code>，就会返回所有记录。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&#x27;localhost:9200/accounts/person/_search&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>全文搜索：</p><p>Elastic 的查询非常特别，使用自己的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/query-dsl.html">查询语法</a>，要求 GET 请求带有数据体。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&#x27;localhost:9200/accounts/person/_search&#x27;</span>  -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;软件&quot; &#125;&#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>指定的匹配条件是<code>desc</code>字段里面包含&quot;软件&quot;这个词。返回结果如下。</p><p>Elastic 默认一次返回10条结果，可以通过<code>size</code>字段改变这个设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&#x27;localhost:9200/accounts/person/_search&#x27;</span>  -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;管理&quot; &#125;&#125;,</span></span><br><span class="line"><span class="string">  &quot;size&quot;: 1</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>还可以通过<code>from</code>字段，指定位移。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&#x27;localhost:9200/accounts/person/_search&#x27;</span>  -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;管理&quot; &#125;&#125;,</span></span><br><span class="line"><span class="string">  &quot;from&quot;: 1,</span></span><br><span class="line"><span class="string">  &quot;size&quot;: 1</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>上面代码指定，从位置1开始（默认是从位置0开始），只返回一条结果。</p><p>如果有多个搜索关键字， Elastic 认为它们是<code>or</code>关系。</p><p>如果要执行多个关键词的<code>and</code>搜索，必须使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/query-dsl-bool-query.html">布尔查询</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&#x27;localhost:9200/accounts/person/_search&#x27;</span>  -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;bool&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;must&quot;: [</span></span><br><span class="line"><span class="string">        &#123; &quot;match&quot;: &#123; &quot;desc&quot;: &quot;软件&quot; &#125; &#125;,</span></span><br><span class="line"><span class="string">        &#123; &quot;match&quot;: &#123; &quot;desc&quot;: &quot;系统&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1>Java中使用</h1><p>首先需要在 <code>pom.xml</code> 文件中添加 Elasticsearch 和 Jackson 的依赖：</p><p>创建客户端，在Config类里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RestClient</span> <span class="variable">restClient</span> <span class="operator">=</span> RestClient</span><br><span class="line">  .builder(HttpHost.create(<span class="string">&quot;http://localhost:9200&quot;</span>))</span><br><span class="line">  .build();</span><br><span class="line"><span class="type">ElasticsearchTransport</span> <span class="variable">transport</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestClientTransport</span>(restClient, <span class="keyword">new</span> <span class="title class_">JacksonJsonpMapper</span>());</span><br><span class="line"><span class="type">ElasticsearchClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ElasticsearchClient</span>(transport);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>索引文档：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">20</span>, <span class="string">&quot;Mark Doe&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1471466076564L</span>));</span><br><span class="line"><span class="type">IndexResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.index(i -&gt; i</span><br><span class="line">  .index(<span class="string">&quot;person&quot;</span>)</span><br><span class="line">  .id(person.getFullName())</span><br><span class="line">  .document(person));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">searchText</span> <span class="operator">=</span> <span class="string">&quot;John&quot;</span>;</span><br><span class="line">SearchResponse&lt;Person&gt; searchResponse = client.search(s -&gt; s</span><br><span class="line">  .index(<span class="string">&quot;person&quot;</span>)</span><br><span class="line">  .query(q -&gt; q</span><br><span class="line">    .match(t -&gt; t</span><br><span class="line">      .field(<span class="string">&quot;fullName&quot;</span>)</span><br><span class="line">      .query(searchText))), Person.class);</span><br><span class="line"></span><br><span class="line">List&lt;Hit&lt;Person&gt;&gt; hits = searchResponse.hits().hits();</span><br><span class="line">assertEquals(<span class="number">1</span>, hits.size());</span><br><span class="line">assertEquals(<span class="string">&quot;John Doe&quot;</span>, hits.get(<span class="number">0</span>).source().getFullName());</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>模糊匹配：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Query</span> <span class="variable">fuzzyQuery</span> <span class="operator">=</span> FuzzyQuery.of(f -&gt; f</span><br><span class="line">    .field(<span class="string">&quot;fullName&quot;</span>)</span><br><span class="line">    .value(searchText)</span><br><span class="line">    .fuzziness(<span class="string">&quot;AUTO&quot;</span>))._toQuery();</span><br><span class="line"></span><br><span class="line">SearchResponse&lt;Person&gt; searchResponse = client.search(s -&gt; s</span><br><span class="line">    .index(<span class="string">&quot;person&quot;</span>)</span><br><span class="line">    .query(q -&gt; q.bool(b -&gt; b.must(fuzzyQuery))), Person.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>fuzziness</code> 参数控制允许的编辑距离，可以设置为整数值或者 “AUTO”，后者会根据搜索词的长度自动调整</p><p>布尔查询:组合 <code>match</code> 查询（用于精确匹配）和 <code>fuzzy</code> 查询（用于模糊匹配）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Query</span> <span class="variable">matchQuery</span> <span class="operator">=</span> MatchQuery.of(m -&gt; m.field(<span class="string">&quot;fullName&quot;</span>).query(searchText))._toQuery();</span><br><span class="line"><span class="type">Query</span> <span class="variable">fuzzyQuery</span> <span class="operator">=</span> FuzzyQuery.of(f -&gt; f</span><br><span class="line">    .field(<span class="string">&quot;fullName&quot;</span>)</span><br><span class="line">    .value(searchText)</span><br><span class="line">    .fuzziness(<span class="string">&quot;AUTO&quot;</span>))._toQuery();</span><br><span class="line"></span><br><span class="line">SearchResponse&lt;Person&gt; searchResponse = client.search(s -&gt; s</span><br><span class="line">    .index(<span class="string">&quot;person&quot;</span>)</span><br><span class="line">    .query(q -&gt; q.bool(b -&gt; b.should(matchQuery).should(fuzzyQuery))), Person.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用 N-Grams 提高模糊匹配</strong>，通过索引文本的 n-gram 来提高模糊匹配的性能和准确性的技术</p><p>可以使用 Lucene 查询解析器语法构建更复杂的查询，包括通配符、布尔运算符等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Query</span> <span class="variable">simpleStringQuery</span> <span class="operator">=</span> SimpleQueryStringQuery.of(q -&gt; q.query(<span class="string">&quot;*Doe&quot;</span>))._toQuery();</span><br><span class="line">SearchResponse&lt;Person&gt; response3 = client.search(s -&gt; s.query(q -&gt; q.bool(b -&gt; b</span><br><span class="line">  .must(simpleStringQuery))), Person.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>优化</h1><ul><li><strong>恰当的索引配置</strong>：合理配置分片数量和副本数量是提高查询性能的关键。分片数量应根据数据量和查询负载合理配置，副本数量则可以提高数据的可用性和查询性能。</li><li><strong>合理的分词器选择</strong>：选择合适的分词器和分析器可以显著提高搜索精确度和性能。</li><li><strong>高效的缓存使用</strong>：合理配置和使用不同层级的缓存，可以显著提高查询性能，减少响应时间。定期监控和调优缓存配置，确保缓存的高效利用和系统的健康运行。</li><li><strong>查询语句优化</strong>：根据具体的查询需求，选择合适的分页查询策略，如 from-size、Scroll、Search_after 和 Search_after (PIT)。不同的分页查询策略有各自的优缺点，合理选择可以提高查询性能和用户体验。同时自定义评分函数，可调整搜索结果的相关性评分，确保返回的结果更符合业务需求。</li><li><strong>慢查询瓶颈分析</strong>：需关注的CPU 使用率，内存使用率以及磁盘IO，当其中一项达到瓶颈，查询性能就可能上不去了。</li></ul><h1>面试问题</h1><h2 id="1-ES-的分布式架构原理能说一下么"><a href="http://1.ES">1.ES</a> 的分布式架构原理能说一下么</h2><p>ElasticSearch 设计的理念就是分布式搜索引擎，底层其实还是基于 lucene 的。核心思想就是在多台机器上启动多个 ES 进程实例，组成了一个 ES 集群。</p><p>ES 中存储数据的<strong>基本单位是索引</strong>，比如说你现在要在 ES 中存储一些订单数据，你就应该在 ES 中创建一个索引 <code>order_idx</code> ，所有的订单数据就都写到这个索引里面去，一个索引差不多就是相当于是 mysql 里的一个数据库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index -&gt; type -&gt; mapping -&gt; document -&gt; field</span><br></pre></td></tr></table></figure><p>一个 index 里可以有多个 type，每个 type 的字段都是差不多的</p><p>差不多是这么个对应关系</p><p>index-&gt;一类表</p><p>type-&gt;表</p><p>mapping-&gt;表结构</p><p>ducument-&gt;行</p><p>field-&gt;值</p><p>你搞一个索引，这个索引可以拆分成多个 <code>shard</code> ，每个 shard 存储部分数据。拆分多个 shard 是有好处的，一是<strong>支持横向扩展</strong>，比如你数据量是 3T，3 个 shard，每个 shard 就 1T 的数据，若现在数据量增加到 4T，怎么扩展，很简单，重新建一个有 4 个 shard 的索引，将数据导进去；二是<strong>提高性能</strong>，数据分布在多个 shard，即多台服务器上，所有的操作，都会在多台机器上并行分布式执行，提高了吞吐量和性能。</p><p>接着就是这个 shard 的数据实际是有多个备份，就是说每个 shard 都有一个 <code>primary shard</code> ，负责写入数据，但是还有几个 <code>replica shard</code> 。 <code>primary shard</code> 写入数据之后，会将数据同步到其他几个 <code>replica shard</code> 上去。</p><p>通过这个 replica 的方案，每个 shard 的数据都有多个备份，如果某个机器宕机了，没关系啊，还有别的数据副本在别的机器上呢。高可用了吧。</p><p>ES 集群多个节点，会自动选举一个节点为 master 节点，这个 master 节点其实就是干一些管理的工作的，比如维护索引元数据、负责切换 primary shard 和 replica shard 身份等。要是 master 节点宕机了，那么会重新选举一个节点为 master 节点。</p><p>如果是非 master 节点宕机了，那么会由 master 节点，让那个宕机节点上的 primary shard 的身份转移到其他机器上的 replica shard。接着你要是修复了那个宕机机器，重启了之后，master 节点会控制将缺失的 replica shard 分配过去，同步后续修改的数据之类的，让集群恢复正常。</p><p>说得更简单一点，就是说如果某个非 master 节点宕机了。那么此节点上的 primary shard 不就没了。那好，master 会让 primary shard 对应的 replica shard（在其他机器上）切换为 primary shard。如果宕机的机器修复了，修复后的节点也不再是 primary shard，而是 replica shard。</p><p>其实上述就是 ElasticSearch 作为分布式搜索引擎最基本的一个架构设计。</p><p>其实都是差不多的，这些分布式的构建</p><h2 id="2-ES-写入数据的工作原理是什么啊？ES-查询数据的工作原理是什么啊？底层的-Lucene-介绍一下呗？倒排索引了解吗？"><a href="http://2.ES">2.ES</a> 写入数据的工作原理是什么啊？ES 查询数据的工作原理是什么啊？底层的 Lucene 介绍一下呗？倒排索引了解吗？</h2><p>写数据：</p><ul><li>客户端选择一个 node 发送请求过去，这个 node 就是 <code>coordinating node</code> （协调节点）。</li><li><code>coordinating node</code> 对 document 进行<strong>路由</strong>，将请求转发给对应的 node（有 primary shard）。</li><li>实际的 node 上的 <code>primary shard</code> 处理请求，然后将数据同步到 <code>replica node</code> 。</li><li><code>coordinating node</code> 如果发现 <code>primary node</code> 和所有 <code>replica node</code> 都搞定之后，就返回响应结果给客户端。</li></ul><p>读数据：</p><p>可以通过 <code>doc id</code> 来查询，会根据 <code>doc id</code> 进行 hash，判断出来当时把 <code>doc id</code> 分配到了哪个 shard 上面去，从那个 shard 去查询。</p><ul><li>客户端发送请求到<strong>任意</strong>一个 node，成为 <code>coordinate node</code> 。</li><li><code>coordinate node</code> 对 <code>doc id</code> 进行哈希路由，将请求转发到对应的 node，此时会使用 <code>round-robin</code> <strong>随机轮询算法</strong>，在 <code>primary shard</code> 以及其所有 replica 中随机选择一个，让读请求负载均衡。</li><li>接收请求的 node 返回 document 给 <code>coordinate node</code> 。</li><li><code>coordinate node</code> 返回 document 给客户端。</li></ul><p>搜索数据：</p><p>你根据 <code>java</code> 关键词来搜索，将包含 <code>java</code> 的 <code>document</code> 给搜索出来。es 就会给你返回：java 真好玩儿啊，java 好难学啊。</p><ul><li>客户端发送请求到一个 <code>coordinate node</code> 。</li><li>协调节点将搜索请求转发到<strong>所有</strong>的 shard 对应的 <code>primary shard</code> 或 <code>replica shard</code> ，都可以。</li><li>query phase：每个 shard 将自己的搜索结果（其实就是一些 <code>doc id</code> ）返回给协调节点，由协调节点进行数据的合并、排序、分页等操作，产出最终结果。</li><li>fetch phase：接着由协调节点根据 <code>doc id</code> 去各个节点上<strong>拉取实际</strong>的 <code>document</code> 数据，最终返回给客户端。</li></ul><p>底层lucene:</p><p>简单来说，lucene 就是一个 jar 包，里面包含了封装好的各种建立倒排索引的算法代码。我们用 Java 开发的时候，引入 lucene jar，然后基于 lucene 的 api 去开发就可以了。</p><p>通过 lucene，我们可以将已有的数据建立索引，lucene 会在本地磁盘上面，给我们组织索引的数据结构</p><p>倒叙索引：</p><p>在搜索引擎中，每个文档都有一个对应的文档 ID，文档内容被表示为一系列关键词的集合。例如，文档 1 经过分词，提取了 20 个关键词，每个关键词都会记录它在文档中出现的次数和出现位置。</p><p>那么，倒排索引就是<strong>关键词到文档</strong> ID 的映射，每个关键词都对应着一系列的文件，这些文件中都出现了关键词。</p><p>另外，实用的倒排索引还可以记录更多的信息，比如文档频率信息，表示在文档集合中有多少个文档包含某个单词。</p><p>那么，有了倒排索引，搜索引擎可以很方便地响应用户的查询。比如用户输入查询 <code>Facebook</code> ，搜索系统查找倒排索引，从中读出包含这个单词的文档，这些文档就是提供给用户的搜索结果。</p><ul><li>倒排索引中的所有词项对应一个或多个文档；</li><li>倒排索引中的词项<strong>根据字典顺序升序排列</strong></li></ul><p>底层实现：</p><h2 id="3-ES-生产集群的部署架构是什么？每个索引的数据量大概有多少？每个索引大概有多少个分片？"><a href="http://3.ES">3.ES</a> 生产集群的部署架构是什么？每个索引的数据量大概有多少？每个索引大概有多少个分片？</h2><ul><li>es 生产集群我们部署了 5 台机器，每台机器是 6 核 64G 的，集群总内存是 320G。</li><li>我们 es 集群的日增量数据大概是 2000 万条，每天日增量数据大概是 500MB，每月增量数据大概是 6 亿，15G。目前系统已经运行了几个月，现在 es 集群里数据总量大概是 100G 左右。</li><li>目前线上有 5 个索引（这个结合你们自己业务来，看看自己有哪些数据可以放 es 的），每个索引的数据量大概是 20G，所以这个数据量之内，我们每个索引分配的是 8 个 shard，比默认的 5 个 shard 多了 3 个 shard。</li></ul><h2 id="4-ES-在数据量很大的情况下（数十亿级别）如何提高查询效率啊？"><a href="http://4.ES">4.ES</a> 在数据量很大的情况下（数十亿级别）如何提高查询效率啊？</h2><p><strong>使用filesystem cache</strong></p><p>往 es 里写的数据，实际上都写到磁盘文件里去了，<strong>查询的时候</strong>，操作系统会将磁盘文件里的数据自动缓存到 <code>filesystem cache</code> 里面去。</p><p>es 的搜索引擎严重依赖于底层的 <code>filesystem cache</code> ，你如果给 <code>filesystem cache</code> 更多的内存，尽量让内存可以容纳所有的 <code>idx segment file </code>索引数据文件，那么你搜索的时候就基本都是走内存的，性能会非常高。</p><p>最佳的情况下，就是你的机器的内存，至少可以容纳你的总数据量的一半。</p><p>写入 es 的数据最好小于等于，或者是略微大于 es 的 filesystem cache 的内存容量。</p><p><strong>数据预热</strong></p><p>最好<strong>做一个专门的缓存预热子系统</strong>，就是对热数据每隔一段时间，就提前访问一下，让数据进入 <code>filesystem cache</code> 里面去。这样下次别人访问的时候，性能一定会好很多。</p><p><strong>冷热分离</strong></p><p>es 可以做类似于 mysql 的水平拆分，就是说将大量的访问很少、频率很低的数据，单独写一个索引，然后将访问很频繁的热数据单独写一个索引。最好是将<strong>冷数据写入一个索引中，然后热数据写入另外一个索引中</strong>，这样可以确保热数据在被预热之后，尽量都让他们留在 <code>filesystem os cache</code> 里，<strong>别让冷数据给冲刷掉</strong>。</p><p><strong>document模型设计</strong></p><p>最好是先在 <strong>Java 系统里就完成关联，将关联好的数据直接写入 es 中</strong>。搜索的时候，就不需要利用 es 的搜索语法来完成 join 之类的关联搜索了。</p><p>document 模型设计是非常重要的，很多操作，不要在搜索的时候才想去执行各种复杂的乱七八糟的操作。es 能支持的操作就那么多，不要考虑用 es 做一些它不好操作的事情。如果真的有那种操作，尽量在 document 模型设计的时候，写入的时候就完成。另外对于一些太复杂的操作，比如 join/nested/parent-child 搜索都要尽量避免，性能都很差的。</p><p><strong>分页性能优化</strong></p><p>假如你每页是 10 条数据，你现在要查询第 100 页，实际上是会把每个 shard 上存储的前 1000 条数据都查到一个协调节点上，如果你有个 5 个 shard，那么就有 5000 条数据，接着协调节点对这 5000 条数据进行一些合并、处理，再获取到最终第 100 页的 10 条数据。</p><p>前面的几页速度挺快，后面的就不行了。</p><p>解决办法：</p><p>1.不允许深度分页</p><p>2.类似于微博中，下拉刷微博，刷出来一页一页的，你可以用 <code>scroll api</code></p><p>scroll 会一次性给你生成<strong>所有数据的一个快照</strong>，然后每次滑动向后翻页就是通过<strong>游标</strong> <code>scroll_id</code> 移动，获取下一页下一页这样子，性能会比上面说的那种分页性能要高很多很多，基本上都是毫秒级的。</p><p>但是他<strong>不能随意跳到任何一页的场景</strong>。</p><p>初始化时必须指定 <code>scroll</code> 参数，告诉 es 要保存此次搜索的上下文多长时间。你需要确保用户不会持续不断翻页翻几个小时，否则可能因为超时而失败。</p><p>除了用 <code>scroll api</code> ，你也可以用 <code>search_after</code> 来做， <code>search_after</code> 的思想是使用前一页的结果来帮助检索下一页的数据，显然，这种方式也不允许你随意翻页，你只能一页页往后翻。初始化时，需要使用一个唯一值的字段作为 sort 字段。</p>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/">技术栈</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/%E9%9D%A2%E8%AF%95/">面试</category>
      
      <category domain="https://blog.tokenlen.top/tags/Elasticsearch/">Elasticsearch</category>
      
      
      <comments>https://blog.tokenlen.top/2025/07/06/new-stack/es1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>黑马点评项目知识分析</title>
      <link>https://blog.tokenlen.top/2025/07/01/workmenu/dianping2/</link>
      <guid>https://blog.tokenlen.top/2025/07/01/workmenu/dianping2/</guid>
      <pubDate>Mon, 30 Jun 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1&gt;登录模块&lt;/h1&gt;
&lt;p&gt;安全性加强：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTPS 协议&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;实践&lt;/strong&gt;：通过在 &lt;code&gt;application.properties&lt;/code&gt; 中配置</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1>登录模块</h1><p>安全性加强：</p><p><strong>HTTPS 协议</strong>：</p><ul><li><strong>实践</strong>：通过在 <code>application.properties</code> 中配置 <code>server.ssl</code> 相关属性，并提供 SSL 证书（如 <code>keystore.p12</code>），强制使用 HTTPS。</li><li><strong>目的</strong>：加密客户端与服务器之间的所有通信，防止中间人攻击窃听 Token 和敏感数据。</li></ul><p><strong>敏感数据加密存储</strong>：</p><ul><li><strong>密码</strong>：使用 <strong>BCryptPasswordEncoder</strong> 进行单向哈希加密存储（已在 <code>AuthApplication.java</code> 和 <code>UserServiceImpl</code> 中实现）。每次登录时，哈希用户输入的密码与数据库中存储的哈希值进行比对。</li><li><strong>API 密钥</strong>：将阿里云短信服务的 <code>access-key-id</code> 和 <code>access-key-secret</code> 等敏感信息存储在 <code>application.properties</code> 中，<strong>生产环境应使用 Spring Cloud Config、Vault 等配置中心或 K8s Secrets 进行更安全的管理</strong>，避免硬编码和直接暴露。</li></ul><p><strong>防止常见 Web 攻击</strong>：</p><ul><li><strong>SQL 注入</strong>：<ul><li><strong>实践</strong>：使用 <strong>MyBatis</strong> 提供的 <strong>预编译语句 (PreparedStatement)</strong>。MyBatis 默认会处理参数的预编译，避免字符串拼接导致的 SQL 注入。 使用#就可以进行预编译</li><li><strong>目的</strong>：防止攻击者通过恶意输入修改或窃取数据库数据。</li></ul></li><li><strong>XSS (跨站脚本攻击)</strong>：<ul><li><strong>实践</strong>：前端在展示用户生成内容时，应<strong>对所有输出进行严格的编码和转义</strong>。后端在返回数据时，确保不直接返回未经验证的用户输入。JWT Access Token 存储在前端 <code>localStorage</code> 中存在 XSS 风险，<strong>推荐存储在内存（如 Redux/Vuex store）或 Session Storage 中</strong>，或者在 HTTP-only Cookie 中。</li><li><strong>目的</strong>：防止攻击者注入恶意脚本，窃取用户会话或篡改页面内容。</li></ul></li><li><strong>CSRF (跨站请求伪造)</strong>：<ul><li><strong>实践</strong>：由于 Access Token 通常通过 <code>Authorization</code> 头传输，CSRF 攻击较难。但如果 Refresh Token 通过 Cookie 传输，应设置 <strong>Cookie 的 <code>SameSite</code> 属性为 <code>Strict</code> 或 <code>Lax</code></strong>，并考虑为敏感操作（如密码修改）增加 CSRF Token 验证。本示例 Refresh Token 主要通过 <code>X-Refresh-Token</code> 头传输，降低了 CSRF 风险。</li><li><strong>目的</strong>：防止攻击者诱骗用户在不知情的情况下发送恶意请求。</li></ul></li><li><strong>重放攻击</strong>：<ul><li><strong>Access Token</strong>：短期有效期限制了重放攻击的窗口。</li><li><strong>Refresh Token</strong>：<strong>Redis 白名单</strong> (存储用户 ID 和 Refresh Token 值) 和 <strong>JWT JTI (JWT ID)</strong> 结合，确保 Refresh Token 的唯一性和一次性使用（或控制重用次数）。当 Refresh Token 被使用后，可以立即从 Redis 中删除旧的，并加入黑名单。</li><li><strong>黑名单</strong>：登出或强制失效时，将 Access Token 的 JTI 加入 Redis 黑名单，拦截后续使用。</li></ul></li></ul><p><strong>Token 安全性</strong>：</p><ul><li><strong>JWT 密钥管理</strong>：<code>jwt.secret</code> 必须是一个<strong>高强度、复杂、保密</strong>的密钥。生产环境应使用密钥管理服务或环境变量注入，禁止硬编码。定期更换密钥 (key rotation)。</li><li><strong>Token 有效期</strong>：Access Token 短期有效 (15分钟)，降低泄露风险。Refresh Token 长期有效 (7天)，但通过 Redis 严格管理其生命周期和吊销。</li><li><strong>黑名单机制</strong>：通过 Redis 维护 Access Token 和 Refresh Token 的黑名单，支持即时吊销已泄露或已登出的 Token。命名规范：<code>blacklist:at:&lt;jti&gt;</code> 和 <code>blacklist:rt:&lt;jti&gt;</code>，过期时间与原 Token 一致。</li></ul><h1>店铺模块</h1><h2 id="缓存">缓存</h2><p><strong>缓存（Cache）</strong> 是一种数据交换的缓冲区，是存储数据的临时地方。它的主要目的是提高数据访问速度和降低后端负载。</p><p>缓存位于数据源（如数据库）和应用程序之间，当应用程序需要访问数据时，首先会尝试从缓存中获取。如果缓存中存在所需数据（缓存命中），则直接返回，避免了访问慢速的底层数据源。如果缓存中没有（缓存未命中），则从数据源中获取，并将数据存入缓存，以便后续访问。</p>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/java/">java</category>
      
      <category domain="https://blog.tokenlen.top/categories/java/%E9%A1%B9%E7%9B%AE/">项目</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/spring-boot/">spring boot</category>
      
      <category domain="https://blog.tokenlen.top/tags/java/">java</category>
      
      
      <comments>https://blog.tokenlen.top/2025/07/01/workmenu/dianping2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>黑马点评项目逻辑功能分析</title>
      <link>https://blog.tokenlen.top/2025/07/01/workmenu/dianping1/</link>
      <guid>https://blog.tokenlen.top/2025/07/01/workmenu/dianping1/</guid>
      <pubDate>Mon, 30 Jun 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1&gt;登录功能&lt;/h1&gt;
&lt;p&gt;架构：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1>登录功能</h1><p>架构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── java</span><br><span class="line">│   │   │   └── com</span><br><span class="line">│   │   │       └── example</span><br><span class="line">│   │   │           └── auth</span><br><span class="line">│   │   │               ├── AuthApplication.java</span><br><span class="line">│   │   │               ├── config</span><br><span class="line">│   │   │               │   ├── AliyunSmsConfig.java</span><br><span class="line">│   │   │               │   ├── BloomFilterConfig.java</span><br><span class="line">│   │   │               │   └── RedisConfig.java</span><br><span class="line">│   │   │               ├── controller</span><br><span class="line">│   │   │               │   ├── AuthController.java</span><br><span class="line">│   │   │               │   └── ProtectedController.java</span><br><span class="line">│   │   │               ├── dto</span><br><span class="line">│   │   │               │   ├── LoginRequest.java</span><br><span class="line">│   │   │               │   ├── RegisterRequest.java</span><br><span class="line">│   │   │               │   ├── SmsCodeRequest.java</span><br><span class="line">│   │   │               │   └── TokenResponse.java</span><br><span class="line">│   │   │               ├── entity</span><br><span class="line">│   │   │               │   ├── Permission.java</span><br><span class="line">│   │   │               │   ├── Role.java</span><br><span class="line">│   │   │               │   └── User.java</span><br><span class="line">│   │   │               ├── exception</span><br><span class="line">│   │   │               │   ├── AuthException.java</span><br><span class="line">│   │   │               │   ├── GlobalExceptionHandler.java</span><br><span class="line">│   │   │               │   └── ResourceNotFoundException.java</span><br><span class="line">│   │   │               ├── interceptor</span><br><span class="line">│   │   │               │   └── JwtAuthInterceptor.java</span><br><span class="line">│   │   │               ├── mapper</span><br><span class="line">│   │   │               │   ├── PermissionMapper.java</span><br><span class="line">│   │   │               │   ├── RoleMapper.java</span><br><span class="line">│   │   │               │   └── UserMapper.java</span><br><span class="line">│   │   │               ├── service</span><br><span class="line">│   │   │               │   ├── AliyunSmsService.java</span><br><span class="line">│   │   │               │   ├── UserService.java</span><br><span class="line">│   │   │               │   └── impl</span><br><span class="line">│   │   │               │       └── UserServiceImpl.java</span><br><span class="line">│   │   │               ├── util</span><br><span class="line">│   │   │               │   ├── AuthContextHolder.java</span><br><span class="line">│   │   │               │   ├── JwtUtils.java</span><br><span class="line">│   │   │               │   └── LogAspect.java</span><br><span class="line">│   │   │               └── validator</span><br><span class="line">│   │   │                   └── MobileValidator.java</span><br><span class="line">│   │   └── resources</span><br><span class="line">│   │       ├── application.properties</span><br><span class="line">│   │       ├── mapper</span><br><span class="line">│   │       │   ├── PermissionMapper.xml</span><br><span class="line">│   │       │   ├── RoleMapper.xml</span><br><span class="line">│   │       │   └── UserMapper.xml</span><br><span class="line">│   │       └── schema.sql</span><br></pre></td></tr></table></figure><p>重要类的逻辑分析：</p><p><strong>JwtInterceptor.java token拦截器</strong></p><p>1.accesstoken拦截器：看请求头的accesstoken是不是存在，是不是合法，是不是在黑名单里</p><p>不合法返回401</p><p>2.refreshtoken拦截器：看refreshToken是不是为null,为空返回401</p><p>看是不是在redis里面，匹不匹配，不匹配返回403，不合法</p><p>然后看access倒没到期。到期刷新生成新的token,accesstoken放入请求头</p><p>refreshtoken放入redis</p><p><strong>AliyunSmsService.java</strong>  短信发送 service</p><p>生成一个随机数，然后放入redis，再调用send发送</p><p>send主要是设置sendSmsRequest的信息，电话号，签名，信息等。然后根据resonse的body来看发送成功</p><p>**BloomFilterServiceImpl.java **  布隆过滤器service</p><p>主要是put方法和mightContain含有方法直接调用，使用service进行一层封装</p><p>**UserServiceImpl.java ** 用户service</p><p>注册：检测用户名电话号是否存在，然后新建User，然后set各种信息，之后insert表中。然后检测Role，然后没有就设置默认的角色，插入角色表，将userid put进布隆过滤器</p><p>登出：获取key,然后加入黑名单，把redis中的信息删除</p><p>获取信息：先使用布隆过滤器看存不存在，看user对象存不存在，都存在的话根据id查询</p><p>登录：先去匹配电话号，或者查找用户名。然后验证密码和状态，都成功，获取角色和权限，生成两个token，refreshtoken放入redis中,accesstoken返回resonse放入前端</p><p>加入黑名单：获取一个ttl，没过期的话就给他加入黑名单的redis中。过期就不管了</p><p><strong>AuthContextHolder.java</strong> ThreadLocal类</p><p>使用ThreadLocal保存信息，通过getter和setter来保持，注意clear使用remove方法来清空</p><p><strong>JwtTokenUntils.java JWTtoken生成工具类</strong></p><p>构建accesstoken，claims放需要传递的信息，比如userid。注意构建过期时间。一般比较短</p><p>构建refreshtoken，claims放需要传递的信息，比如userid。注意构建过期时间。一般比较长</p><p>然后从claims中获取信息</p><h1>店铺模块</h1><p><strong>shopserviceimpl:</strong></p><p>基础功能实现</p><p>根据id查：</p><p>还保证了数据的一致性，先看缓存中有没有，没有就查数据库</p><p>先更新数据库再删缓存</p><p>还解决了缓存三兄弟，缓存穿透防护，空对象，缓存击穿：互斥锁，缓存雪崩：随机过期时间</p><p>还加入了重试机制，自旋等待</p><p>更新数据：</p><p>根据id查出来之后，放入生产者发送消息，提供了批量发，定时发，单个发，然后到消费者后，获取里面的信息，异步线程池写入数据库，在这里先将日放入redis，设置短的过期时间，写入成功后再设置为长期，然后将消息标记为已读。然后发送ACK请求，是啊比之后重试。重试到次数，退出循环，进入死信队列，人工处理。</p><p>为了保证幂等写库时加唯一键或 version 字段，根据这个来保证幂等</p><p>生产者接受到消息后根据成没成功，发送日志记录</p><p>设置热点信息：</p><p>预热，根据id查出来之后，放入redis中</p><p>MQ:</p><p>这里采用了继承，是消费者继承了一个基类，然后进行异步的消费写入。</p><p>然后生产者有批量发，定时发，延迟发，顺序发，单个发。</p><p>补充：</p><ol><li><strong>数据库连接池</strong> 确保使用 HikariCP 或 Druid 等高性能数据库连接池。</li><li><strong>监控和告警</strong> 对整个系统进行监控，包括 MQ 消息堆积情况、线程池状态、Redis 缓存命中率、数据库连接池状态等等。当出现异常情况时，及时发送告警。</li><li><strong>链路追踪</strong> 可以使用 SkyWalking、Zipkin 等链路追踪工具，方便排查分布式系统中的性能瓶颈和错误。</li><li><strong>单元测试和集成测试</strong> 编写单元测试和集成测试，确保各个组件的功能正常。</li></ol><p><strong>额外建议：</strong></p><ul><li><strong>熔断机制</strong> 当某个服务出现故障时，快速失败，避免雪崩 [8]。Hystrix 和 Sentinel 都是常用的熔断器。</li><li><strong>限流</strong> 使用令牌桶或漏桶算法限制请求流量，防止系统被流量压垮 [8]。Guava RateLimiter 和 Sentinel 都可以实现限流。</li></ul><h1>优惠劵超卖秒杀</h1><p>主要是解决的优惠卷的秒杀和超卖问题</p><p>秒杀主要是采用Redisson分布式锁来实现的，通过redisIDWorkder来根据时间戳和业务来设置一个唯一的lockID。</p><p>然后通过获取锁，解锁来实现并发的问题</p><p>通过设计了秒杀类订单类和优惠劵类，</p><p>秒杀service负责查当前的业务id,然后优惠劵类负责去增加产生任务，进入堵塞队列</p><p>优惠劵下单通过ThreadLocal来获取用户id,通过lua脚本原子的去分发优惠劵，主要是</p><p>判断用户有没有领取过，库存是不是重足，然后扣库存。</p><p>然后将订单的信息加入，然后将订单发送给MQ消费者，消费者消费就是先设置一个短的过期时间，执行下单方法。成功就将ttl改为长期，下单失败进入重试机制，继续下单操作，等到达最大次数的时候，发送到死信队列人工处理，清除redis缓存</p><p>然后下单操作也是要去获取redis锁，然后去再查优惠劵下单redis存不存在，设置id信息。然后使用乐观锁去使用个人的库存优惠劵，成功之际完成任务，记住finally要关掉锁</p><p>补充：</p><ol><li><strong>防缓存穿透</strong> 你需要补充缓存穿透的解决方案 1。可以使用布隆过滤器 1或者缓存空对象来解决缓存穿透问题，防止恶意请求绕过缓存直接打到数据库。</li><li><strong>优惠券状态校验</strong> 需要补充优惠券有效期的判断 3。在秒杀前，需要校验优惠券是否在有效期内 3。服务端需要比对当前时间是否在优惠券有效时间范围内，可以设置定时任务扫描过期的优惠券，并标记为&quot;已过期&quot; 3。</li><li><strong>用户资格校验</strong> 秒杀之前需要先判断用户是否具备秒杀资格，例如是否有黑名单限制等。</li><li><strong>下单失败回滚</strong> 需要补充下单失败情况的处理 3。例如，支付失败、库存不足等情况，需要在事务回滚后将优惠券状态重置为&quot;未使用&quot; 3。为避免并发问题，可以使用分布式事务或 Redis 回滚标记 3。</li><li><strong>安全性</strong> 使用时不仅要校验优惠券ID，还要校验用户是否具备使用该优惠券的资格 3。防止用户伪造优惠券ID，盗用他人优惠券 3。</li><li><strong>更强的原子性</strong> 更强的原子性（两阶段确认）：第一阶段：消费者收到消息后，在本地事务（如果业务和幂等存储在同一个数据库）或分布式事务（如 TCC）中，先进行幂等性判断并记录 ID，然后执行业务逻辑。第二阶段：只有当整个事务提交成功后，才向 RabbitMQ 发送 basicAck。如果事务失败，则不发送 basicAck，让 RabbitMQ 重新投递消息 2。</li></ol><p><strong>技术细节补充：</strong></p><ol><li>Redis 分布式锁的细节<ul><li><strong>可重入性</strong> 考虑 Redisson 分布式锁的可重入性</li><li><strong>Watchdog 机制</strong> Redisson 的 Watchdog 机制可以自动续期，避免锁提前过期</li></ul></li><li>Lua 脚本的细节<ul><li><strong>短小精悍</strong> 保持 Lua 脚本的短小精悍，只包含最核心、需要原子性执行的逻辑 6。</li><li><strong>避免昂贵操作</strong> 避免在脚本中执行 KEYS、SMEMBERS、HGETALL 等会遍历大量数据的命令 6。</li><li><strong>超时时间</strong> 注意 Redis 的 <code>lua-time-limit</code> 配置 (默认 5 秒)，超出这个时间脚本会被终止 6。</li></ul></li><li>重试机制<ul><li><strong>重试次数限制</strong> 设置最大重试次数，超过限制则进入死信队列，避免无限重试。</li><li><strong>重试间隔</strong> 考虑使用不同的重试间隔，例如退避策略，避免重试过于频繁。</li></ul></li><li><strong>异步确认</strong> 最终成功后才 ACK 消息 2。</li><li><strong>双检</strong> 线程获取锁后，还需要查询缓存（也就是所谓的双检），这样才能够真正有效保障缓存不被击穿</li></ol><h1>搜索功能</h1><p>基础功能：</p><p>基于Elasticsearch 实现搜索功能</p><p>先是初始化SearchRequest然后初始化SearchSourceBuilder</p><p>然后初始化搜索BoolQueryBuilder</p><p>然后使用搜索的策略，MatchQueryBuilder 精准搜索，FuzzyQueryBuilder模糊匹配</p><p>然后把他们加入BoolQueryBuilder，然后再把他query进sourceBuilder。然后再包进searchRequest。完成发送请求。</p><p>然后再新建 SearchResponse使用客户端进行查询</p><p>然后把查询结果转为需要查询的类型</p><p>改进：</p><p>1.排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SortOrder</span> <span class="variable">order</span> <span class="operator">=</span> sortOrder.equalsIgnoreCase(<span class="string">&quot;asc&quot;</span>) ? SortOrder.ASC : SortOrder.DESC;</span><br><span class="line">sourceBuilder.sort(<span class="keyword">new</span> <span class="title class_">FieldSortBuilder</span>(sortField).order(order));</span><br></pre></td></tr></table></figure><p>2.分页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sourceBuilder.from((pageNum-<span class="number">1</span>)*pageSize).size(pageSize);</span><br></pre></td></tr></table></figure><p>3.高亮</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HighlightBuilder</span> <span class="variable">highlightBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>();</span><br><span class="line">            highlightBuilder.field(<span class="string">&quot;name&quot;</span>).preTags(HIGHLIGHT_PRE_TAG).postTags(HIGHLIGHT_POST_TAG);</span><br><span class="line">            sourceBuilder.highlighter(highlightBuilder);</span><br></pre></td></tr></table></figure><p>response:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (hit.getHighlightFields()!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">HighlightField</span> <span class="variable">nameField</span> <span class="operator">=</span> hit.getHighlightFields().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (nameField!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    Text[] fragments = nameField.fragments();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">highlightedName</span> <span class="operator">=</span> fragments[<span class="number">0</span>].toString();</span><br><span class="line">                    shop.setName(highlightedName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>4.分页查询优化，使用search_after进行优化</p><p>search_after实现翻页，使用前一页的结果来帮助检索下一页的数据</p><p>需要先指定排序规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SortOrder</span> <span class="variable">order</span> <span class="operator">=</span> sortOrder.equalsIgnoreCase(<span class="string">&quot;asc&quot;</span>) ? SortOrder.ASC : SortOrder.DESC;</span><br><span class="line">            sourceBuilder.sort(<span class="keyword">new</span> <span class="title class_">FieldSortBuilder</span>(sortField).order(order));</span><br></pre></td></tr></table></figure><p>后面需要制定下一页的结果来实现检索下一页的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object[] nextSearchAfter = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (shops.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">SearchHit</span> <span class="variable">lasthit</span> <span class="operator">=</span> searchResponse.getHits().getHits()[shops.size() - <span class="number">1</span>];</span><br><span class="line">                nextSearchAfter = lasthit.getSortValues();</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>总代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> SearchResult&lt;Shop&gt; <span class="title function_">searchShopsAfter</span><span class="params">(String keywords, <span class="type">int</span> pageSize, Object[] searchAfterSortValues, String sortField, String sortOrder)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(INDEX_NAME);</span><br><span class="line">            <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">            <span class="type">BoolQueryBuilder</span> <span class="variable">boolQueryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BoolQueryBuilder</span>();</span><br><span class="line"></span><br><span class="line">            <span class="type">MatchQueryBuilder</span> <span class="variable">matchQueryBuilder</span> <span class="operator">=</span> QueryBuilders.matchQuery(<span class="string">&quot;name&quot;</span>, keywords);</span><br><span class="line">            boolQueryBuilder.must(matchQueryBuilder);</span><br><span class="line"></span><br><span class="line">            sourceBuilder.query(boolQueryBuilder);</span><br><span class="line">            sourceBuilder.size(pageSize);</span><br><span class="line"></span><br><span class="line">            <span class="type">SortOrder</span> <span class="variable">order</span> <span class="operator">=</span> sortOrder.equalsIgnoreCase(<span class="string">&quot;asc&quot;</span>) ? SortOrder.ASC : SortOrder.DESC;</span><br><span class="line">            sourceBuilder.sort(<span class="keyword">new</span> <span class="title class_">FieldSortBuilder</span>(sortField).order(order));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (searchAfterSortValues != <span class="literal">null</span>) &#123;</span><br><span class="line">                sourceBuilder.searchAfter(searchAfterSortValues);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            searchRequest.source(sourceBuilder);</span><br><span class="line">            <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">            List&lt;Shop&gt; shops = convertSearchHitsToShops(searchResponse);</span><br><span class="line"></span><br><span class="line">            Object[] nextSearchAfter = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (shops.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">SearchHit</span> <span class="variable">lasthit</span> <span class="operator">=</span> searchResponse.getHits().getHits()[shops.size() - <span class="number">1</span>];</span><br><span class="line">                nextSearchAfter = lasthit.getSortValues();</span><br><span class="line">            &#125;</span><br><span class="line">            SearchResult&lt;Shop&gt; result = <span class="keyword">new</span> <span class="title class_">SearchResult</span>&lt;&gt;();</span><br><span class="line">            result.setItems(shops);</span><br><span class="line">            result.setNextSearchAfter(nextSearchAfter);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;使用 search_after 搜索店铺时发生IO异常&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用 <strong>Scroll 上下文</strong>进行分页查询的优化</p><p>首次请求的时候会进行快照生成，然后之后的查询就再使用之前的了</p><p>搜索完成后，要及时清除 scroll 上下文，释放资源</p><p>不适合高实时性的要求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后续请求</span></span><br><span class="line">            <span class="type">SearchScrollRequest</span> <span class="variable">scrollRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchScrollRequest</span>(scrollId);</span><br><span class="line">            scrollRequest.scroll(TimeValue.parseTimeValue(scrollTime, <span class="literal">null</span>, <span class="string">&quot;scroll&quot;</span>));</span><br><span class="line">            <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> client.scroll(scrollRequest, RequestOptions.DEFAULT);</span><br><span class="line">            <span class="keyword">return</span> convertSearchHitsToShops(searchResponse);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/java/">java</category>
      
      <category domain="https://blog.tokenlen.top/categories/java/%E9%A1%B9%E7%9B%AE/">项目</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/spring-boot/">spring boot</category>
      
      <category domain="https://blog.tokenlen.top/tags/java/">java</category>
      
      
      <comments>https://blog.tokenlen.top/2025/07/01/workmenu/dianping1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>面试面经</title>
      <link>https://blog.tokenlen.top/2025/06/30/towork/wokiing2/</link>
      <guid>https://blog.tokenlen.top/2025/06/30/towork/wokiing2/</guid>
      <pubDate>Sun, 29 Jun 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1&gt;自我真实面试&lt;/h1&gt;
&lt;h2 id=&quot;6-30宁波某小厂&quot;&gt;6.30宁波某小厂&lt;/h2&gt;
&lt;p&gt;40min腾讯会议，项目是外卖和MyDB&lt;/p&gt;
&lt;p&gt;1.问的学业情况，课程情况，到岗情况&lt;/p&gt;
&lt;p&gt;2.悲观锁和乐观锁&lt;/p&gt;
&lt;p&gt;CAS and</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1>自我真实面试</h1><h2 id="6-30宁波某小厂">6.30宁波某小厂</h2><p>40min腾讯会议，项目是外卖和MyDB</p><p>1.问的学业情况，课程情况，到岗情况</p><p>2.悲观锁和乐观锁</p><p>CAS and AQS</p><p>3.java常用的集合,List/Map</p><p>Arraylist,LinkedList HashMap,线程安全</p><p>4.常用集合来做什么，具体的应用</p><p>HashMap去重</p><p>5.MVCC的实现原理</p><p>read view,当前读 快照读 事务id</p><p>6.双token的应用和设计</p><p>token refreshtoken</p><p>7.了解若依平台吗？只知道是个啥。。。。</p><p>8.项目中并发的场景</p><p>行级锁，updata语句</p><p>9.索引是啥，索引失效的情况。</p><p>聚簇，联合，非聚簇，覆盖索引</p><p>最左前缀原则，or 函数 运算 范围查询 联合索引没覆盖 索引跳跃 模糊匹配</p><p>数据类型不匹配</p><p>进行了大量更新，没更新索引和没更新alayls</p><p>10.mybits和mybits-plus的比较，复杂查询不用mybits-plus</p><p>11.还有一个xxx缓存啥的，我都没听清他说话，就直接说没听过了。</p><p>12.乐观锁的实现</p><p>Atomic原子类，时间戳，版本号</p><p>13.问用没用过python，答会用点，会点简单的爬虫</p><p>14.最近在学什么技术</p><p>15.反问业务，工资等等</p><p>16.线程池怎么使用</p><p>线程池参数，流程，使用场景</p><h1>他人面经</h1>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/%E9%9D%A2%E7%BB%8F/">面经</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/%E9%9D%A2%E8%AF%95/">面试</category>
      
      
      <comments>https://blog.tokenlen.top/2025/06/30/towork/wokiing2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>大麦网业务分析-1</title>
      <link>https://blog.tokenlen.top/2025/06/27/workmenu/damai1/</link>
      <guid>https://blog.tokenlen.top/2025/06/27/workmenu/damai1/</guid>
      <pubDate>Thu, 26 Jun 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1&gt;数据库&lt;/h1&gt;
&lt;h2 id=&quot;分库分表&quot;&gt;分库分表&lt;/h2&gt;
&lt;p&gt;分库分表是解决海量数据存储和高并发访问的有效手段，但其设计并非一蹴而就，需要深入思考以下几个核心原则和复杂性。&lt;/p&gt;
&lt;h3</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1>数据库</h1><h2 id="分库分表">分库分表</h2><p>分库分表是解决海量数据存储和高并发访问的有效手段，但其设计并非一蹴而就，需要深入思考以下几个核心原则和复杂性。</p><h3 id="分片键—重要"><strong>分片键</strong>—重要</h3><p>分片键是数据分布的依据，其选择直接决定了分片策略的有效性和未来的可维护性。</p><ul><li><strong>业务相关性</strong>: 分片键应与核心业务逻辑紧密相关。例如，用户相关数据以 <code>user_id</code> 分片，订单相关数据可能也以 <code>user_id</code> 分片以保证用户维度的数据局部性。</li><li><strong>数据均匀性</strong>: 理想的分片键能够将数据均匀地分散到各个分片中，避免出现“<strong>热点</strong>”（某个分片数据量过大或访问压力过高）。通常采用哈希（如 <code>MD5(user_id) % N</code> 或更复杂的哈希算法）或自定义算法来确保均匀分布。</li></ul><p>可以通过<strong>历史数据分析</strong>来模拟不同分片键策略下的数据分布情况，评估其均匀性。对于哈希取模，可以考虑使用<strong>一致性哈希</strong>，它在节点增减时能更好地保持数据分布的均衡性，减少数据迁移量。</p><ul><li><strong>稳定性</strong>: 分片键一旦确定，通常不应改变。如果分片键的值会频繁更新，会带来数据迁移和维护的巨大挑战。</li></ul><p>对于那些<strong>不含分片键的查询</strong>，需要特别关注。这类查询通常会触发<strong>全表扫描</strong>（或全分片扫描），性能极低。在设计业务功能时，应尽量引导业务方在查询条件中包含分片键。如果无法避免，则需要考虑其他方案，例如：</p><p><strong>数据冗余：</strong> 将少量高频查询但无分片键的数据冗余到所有分片或单独的热点库中。</p><p><strong>ES/Solr等搜索引擎：</strong> 对于复杂查询、模糊查询或多维度查询，可以考虑将部分数据同步到Elasticsearch或Solr等搜索引擎中，利用其强大的查询能力，将查询压力从关系型数据库中剥离。</p><p><strong>数仓或OLAP系统：</strong> 对于报表、统计等分析类查询，应将其导入到数仓或OLAP系统中进行处理，避免直接冲击在线事务数据库。</p><ul><li><strong>查询命中率</strong>: 绝大部分查询应该能够<strong>通过分片键直接路由到唯一的分片</strong>，避免跨分片查询，从而提高效率。</li><li><strong>数据类型</strong>: 通常选择整数类型（如 <code>bigint</code>）作为分片键，因为它们计算和比较效率高。</li></ul><h3 id="分片策略"><strong>分片策略</strong></h3><p>​<strong>水平分片 (Horizontal Sharding/Row-based Sharding)</strong>: 将表中行数据分散到不同的物理表或数据库中。这是最常见的模式，也是您文件中的 <code>_0</code>, <code>_1</code> 后缀所体现的。</p><p><strong>好处</strong>: 扩展性强，可以根据数据增长动态增加分片。查询通常只涉及少量数据，性能高。</p><p><strong>常见实现</strong>:</p><ul><li><strong>哈希取模</strong>: <code>sharding_key % N</code>（N为分片总数），<strong>数据分布最均匀</strong>，但扩容时需要数据迁移（弹性伸缩性差）。</li><li><strong>范围分片</strong>: 根据分片键的值范围划分，例如用户ID 1-100万在一个分片，100万-200万在另一个。优点是扩容方便（直接增加新范围分片），缺点是容易出现热点。</li><li><strong>一致性哈希</strong>: 一种更高级的哈希算法，在增加或减少分片时，只需要迁移少量数据，弹性伸缩性更好。</li><li><strong>时间分片</strong>: 例如按年或月创建新表，用于日志、流水等时间序列数据。</li></ul><p>对于用户数据，哈希取模通常是首选，因为它能带来更好的均匀性。而对于按时间产生的日志或流水数据，时间分片则更为合适。<strong>一致性哈希：</strong> 这是一种更高级且更灵活的策略，值得深入研究和应用，尤其是在需要频繁扩容或缩容的场景。它能有效降低数据迁移的成本。</p><p><strong>垂直分片 (Vertical Sharding/Column-based Sharding)</strong>:</p><p>​<strong>按业务功能分库</strong>: 将不同业务模块的数据（例如用户服务、订单服务、商品服务）分别存储在独立的数据库中。这通常是微服务架构中的常见实践。</p><ul><li><strong>好处</strong>: 职责分离，团队独立开发维护，数据库之间互不影响，方便根据业务特点进行优化。</li><li><strong>例子</strong>: <code>damai_base_data</code>, <code>damai_customize</code>, <code>damai_order_0/1</code>, <code>damai_pay_0/1</code>, <code>damai_program_0/1</code>, <code>damai_user_0/1</code> 等数据库的划分，明显是按业务领域（基础数据、定制、订单、支付、节目、用户）进行的垂直分库。</li></ul><p>​<strong>按字段分表</strong>: 将一张表中不同业务含义或访问频率差异大的列拆分到不同的表中，以减少单表宽度，提高查询效率。<strong>解决大宽表问题</strong>上非常有效。过多的垂直分表可能会增加数据管理的复杂性。</p><ul><li><strong>好处</strong>: 减少I/O开销，热点数据和非热点数据分离存储，提高查询效率。</li></ul><p>在决定按字段分表时，应<strong>仔细分析字段的访问频率、更新频率以及是否包含大文本或二进制数据</strong>。通常将不常用的大字段、或者单独查询频率高的字段拆分出去。</p><h3 id="数据路由"><strong>数据路由</strong></h3><p>分片后，应用程序如何知道数据存在哪个分片上？这需要一个路由层。</p><ul><li><strong>应用层路由</strong>: 应用程序代码根据分片键和<strong>分片算法</strong>直接计算出目标分片，然后连接到对应的数据库。实现简单，但应用逻辑与分片规则耦合。</li><li><strong>中间件路由</strong>: 使用专门的数据库中间件（如MyCAT, ShardingSphere, Vitess）作为代理层，应用程序连接中间件，中间件负责解析SQL、计算分片、路由请求、聚合结果。这是最推荐的方式，实现了分片逻辑与应用解耦，提供了更丰富的功能（如分布式事务、读写分离）。</li></ul><p><strong>ShardingSphere</strong>作为一套成熟的开源分布式数据库解决方案，提供了丰富的特性，包括数据分片、分布式事务、数据加密、影子库压测等，且支持多种部署模式，是目前非常受欢迎的选择。</p><p><strong>MyCAT</strong>更偏向于一个数据库代理层，配置相对简单。</p><p><strong>Vitess</strong>源自YouTube，更侧重于自动化运维和大规模部署，适合超大规模的场景。</p><h3 id="全局唯一ID生成">全局唯一ID生成</h3><p>在分库分表后，数据库的自增ID不能再使用，因为它们只能保证单库内的唯一性。需要引入全局唯一ID生成策略。</p><ul><li><strong>UUID/GUID</strong>: 优点是全局唯一，生成简单；缺点是无序，作为主键索引性能差，存储空间大。</li></ul><p>虽然生成简单且全局唯一，但作为主键<strong>索引性能差</strong>是其致命缺点，因为其无序性导致B+树索引频繁分裂，影响写入性能和查询效率。应尽量避免作为主键。</p><ul><li><strong>基于时间戳+机器ID+序列号</strong>: 如Snowflake算法，生成趋势递增的ID，有助于索引性能。</li></ul><p>这是目前<strong>最推荐</strong>的方案。它生成的ID<strong>趋势递增</strong>，有利于数据库索引性能。同时，通过机器ID和序列号保证了全局唯一性。引入<strong>时钟回拨问题</strong>的应对策略。Snowflake算法依赖于系统时钟，如果系统时钟发生回拨，可能会生成重复ID或阻塞。需要有机制检测并处理这种情况（例如，等待时钟恢复或暂停ID生成服务）。</p><ul><li><strong>独立ID生成服务</strong>: 单独部署一个服务来生成和分配ID。</li></ul><p>部署一个独立的ID生成服务，可以提供更强的可控性和定制性，但增加了系统复杂度和维护成本。在没有特殊需求的情况下，Snowflake算法通常足以满足需求。</p><h3 id="分布式事务">分布式事务</h3><p>当一个业务操作涉及多个分片的数据修改时，需要保证这些操作的原子性（要么都成功，要么都失败）。</p><ul><li><strong>2PC (Two-Phase Commit)</strong>: 传统的关系型数据库分布式事务协议，但性能差，有阻塞风险。</li></ul><p>理论上能保证强一致性，但由于其同步阻塞、性能低、易死锁等缺点，<strong>在线业务中极少使用</strong>，尤其是在高并发场景下。</p><ul><li><strong>TCC (Try-Confirm-Cancel)</strong>: 业务层面的分布式事务解决方案，需要侵入业务代码，但性能较好。</li></ul><p>是一种业务侵入性较强的柔性事务方案，需要业务开发人员在每个参与者服务中实现Try、Confirm、Cancel三个操作。 TCC适用于<strong>对实时性要求较高，且业务逻辑相对独立</strong>的场景。它的优点是性能比2PC好，但<strong>开发成本和维护成本较高</strong>，需要仔细设计补偿逻辑。</p><ul><li><strong>消息最终一致性</strong>: 通过消息队列（MQ）实现异步补偿，保证最终一致性，适用于对实时性要求不高的场景。</li></ul><p>通过可靠消息队列（如Kafka, RocketMQ）实现，将<strong>业务操作拆分为多个本地事务</strong>，通过消息通知其他服务进行后续操作。即使某个操作失败，也可以通过重试或补偿机制最终达到一致。</p><p>最终一致性，可能存在短暂的数据不一致窗口期；需要引入消息队列，增加系统复杂度。</p><p>在设计消息最终一致性方案时，需要考虑<strong>消息的幂等性消费</strong>、<strong>消息的可靠投递</strong>（本地消息表/事务消息）、<strong>死信队列</strong>和<strong>补偿机制</strong>。</p><h3 id="跨分片查询与Join">跨分片查询与Join</h3><p>分片的主要目的是避免跨分片操作。如果业务逻辑不可避免地需要跨分片Join或聚合查询，会非常复杂和低效。</p><ul><li><strong>尽量避免</strong>: 优化业务逻辑，将需要Join的数据放在同一个分片上（如关联表也使用相同的分片键）。</li><li><strong>应用层Join</strong>: 从各个分片查询数据，然后在应用层进行内存Join。</li><li><strong>数据冗余</strong>: 少量关键数据在不同分片上进行冗余存储，以避免跨分片Join。</li><li><strong>数据同步/ETL</strong>: 将需要Join的数据通过ETL同步到数仓或专门的分析数据库中进行分析。</li></ul><p><strong>尽量避免：</strong> 优化业务逻辑，使关联数据位于同一分片，这是最好的策略。</p><p><strong>应用层Join：</strong> 适用于<strong>结果集较小</strong>的场景。如果涉及大量数据的跨分片Join，在应用层进行会消耗大量内存和CPU，导致性能瓶颈。</p><p><strong>数据冗余：</strong> 对于<strong>读多写少、数据量不大且更新频率不高</strong>的关键关联数据，冗余是一种有效的优化手段。但需要考虑<strong>数据一致性</strong>问题，需要有机制（如消息队列异步同步）来保证冗余数据的一致性。</p><p><strong>数据同步/ETL到数仓：</strong> 这是处理复杂跨分片查询和分析查询的<strong>标准方案</strong>。将事务性数据和分析性数据分离，可以避免分析查询对在线业务的影响，提高系统整体性能。</p><p>搭建一套完善的<strong>数据同步链路</strong>（例如基于Binlog的CDC工具，如Canal），将数据实时或准实时地同步到数仓（如Hive, Flink, StarRocks, ClickHouse等），并在数仓中进行复杂的Join和聚合分析。</p><h3 id="数据迁移和扩容">数据迁移和扩容</h3><p>当业务增长，分片容量不足时，需要进行扩容，这涉及数据迁移。这是一个复杂且风险高的操作，通常需要专门的工具和详细的预案。</p><p><strong>预案先行：</strong> 必须制定详细的<strong>数据迁移预案</strong>，包括迁移策略、回滚方案、风险评估、影响范围、时间窗口等。</p><p><strong>灰度发布/双写：</strong> 在数据迁移过程中，可以采用<strong>双写</strong>（新旧库同时写入）和<strong>灰度发布</strong>的方式，逐步将流量切换到新分片，以降低风险。</p><p><strong>自动化工具：</strong> 尽量使用或开发<strong>自动化迁移工具</strong>，减少人工操作，提高效率和准确性。</p><p><strong>监控与告警：</strong> 在迁移过程中，必须有完善的<strong>监控和告警机制</strong>，实时关注数据一致性、服务可用性和性能指标。</p><p><strong>充分测试：</strong> 在生产环境迁移前，必须在<strong>类生产环境</strong>进行充分的<strong>全链路压测和功能测试</strong>，确保迁移方案的可靠性。</p><h3 id="问题">问题</h3><p>用户服务分库分表与读扩散问题：</p><p>用户服务中用户邮箱、用户手机号多种方式登录，并且要避免读扩散，这是一个非常典型的应用场景。读扩散（Read Amplification）指的是<strong>为了获取一条数据，不得不查询多个甚至所有分片，从而导致数据库压力倍增和查询效率低下。</strong></p><p>通过集中式映射服务，将多维度登录凭证映射到统一的分片键</p><p>为了避免读扩散，我们不会在用户数据分片中直接通过邮箱或手机号进行查询，而是会增加一个<strong>独立的用户身份映射层</strong>。</p><p>独立的身份认证服务/库 ：</p><p>该服务专门负责用户身份的认证和登录凭证（邮箱、手机号）到核心用户ID (<code>user_id</code>) 的映射。</p><p><code>d_user_main</code> (主用户表，在用户数据分片中)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在 damai_user_0, damai_user_1 等分片中</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `d_user_0` (</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户ID，作为主分片键&#x27;</span>,</span><br><span class="line">  <span class="comment">-- 其他用户属性，如昵称、头像、注册时间等</span></span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`user_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;用户主表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>此表是用户核心数据表，以 <code>user_id</code> 作为分片键</p><p>d_ticket_user_X</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在 damai_user_0 分片中</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `d_ticket_user_0` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键id&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>, <span class="comment">-- 关联到 d_user_0 的 user_id，确保购票人信息和用户主信息在同一分片</span></span><br><span class="line">  `rel_name` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户真实名字&#x27;</span>,</span><br><span class="line">  `id_type` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;证件类型&#x27;</span>,</span><br><span class="line">  `id_number` <span class="type">varchar</span>(<span class="number">512</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;证件号码&#x27;</span>,</span><br><span class="line">  <span class="comment">-- ... 其他字段</span></span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;购票人表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>独立的映射数据库/表</p><p>为了解决通过手机号/邮箱查找 <code>user_id</code> 的问题，我们需要额外的映射表。这些表通常存储在一个独立的、不分片的数据库中，或者在一个专用的、读写性能极高的存储系统（如Redis、Memcached）中，或者通过特定的哈希策略进行独立分片。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在一个独立的 Identity Database 或集中式数据库中</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_email_mapping` (</span><br><span class="line">  `email_hash` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱的哈希值&#x27;</span>, <span class="comment">-- 用于存储邮箱哈希，避免直接存储明文邮箱</span></span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> COMMENT <span class="string">&#x27;用户邮箱&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;对应的用户ID&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`email`),</span><br><span class="line">  KEY `idx_email_hash` (`email_hash`) <span class="comment">-- 可选，如果查询以哈希为主</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;邮箱-用户ID映射表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_mobile_mapping` (</span><br><span class="line">  `mobile_hash` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;手机号的哈希值&#x27;</span>, <span class="comment">-- 存储手机号哈希</span></span><br><span class="line">  `mobile` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> COMMENT <span class="string">&#x27;用户手机号&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;对应的用户ID&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`mobile`),</span><br><span class="line">  KEY `idx_mobile_hash` (`mobile_hash`) <span class="comment">-- 可选</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;手机号-用户ID映射表&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>用户登录</strong>:</p><ol><li>用户输入手机号/邮箱和密码。</li><li>身份认证服务接收请求。</li><li>身份认证服务<strong>首先查询 <code>user_mobile_mapping</code> 或 <code>user_email_mapping</code> 表</strong>（在独立的身份数据库中），通过手机号/邮箱快速查找对应的 <code>user_id</code>。这是一个单点查询，不会有读扩散。</li><li>获取 <code>user_id</code> 后，验证密码（密码哈希可以存储在身份数据库中，或与 <code>user_id</code> 关联存储在用户数据分片中的一个小表中）。</li><li>认证成功，生成登录凭证（如Token）。</li></ol><p><strong>业务数据访问</strong>:</p><ol><li>用户携带登录凭证访问其他业务服务（如订单服务、商品服务）。</li><li>业务服务从凭证中解析出 <code>user_id</code>。</li><li>根据 <code>user_id</code> 和预设的分片算法（例如 <code>user_id % N</code>），计算出该用户的数据存储在哪一个用户数据分片上。</li><li>所有后续针对该用户的业务数据查询（如查询订单、查询购票人信息等），都将直接路由到该特定的用户数据分片，<strong>无需查询其他分片</strong>。</li></ol>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/java/">java</category>
      
      <category domain="https://blog.tokenlen.top/categories/java/%E9%A1%B9%E7%9B%AE/">项目</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/java/">java</category>
      
      
      <comments>https://blog.tokenlen.top/2025/06/27/workmenu/damai1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Nginx</title>
      <link>https://blog.tokenlen.top/2025/06/24/new-stack/nginx/</link>
      <guid>https://blog.tokenlen.top/2025/06/24/new-stack/nginx/</guid>
      <pubDate>Mon, 23 Jun 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1&gt;介绍&lt;/h1&gt;
&lt;p&gt;Nginx是一款轻量级的Web服务器、反向代理服务器，由于它的内存占用少，启动极快，高并发能力强，在互联网项目中广泛应用。采用事件驱动的异步非阻塞处理方式框架，这让其具有极好的 IO</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1>介绍</h1><p>Nginx是一款轻量级的Web服务器、反向代理服务器，由于它的内存占用少，启动极快，高并发能力强，在互联网项目中广泛应用。采用事件驱动的异步非阻塞处理方式框架，这让其具有极好的 IO 性能，时常用于服务端的<strong>反向代理</strong>和<strong>负载均衡</strong>。</p><p><img src="https://pic1.zhimg.com/v2-e1826bab1d07df8e97d61aa809b94a10_1440w.jpg" alt=""></p><p>上图基本上说明了当下流行的技术架构，其中Nginx有点入口网关的味道。</p><p>正向代理：</p><p><img src="https://picx.zhimg.com/v2-c8ac111c267ae0745f984e326ef0c47f_1440w.jpg" alt=""></p><p>反向代理：</p><p><img src="https://pic2.zhimg.com/v2-4787a512240b238ebf928cd0651e1d99_1440w.jpg" alt=""></p><p>由于防火墙的原因，我们并不能直接访问谷歌，那么我们可以借助VPN来实现，这就是一个简单的正向代理的例子。这里你能够发现，<strong>正向代理“代理”的是客户</strong>端，而且客户端是知道目标的，而目标是不知道客户端是通过VPN访问的。</p><p>当我们在外网访问百度的时候，其实会进行一个转发，<strong>代理到内网去，这就是所谓的反向代理</strong>，<strong>即反向代理“代理”的是服务器端</strong>，而且这一个过程对于客户端而言是透明的。</p><ol><li>保障应用服务器的安全（增加一层代理，可以屏蔽危险攻击，更方便的控制权限）</li><li>实现负载均衡（稍等~下面会讲）</li><li>实现跨域（号称是最简单的跨域方式）</li></ol><h2 id="Nginx的Master-Worker模式">Nginx的Master-Worker模式</h2><p>启动Nginx后，其实就是在80端口启动了Socket服务进行监听，如图所示，Nginx涉及Master进程和Worker进程。</p><p>Master进程的作用是？</p><p><strong>读取并验证配置文件nginx.conf；管理worker进程；</strong></p><p>Worker进程的作用是？</p><p><strong>每一个Worker进程都维护一个线程（避免线程切换），处理连接和请求；注意Worker进程的个数由配置文件决定，一般和CPU个数相关（有利于进程切换），配置几个就有几个Worker进程。</strong></p><h2 id="配置">配置</h2><p>启动 Nginx：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx` 或 `sudo brew services start nginx</span><br></pre></td></tr></table></figure><p>停止 Nginx：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s stop` 或 `sudo brew services stop nginx</span><br></pre></td></tr></table></figure><p>热重启 Nginx：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>强制停止 Nginx：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pkill -9 nginx</span><br></pre></td></tr></table></figure><p><code>/usr/local/etc/nginx/nginx.conf</code> （nginx配置文件路径）</p><p><code>/usr/local/var/www</code> （nginx服务器默认的根目录）</p><p><code>/usr/local/Cellar/nginx/1.17.9</code> （nginx的安装路径）</p><p><code>/usr/local/var/log/nginx/error.log</code> (nginx默认的日志路径)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 首尾配置暂时忽略</span><br><span class="line">server &#123;  </span><br><span class="line">        # 当nginx接到请求后，会匹配其配置中的service模块</span><br><span class="line">        # 匹配方法就是将请求携带的host和port去跟配置中的server_name和listen相匹配</span><br><span class="line">        listen       8080;        </span><br><span class="line">        server_name  localhost; # 定义当前虚拟主机（站点）匹配请求的主机名</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html; # Nginx默认值</span><br><span class="line">            # 设定Nginx服务器返回的文档名</span><br><span class="line">            index  index.html index.htm; # 先找根目录下的index.html，如果没有再找index.htm</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 首尾配置暂时忽略</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>server{ } 其实是包含在 http{ } 内部的。每一个 server{ } 是一个虚拟主机（站点）。</p><p>上面代码块的意思是：当一个请求叫做<code>localhost:8080</code>请求nginx服务器时，该请求就会被匹配进该代码块的 server{ } 中执行。</p><p>当然 nginx 的配置非常多，用的时候可以根据文档进行配置。</p><h2 id="应用">应用</h2><p>动静分离：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/17/171867d175eae45f~tplv-t2oaga2asx-zoom-in-crop-mark:1512:0:0:0.awebp" alt=""></p><p>Nginx 服务器将接收到的请求分为<strong>动态请求</strong>和<strong>静态请求</strong>。</p><p>静态请求直接从 nginx 服务器所设定的根目录路径去取对应的资源，动态请求转发给真实的后台（前面所说的应用服务器，如图中的Tomcat）去处理。</p><p>这样做不仅能给应用服务器减轻压力，将后台api接口服务化，还能将前后端代码分开并行开发和部署。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;  </span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8080</span>;        </span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html; <span class="comment"># Nginx默认值</span></span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 静态化配置，所有静态请求都转发给 nginx 处理，存放目录为 my-project</span></span><br><span class="line">        <span class="section">location</span> <span class="regexp">~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|js|css)$</span> &#123;</span><br><span class="line">            <span class="attribute">root</span> /usr/local/var/www/my-project; <span class="comment"># 静态请求所代理到的根目录</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 动态请求匹配到path为&#x27;node&#x27;的就转发到8002端口处理</span></span><br><span class="line">        <span class="section">location</span> /node/ &#123;  </span><br><span class="line">            <span class="attribute">proxy_pass</span> http://localhost:8002; <span class="comment"># 充当服务代理</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="反向代理">反向代理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">        listen       8080;        </span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html; # Nginx默认值</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        proxy_pass http://localhost:8000; # 反向代理配置，请求会被转发到8000端口</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>反向代理的表现很简单。那上面的代码块来说，其实就是向nginx请求<code>localhost:8080</code>跟请求 <code>http://localhost:8000</code> 是一样的效果。（跟代购的原理一样）</p><p>这是一个反向代理最简单的模型，只是为了说明反向代理的配置。但是现实中反向代理多数是用在负载均衡中。</p><p>nginx 就是充当图中的 proxy。左边的3个 client 在请求时向 nginx 获取内容，是感受不到3台 server 存在的。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/16/17183720f7a66978~tplv-t2oaga2asx-zoom-in-crop-mark:1512:0:0:0.awebp" alt=""></p><p>反向代理应用十分广泛，CDN 服务就是反向代理经典的应用场景之一。除此之外，反向代理也是实现负载均衡的基础，很多大公司的架构都应用到了反向代理。</p><h2 id="负载均衡">负载均衡</h2><p>随着业务的不断增长和用户的不断增多，一台服务已经满足不了系统要求了。这个时候就出现了服务器 集群。</p><p>在服务器集群中，Nginx 可以将接收到的客户端请求“均匀地”（严格讲并不一定均匀，可以通过设置权重）分配到这个集群中所有的服务器上。这个就叫做<strong>负载均衡</strong>。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/17/171862efada16376~tplv-t2oaga2asx-zoom-in-crop-mark:1512:0:0:0.awebp" alt=""></p><p>Nginx还带有<strong>健康检查</strong>（服务器心跳检查）功能，会定期轮询向集群里的所有服务器发送健康检查请求，来检查集群中是否有服务器处于异常状态。</p><p>一旦发现某台服务器异常，那么在这以后代理进来的客户端请求都不会被发送到该服务器上（直健康检查发现该服务器已恢复正常），从而保证客户端访问的稳定性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 负载均衡：设置domain</span><br><span class="line">upstream domain &#123;</span><br><span class="line">    server localhost:8000;</span><br><span class="line">    server localhost:8001;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;  </span><br><span class="line">        listen       8080;        </span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            # root   html; # Nginx默认值</span><br><span class="line">            # index  index.html index.htm;</span><br><span class="line">            </span><br><span class="line">            proxy_pass http://domain; # 负载均衡配置，请求会被平均分配到8000和8001端口</span><br><span class="line">            proxy_set_header Host $host:$server_port;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>8000和8001是我本地用 Node.js 起的两个服务，负载均衡成功后可以看到访问 <code>localhost:8080</code> 有时会访问到8000端口的页面，有时会访问到8001端口的页面。</p><p>受集群单台服务器内存等资源的限制，负载均衡集群的服务器也不能无限增多。但因其良好的容错机制，负载均衡成为了实现<strong>高可用架构</strong>中必不可少的一环。</p><p>代理其实就是一个中介，A和B本来可以直连，中间插入一个C，C就是中介。刚开始的时候，代理多数是帮助内网client访问外网server用的（比如HTTP代理），从内到外 . 后来出现了反向代理，&quot;反向&quot;这个词在这儿的意思其实是指方向相反，即代理将来自外网client的请求forward到内网server，从外到内</p><h1>面试</h1><h2 id="1-Nginx-实现负载均衡有哪几种方式？">1.Nginx 实现负载均衡有哪几种方式？</h2><p><strong>轮询（Round Robin）</strong>：默认策略，顺序转发请求；</p><p><strong>加权轮询（Weighted Round Robin）</strong>：给服务器设置权重，权重大就多分配请求；</p><p><strong>IP Hash</strong>：根据客户端 IP 做哈希，把同一个 IP 的请求固定分配给同一台服务器；</p><p><strong>最少连接数（Least Connections）</strong>：优先转发给当前连接数最少的服务器（需要开启 <code>least_conn</code> 模块）；</p><p><strong>健康检查</strong>（可选）：检查服务器是否存活，不可用的服务器不会被请求到。</p><h2 id="2-你项目中用的是什么负载均衡策略？为什么选这个？">2.你项目中用的是什么负载均衡策略？为什么选这个？</h2><p>我使用的是默认的轮询（round-robin）策略，因为我们集群内的服务节点配置基本一致，响应时间也相差不大，这样的简单策略就足够满足负载均衡需求。如果后期出现性能差异，再考虑使用加权轮询或 IP Hash 策略来优化。</p><h2 id="3-负载均衡后-session-如何保持？（Sticky-Session）">3.负载均衡后 session 如何保持？（Sticky Session）</h2><p>默认情况下，用户的请求会轮流打到不同的服务器，这样可能会导致 session 丢失。解决方案有：</p><ul><li><strong>使用 IP Hash 策略</strong>：让同一 IP 的请求打到同一台服务器；</li><li><strong>使用 cookie 记录和识别客户端，前端转发到固定节点</strong>；</li><li><strong>服务端使用 session 共享机制</strong>，如 Redis 分布式 session；</li><li><strong>客户端使用 token（如 JWT），实现无状态认证</strong>；</li></ul><h2 id="4-Nginx-如何判断服务器挂了？">4.Nginx 如何判断服务器挂了？</h2><p>Nginx 的 <strong>openresty</strong> 或第三方模块（如 <code>nginx_upstream_check_module</code>）可以启用<strong>主动健康检查机制</strong>，通过定期向后端发送请求，判断其状态。</p><p>如果是默认配置，Nginx 并<strong>不会主动健康检查</strong>，只有当某个请求失败时，才会暂时标记服务器为不可用（被动方式）。</p><h2 id="5-upstream-模块中配置多个服务，如果其中一个挂了怎么办？">5.upstream 模块中配置多个服务，如果其中一个挂了怎么办？</h2><p>如果使用了<strong>健康检查模块</strong>，Nginx 会主动检测并自动将该节点剔除；如果没开启，用户请求到挂掉的服务会失败一部分。</p><p>可以手动配置 <code>max_fails</code> 和 <code>fail_timeout</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    server localhost:8000 max_fails=3 fail_timeout=30s;</span><br><span class="line">    server localhost:8001;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示在 30 秒内失败超过 3 次就会暂时踢掉该节点。</p>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/">技术栈</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/Nginx/">Nginx</category>
      
      
      <comments>https://blog.tokenlen.top/2025/06/24/new-stack/nginx/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MQ面试题目hot</title>
      <link>https://blog.tokenlen.top/2025/06/24/new-stack/MQ1/</link>
      <guid>https://blog.tokenlen.top/2025/06/24/new-stack/MQ1/</guid>
      <pubDate>Mon, 23 Jun 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1&gt;消息队列&lt;/h1&gt;
&lt;h2</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1>消息队列</h1><h2 id="1-什么是消息队列？">1.什么是消息队列？</h2><p>你可以把消息队列理解为一个<strong>使用队列来通信</strong>的组件。它的本质，就是个<strong>转发器</strong>，包含<strong>发消息、存消息、消费消息</strong>的过程。最简单的消息队列模型如下：</p><p><img src="https://cdn.xiaolincoding.com//picgo/image-20250407141749839.png" alt="img"></p><p>我们通常说的消息队列，简称<strong>MQ（Message Queue）</strong>，它其实就指<strong>消息中间件</strong>，当前业界比较流行的开源消息中间件包括：<code>RabbitMQ、RocketMQ、Kafka</code>。</p><h2 id="2-消息队列怎么选型？">2.消息队列怎么选型？</h2><p>Kafka、ActiveMQ、RabbitMQ、RocketMQ来进行不同维度对比。</p><table><thead><tr><th><strong>特性</strong></th><th><strong>ActiveMQ</strong></th><th><strong>RabbitMQ</strong></th><th><strong>RocketMQ</strong></th><th><strong>Kafka</strong></th></tr></thead><tbody><tr><td>单机吞吐量</td><td>万级</td><td>万级</td><td>10 万级</td><td>10 万级</td></tr><tr><td>时效性</td><td>毫秒级</td><td>微秒级</td><td>毫秒级</td><td>毫秒级</td></tr><tr><td>可用性</td><td>高（主从）</td><td>高（主从）</td><td>非常高（分布式）</td><td>非常高（分布式）</td></tr><tr><td>消息重复</td><td>至少一次</td><td>至少一次</td><td>至少一次 最多一次</td><td>至少一次最多一次</td></tr><tr><td>消息顺序性</td><td>有序</td><td>有序</td><td>有序</td><td>分区有序</td></tr><tr><td>支持主题数</td><td>千级</td><td>百万级</td><td>千级</td><td>百级，多了性能严重下滑</td></tr><tr><td>消息回溯</td><td>不支持</td><td>不支持</td><td>支持（按时间回溯）</td><td>支持（按offset回溯）</td></tr><tr><td>管理界面</td><td>普通</td><td>普通</td><td>完善</td><td>普通</td></tr></tbody></table><p>kafka:</p><ul><li><p>极高吞吐量和并发处理能力，适合海量数据流</p></li><li><p>消息无状态，不支持复杂路由（需应用层实现）</p></li><li><p>消息持久化和多副本机制保证数据不丢失</p></li><li><p>延迟性在高并发下表现不如 RabbitMQ</p></li><li><p>适用于流式数据处理，天生支持大数据生态</p></li><li><p>消费端需要自己管理 Offset，复杂度较高</p></li><li><p>强大的消费者组和分区机制，易于水平扩展</p></li><li><p>不支持 JMS 协议</p></li><li><p>提供了生产者幂等性、事务性（Exactly-Once）</p></li><li><p>维护和配置相对复杂</p></li></ul><p><strong>日志收集与聚合</strong>：作为日志数据生产者和消费者之间的桥梁，高效收集来自各种服务的海量日志数据，并传输到大数据分析平台（如 ELK Stack, Hadoop HDFS）。</p><p><strong>流式数据处理</strong>：与 Flink、Spark Streaming 等流处理框架结合，构建实时数据管道和实时计算平台，用于实时报表、风控、推荐等。</p><p><strong>用户行为追踪</strong>：追踪网站/APP 上的用户点击、浏览、搜索等行为数据，用于用户画像、精准营销和数据分析。</p><p>RabbitMq:</p><ul><li><p>支持 AMQP 协议，功能丰富，如四种交换器</p></li><li><p>吞吐量相较 Kafka 和 RocketMQ 较低</p></li><li><p>路由灵活，满足多种消息分发需求</p></li><li><p>持久化性能一般，对硬盘依赖较重</p></li><li><p>易于上手和管理，有友好的管理界面</p></li><li><p>遇到大量消息堆积时，性能会急剧下降</p></li><li><p>可靠的消息确认机制（ACK/NACK）</p></li><li><p>高可用集群部署相对复杂且对网络要求高</p></li><li><p>支持延迟队列、死信队列、优先级队列等高级特性</p></li><li><p>客户端库多语言支持不如 Kafka 广泛</p></li></ul><p><strong>复杂路由与消息分发</strong>：电商订单系统，订单支付成功后，需要同时通知库存系统、物流系统、积分系统、短信通知系统等多个模块，且可能根据订单类型进行不同路由。</p><p><strong>短任务异步处理</strong>：用户注册后发送激活邮件、生成缩略图、处理小文件等，将这些耗时短但不影响主流程的任务异步化。</p><p><strong>服务间解耦与消息驱动</strong>：微服务架构中，服务之间通过消息进行通信，实现松耦合和事件驱动架构。例如，商品价格更新事件通知给缓存服务、搜索服务和推荐服务。</p><p>RocketMQ:</p><ul><li><p>高吞吐量、低延迟，专为互联网电商场景优化</p></li><li><p>社区生态相比 Kafka 较小，国际化程度不够</p></li><li><p>丰富的功能特性，如顺序消息、分布式事务、回溯</p></li><li><p>部署和运维相对复杂</p></li><li><p>消息可靠性高，支持同步/异步刷盘</p></li><li><p>依赖 Java 生态，客户端语言支持相对局限</p></li><li><p>集群扩展性好，支持多 Master/Slave 模式</p></li><li><p>文档虽然有中文，但不如 RabbitMQ 和 Kafka 详尽</p></li><li><p>针对消息中间件的高级需求（如消息轨迹）支持好</p></li></ul><p><strong>电商交易系统</strong>：处理海量的交易消息，支持分布式事务（如订单创建与支付扣减的事务一致性），保证消息的可靠性和顺序性。</p><p><strong>金融支付系统</strong>：对消息的可靠性、事务一致性、顺序性要求极高，RocketMQ 在这些方面表现优异。</p><p><strong>双十一等高并发场景下的削峰填谷</strong>：在瞬时流量高峰到来时，将大量请求暂存到消息队列，然后后端服务根据自身能力匀速消费，确保系统稳定不崩溃。</p><p>ActiveMQ:</p><ul><li><p>完全支持 JMS 1.1 和 2.0 规范，易于集成</p></li><li><p>性能较差，吞吐量低，不适合高并发场景</p></li><li><p>支持多种传输协议（如 OpenWire, Stomp, MQTT）</p></li><li><p>消息积压时性能急剧下降，可能导致 OutOfMemory</p></li><li><p>易于上手，配置简单，开箱即用</p></li><li><p>长期运行稳定性有待提高</p></li><li><p>社区活跃度不如前三者，但功能稳定成熟</p></li><li><p>持久化方式多但都不突出，可靠性一般</p></li><li><p>提供了 Web 控制台</p></li><li><p>缺乏对大数据和流处理的天然支持</p></li></ul><p><strong>传统企业应用集成（JMS）</strong>：在基于 JMS 标准的老旧或传统企业内部系统之间进行集成，作为消息传递的桥梁。</p><p><strong>小型或中型项目的轻量级消息通信</strong>：对性能要求不高，但需要基本消息队列功能的独立应用，快速启动和部署。</p><p><strong>嵌入式消息队列</strong>：在某些 Java 应用程序中，可能需要将消息队列功能直接嵌入到应用程序内部，ActiveMQ 提供了这样的能力。</p><h2 id="3-消息队列使用场景有哪些？">3.消息队列使用场景有哪些？</h2><ul><li><strong>解耦</strong>：可以在多个系统之间进行解耦，将原本通过网络之间的调用的方式改为使用MQ进行消息的异步通讯，只要该操作不是需要同步的，就可以改为使用MQ进行不同系统之间的联系，这样项目之间不会存在耦合，系统之间不会产生太大的影响，就算一个系统挂了，也只是消息挤压在MQ里面没人进行消费而已，不会对其他的系统产生影响。</li><li><strong>异步</strong>：加入一个操作设计到好几个步骤，这些步骤之间不需要同步完成，比如客户去创建了一个订单，还要去客户轨迹系统添加一条轨迹、去库存系统更新库存、去客户系统修改客户的状态等等。这样如果这个系统都直接进行调用，那么将会产生大量的时间，这样对于客户是无法接收的；并且像添加客户轨迹这种操作是不需要去同步操作的，如果使用MQ将客户创建订单时，将后面的轨迹、库存、状态等信息的更新全都放到MQ里面然后去异步操作，这样就可加快系统的访问速度，提供更好的客户体验。</li><li><strong>削峰</strong>：一个系统访问流量有高峰时期，也有低峰时期，比如说，中午整点有一个抢购活动等等。比如系统平时流量并不高，一秒钟只有100多个并发请求，系统处理没有任何压力，一切风平浪静，到了某个抢购活动时间，系统并发访问了剧增，比如达到了每秒5000个并发请求，而我们的系统每秒只能处理2000个请求，那么由于流量太大，我们的系统、数据库可能就会崩溃。这时如果使用MQ进行流量削峰，将用户的大量消息直接放到MQ里面，然后我们的系统去按自己的最大消费能力去消费这些消息，就可以保证系统的稳定，只是可能要跟进业务逻辑，给用户返回特定页面或者稍后通过其他方式通知其结果</li></ul><h2 id="4-消息重复消费怎么解决？">4.消息重复消费怎么解决？</h2><p>生产端为了保证消息发送成功，可能会重复推送(直到收到成功ACK)，会产生重复消息。但是一个成熟的MQ Server框架一般会想办法解决，避免存储重复消息(比如：空间换时间，存储已处理过的message_id)，给生产端提供一个幂等性的发送消息接口。</p><p>但是消费端却无法根本解决这个问题，在高并发标准要求下，拉取消息+业务处理+提交消费位移需要做事务处理，另外消费端服务可能宕机，很可能会拉取到重复消息。</p><p>所以，只能业务端自己做控制，<strong>对于已经消费成功的消息，本地数据库表或Redis缓存业务标识，每次处理前先进行校验，保证幂等。</strong></p><h2 id="5-消息丢失怎么解决的？">5.消息丢失怎么解决的？</h2><p>使用一个消息队列，其实就分为三大块：<strong>生产者、中间件、消费者</strong>，所以要保证消息就是保证三个环节都不能丢失数据。</p><p><img src="https://cdn.xiaolincoding.com//picgo/1719381898719-af6c00bf-8760-4639-bd21-e6d422ef7779.webp" alt="img"></p><ul><li><strong>消息生产阶段</strong>：生产者会不会丢消息，取决于生产者对于异常情况的处理是否合理。从消息被生产出来，然后提交给 MQ 的过程中，<strong>只要能正常收到 （ MQ 中间件） 的 ack 确认响应，就表示发送成功</strong>，所以只要处理好返回值和异常，如果返回异常则进行消息重发，那么这个阶段是不会出现消息丢失的。</li><li><strong>消息存储阶段</strong>：Kafka 在使用时是部署一个集群，生产者在发布消息时，队列中间件通常会写「多个节点」，也就是有多个副本，这样一来，即便其中一个节点挂了，也能保证集群的数据不丢失。</li><li><strong>消息消费阶段</strong>：消费者<strong>接收消息+消息处理</strong>之后，才回复 ack 的话，那么消息阶段的消息不会丢失。不能收到消息就回 ack，否则可能消息处理中途挂掉了，消息就丢失了。</li></ul><h2 id="6-消息队列的可靠性、顺序性怎么保证？">6.消息队列的可靠性、顺序性怎么保证？</h2><p>消息<strong>可靠性</strong>可以通过下面这些方式来保证</p><ul><li><strong>消息持久化</strong>：确保<strong>消息队列能够持久化消息</strong>是非常关键的。在系统崩溃、重启或者网络故障等情况下，未处理的消息不应丢失。例如，像 RabbitMQ 可以通过配置将<strong>消息持久化到磁盘，通过将队列和消息都设置为持久化的方式</strong>（设置<code>durable = true</code>），这样在服务器重启后，消息依然可以被重新读取和处理。</li><li><strong>消息确认机制</strong>：消费者在成功处理消息后，应该向消息队列发送确认（acknowledgment）。<strong>消息队列只有收到确认后，才会将消息从队列中移除</strong>。如果没有收到确认，消息队列可能会在一定时间后重新发送消息给其他消费者或者再次发送给同一个消费者。以 Kafka 为例，消费者通过<code>commitSync</code>或者<code>commitAsync</code>方法来提交偏移量（offset），从而确认消息的消费。</li><li><strong>消息重试策略</strong>：当消费者处理消息失败时，需要有<strong>合理的重试策略</strong>。可以设置重试次数和重试间隔时间。例如，在第一次处理失败后，等待一段时间（如 5 秒）后进行第二次重试，如果重试多次（如 3 次）后仍然失败，可以将消息发送到死信队列，以便后续人工排查或者采取其他特殊处理。</li></ul><p>消息顺序性保证的方式如下：</p><ul><li><strong>有序消息处理场景识别</strong>：首先需要明确业务场景中哪些消息是<strong>需要保证顺序的</strong>。例如，在金融交易系统中，对于同用户的转账操作顺序是不能打乱的。对于需要顺序处理的消息，要确保消息队列和消费者能够按照特定的顺序进行处理。</li><li><strong>消息队列对顺序性的支持</strong>：部分消息队列本身提供了顺序性保证的功能。比如 Kafka 可以通过将消息划分到<strong>同一个分区</strong>（Partition）来保证消息在分区内是有序的，<strong>消费者按照分区顺序读取消息就可以保证消息顺序</strong>。但这也可能会限制消息的并行处理程度，需要在顺序性和吞吐量之间进行权衡。</li><li><strong>消费者顺序处理策略</strong>：消费者在处理顺序消息时，<strong>应该避免并发处理可能导致顺序打乱的情况</strong>。例如，可以通过<strong>单线程或者使用线程池并对顺序消息进行串行化处理</strong>等方式，确保消息按照正确的顺序被消费。</li></ul><h2 id="7-如何保证幂等写？">7.如何保证幂等写？</h2><p>幂等性是指 <strong>同一操作的多次执行对系统状态的影响与一次执行结果一致</strong>。例如，支付接口若因网络重试被多次调用，最终应确保仅扣款一次。实现幂等写的核心方案：</p><ul><li>唯一标识（幂等键）：客户端为每个请求生成全局唯一ID（如 UUID、业务主键），服务端校验该ID是否已处理，适用场景接口调用、消息消费等。</li><li>数据库事务 + 乐观锁：通过版本号或状态字段控制并发更新，确保多次更新等同于单次操作，适用场景数据库记录更新（如余额扣减、订单状态变更）。</li><li>数据库唯一约束：利用数据库唯一索引防止重复数据写入，适用场景数据插入场景（如订单创建）。</li><li>分布式锁：通过锁机制保证同一时刻仅有一个请求执行关键操作，适用场景高并发下的资源抢夺（如秒杀）。</li><li>消息去重：消息队列生产者为每条消息生成唯一的消息 ID，消费者在处理消息前，先检查该消息 ID 是否已经处理过，如果已经处理过则丢弃该消息。</li></ul><h2 id="8-如何处理消息队列的消息积压问题？">8.如何处理消息队列的消息积压问题？</h2><p>消息积压是因为生产者的生产速度，大于消费者的消费速度。遇到消息积压问题时，我们需要先排查，是不是有bug产生了。</p><p>如果不是bug，我们可以<strong>优化一下消费的逻辑</strong>，比如之前是一条一条消息消费处理的话，我们可以确认是不是可以优为<strong>批量处理消息</strong>。如果还是慢，我们可以考虑水平扩容，增加Topic的队列数，和消费组机器的数量，提升整体消费能力。</p><p>如果是bug导致几百万消息持续积压几小时。有如何处理呢？需要解决bug，<strong>临时紧急扩容</strong>，大概思路如下：</p><blockquote><ol><li>先修复consumer消费者的问题，以确保其恢复消费速度，然后将现有consumer 都停掉。</li><li>新建一个 topic，partition 是原来的 10 倍，临时建立好原先10倍的queue 数量。</li><li>然后写一个临时的分发数据的 consumer 程序，这个程序部署上去消费积压的数据，消费之后不做耗时的处理，直接均匀轮询写入临时建立好的 10 倍数量的 queue。</li><li>接着临时征用 10 倍的机器来部署 consumer，每一批 consumer 消费一个临时 queue 的数据。这种做法相当于是临时将 queue 资源和 consumer 资源扩大 10 倍，以正常的 10 倍速度来消费数据。</li><li>等快速消费完积压数据之后，得恢复原先部署的架构，重新用原先的 consumer 机器来消费消息。</li></ol></blockquote><h2 id="9-如何保证数据一致性，事务消息如何实现？">9.如何保证数据一致性，事务消息如何实现？</h2><p>一条普通的MQ消息，从产生到被消费，大概流程如下：</p><p><img src="https://cdn.xiaolincoding.com//picgo/image-20250407142107477.png" alt="image-20250407142107477"></p><ol><li>生产者产生消息，发送带MQ服务器</li><li>MQ收到消息后，将消息持久化到存储系统。</li><li>MQ服务器返回ACk到生产者。</li><li>MQ服务器把消息push给消费者</li><li>消费者消费完消息，响应ACK</li><li>MQ服务器收到ACK，认为消息消费成功，即在存储中删除消息。</li></ol><p>我们举个<strong>下订单</strong>的例子吧。订单系统创建完订单后，再发送消息给下游系统。如果订单创建成功，然后消息没有成功发送出去，下游系统就无法感知这个事情，出导致数据不一致。</p><p>如何保证数据一致性呢？可以使用<strong>事务消息</strong>。一起来看下事务消息是如何实现的吧。</p><p><img src="https://cdn.xiaolincoding.com//picgo/image-20250407142122992.png" alt="image-20250407142122992"></p><ol><li>生产者产生消息，发送一条<strong>半事务消息</strong>到MQ服务器</li><li>MQ收到消息后，将消息持久化到存储系统，这条消息的状态是<strong>待发送</strong>状态。</li><li>MQ服务器返回ACK确认到生产者，此时MQ不会触发消息推送事件</li><li>生产者执行本地事务</li><li>如果本地事务执行成功，即commit执行结果到MQ服务器；如果执行失败，发送rollback。</li><li>如果是正常的commit，MQ服务器更新消息状态为<strong>可发送</strong>；如果是rollback，即删除消息。</li><li>如果消息状态更新为可发送，则MQ服务器会push消息给消费者。消费者消费完就回ACK。</li><li>如果MQ服务器长时间没有收到生产者的commit或者rollback，它会反查生产者，然后根据查询到的结果执行最终状态。</li></ol><h2 id="10-消息队列是参考哪种设计模式？">10.消息队列是参考哪种设计模式？</h2><p>是参考了观察者模式和发布订阅模式，两种设计模式思路是一样的，举个生活例子：</p><ul><li>观察者模式：某公司给自己员工发月饼发粽子，是由公司的行政部门发送的，这件事不适合交给第三方，原因是“公司”和“员工”是一个整体</li><li>发布-订阅模式：某公司要给其他人发各种快递，因为“公司”和“其他人”是独立的，其唯一的桥梁是“快递”，所以这件事适合交给第三方快递公司解决</li></ul><p>上述过程中，如果公司自己去管理快递的配送，那公司就会变成一个快递公司，业务繁杂难以管理，影响公司自身的主营业务，因此使用何种模式需要考虑什么情况两者是需要耦合的</p><blockquote><p>观察者模式</p></blockquote><p>观察者模式实际上就是<strong>一个一对多的关系</strong>，在观察者模式中存在一个主题和多个观察者，主题也是被观察者，当我们主题发布消息时，会通知各个观察者，观察者将会收到最新消息，图解如下：<strong>每个观察者首先订阅主题，订阅成功后当主题发送消息时会循环整个观察者列表，逐一发送消息通知。</strong> <img src="https://cdn.xiaolincoding.com//picgo/1723798409094-5099fa2a-c72c-4c67-bab7-09bbca9e0834.webp" alt="img"></p><blockquote><p>发布订阅模式</p></blockquote><p>发布订阅模式和观察者模式的区别就是发布者和订阅者完全解耦，通过<strong>中间的发布订阅中心</strong>进行消息通知，发布者并不知道自己发布的消息会通知给谁，因此发布订阅模式有三个重要角色，发布者-&gt;发布订阅中心-&gt;订阅者。</p><p>图解如下：当发布者发布消息到发布订阅中心后，发布订阅中心会将消息通知给所有订阅该发布者的订阅者 <img src="https://cdn.xiaolincoding.com//picgo/1723798423949-97ae81c8-3536-40c6-bcc6-1509a3056a04.webp" alt="img"></p><h2 id="11-让你写一个消息队列，该如何进行架构设计？">11.让你写一个消息队列，该如何进行架构设计？</h2><ol><li>首先是消息队列的整体流程，producer发送消息给broker，broker存储好，broker再发送给consumer消费，consumer回复消费确认等。</li><li>producer发送消息给broker，broker发消息给consumer消费，那就需要两次RPC了，RPC如何设计呢？可以参考开源框架Dubbo，你可以说说服务发现、序列化协议等等</li><li>broker考虑如何持久化呢，是放文件系统还是数据库呢，会不会消息堆积呢，消息堆积如何处理呢。</li><li>消费关系如何保存呢？点对点还是广播方式呢？广播关系又是如何维护呢？zk还是config server</li><li>消息可靠性如何保证呢？如果消息重复了，如何幂等处理呢？</li><li>消息队列的高可用如何设计呢？可以参考Kafka的高可用保障机制。多副本 -&gt; leader &amp; follower -&gt; broker 挂了重新选举 leader 即可对外服务。</li><li>消息事务特性，与本地业务同个事务，本地消息落库;消息投递到服务端，本地才删除；定时任务扫描本地消息库，补偿发送。</li><li>MQ得伸缩性和可扩展性，如果消息积压或者资源不够时，如何支持快速扩容，提高吞吐？可以参照一下 Kafka 的设计理念，broker -&gt; topic -&gt; partition，每个 partition 放一个机器，就存一部分数据。如果现在资源不够了，简单啊，给 topic 增加 partition，然后做数据迁移，增加机器，不就可以存放更多数据，提供更高的吞吐量了。</li></ol><h1>RocketMQ</h1><h2 id="1-消息队列为什么选择RocketMQ的？">1.消息队列为什么选择RocketMQ的？</h2><p>项目用的是 RocketMQ 消息队列。选择RocketMQ的原因是：</p><ul><li><strong>开发语言优势</strong>。RocketMQ 使用 Java 语言开发，比起使用 Erlang 开发的 RabbitMQ 来说，有着更容易上手的阅读体验和受众。在遇到 RocketMQ 较为底层的问题时，大部分熟悉 Java 的同学都可以深入阅读其源码，分析、排查问题。</li><li><strong>社区氛围活跃</strong>。RocketMQ 是阿里巴巴开源且内部在大量使用的消息队列，说明 RocketMQ 是的确经得起残酷的生产环境考验的，并且能够针对线上环境复杂的需求场景提供相应的解决方案。</li><li><strong>特性丰富</strong>。根据 RocketMQ 官方文档的列举，其高级特性达到了 <code>12 种</code>，例如顺序消息、事务消息、消息过滤、定时消息等。顺序消息、事务消息、消息过滤、定时消息。RocketMQ 丰富的特性，能够为我们在复杂的业务场景下尽可能多地提供思路及解决方案。</li></ul><h2 id="2-RocketMQ和Kafka的区别是什么？如何做技术选型？">2.RocketMQ和Kafka的区别是什么？如何做技术选型？</h2><p>Kafka的优缺点：</p><ul><li>优点：首先，Kafka的最大优势就在于它的高吞吐量，在普通机器4CPU8G的配置下，一台机器可以抗住十几万的QPS，这一点还是相当优越的。Kafka支持集群部署，如果部分机器宕机不可用，则不影响Kafka的正常使用。</li><li>缺点：Kafka有可能会造成数据丢失，因为它在收到消息的时候，并不是直接写到物理磁盘的，而是先写入到磁盘缓冲区里面的。Kafka功能比较的单一 主要的就是支持收发消息，高级功能基本没有，就会造成适用场景受限。</li></ul><p>RocketMQ是阿里巴巴开源的消息中间件，优缺点</p><ul><li>优点：支持功能比较多，比如延迟队列、消息事务等等，吞吐量也高，单机吞吐量达到 10 万级，支持大规模集群部署，线性扩展方便，Java语言开发，满足了国内绝大部分公司技术栈</li><li>缺点：性能相比 kafka 是弱一点，因为 kafka 用到了 sendfile 的零拷贝技术，而 RocketMQ 主要是用 mmap+write 来实现零拷贝。</li></ul><p>该怎么选择呢？</p><ul><li>如果我们业务只是收发消息这种单一类型的需求，而且可以允许小部分数据丢失的可能性，但是又要求极高的吞吐量和高性能的话，就直接选Kafka就行了，就好比我们公司想要收集和传输用户行为日志以及其他相关日志的处理，就选用的Kafka中间件。</li><li>如果公司的需要通过 mq 来实现一些业务需求，比如延迟队列、消息事务等，公司技术栈主要是Java语言的话，就直接一步到位选择RocketMQ，这样会省很多事情。</li></ul><h2 id="3-RocketMQ延时消息的底层原理">3.RocketMQ延时消息的底层原理</h2><p>总体的原理示意图，如下所示：</p><p><img src="https://cdn.xiaolincoding.com//picgo/1720428795952-bba954e9-c9b6-45c5-aa05-8cc1d49c0e3c.png" alt="img"></p><p>broker 在接收到延时消息的时候，会将延时消息存入到<strong>延时Topic</strong>的队列中，然后ScheduleMessageService中，每个 queue 对应的定时任务会不停地被执行，检查 queue 中哪些消息已到设定时间，然后转发到消息的原始Topic，这些消息就会被各自的 producer 消费了。</p><p>也可以使用这个思路用redis的stream流来实现延时消息</p><h2 id="4-RocektMQ怎么处理分布式事务？">4.RocektMQ怎么处理分布式事务？</h2><p><strong>RocketMQ是一种最终一致性的分布式事务</strong>，就是说它保证的是消息最终一致性，而不是像2PC、3PC、TCC那样强一致分布式事务</p><p>假设 <strong>A</strong> 给 <strong>B</strong> 转 <strong>100块钱</strong>，同时它们不是同一个服务上，现在目标是就是 <strong>A</strong> 减100块钱，<strong>B</strong> 加100块钱。</p><p>实际情况可能有四种：</p><ul><li>1）就是A账户减100 （成功），B账户加100 （成功）</li><li>2）就是A账户减100（失败），B账户加100 （失败）</li><li>3）就是A账户减100（成功），B账户加100 （失败）</li><li>4）就是A账户减100 （失败），B账户加100 （成功）</li></ul><p>这里 <strong>第1和第2</strong> 种情况是能够保证事务的一致性的，但是 <strong>第3和第4</strong> 是无法保证事务的一致性的。</p><p>那我们来看下RocketMQ是如何来保证事务的一致性的。</p><p><img src="https://cdn.xiaolincoding.com//picgo/1714663418978-cb16a341-5eef-4f2a-ac2f-2331f5249c31.png" alt="img"></p><p>分布式事务的流程如上图：</p><ul><li>1、A服务先发送个Half Message（是指暂不能被Consumer消费的消息。Producer 已经把消息成功发送到了Broker 端，但此消息被标记为暂不能投递状态，处于该种状态下的消息称为半消息。需要 Producer对消息的二次确认后，Consumer才能去消费它）给Brock端，消息中携带 B服务 即将要+100元的信息。</li><li>2、当A服务知道Half Message发送成功后，那么开始第3步执行本地事务。</li><li>3、执行本地事务(会有三种情况1、执行成功。2、执行失败。3、网络等原因导致没有响应)</li><li>4.1)、如果本地事务成功，那么Product像Brock服务器发送Commit,这样B服务就可以消费该message。</li><li>4.2)、如果本地事务失败，那么Product像Brock服务器发送Rollback,那么就会直接删除上面这条半消息。</li><li>4.3)、如果因为网络等原因迟迟没有返回失败还是成功，那么会执行RocketMQ的回调接口，来进行事务的回查。</li></ul><p>从上面流程可以得知 只有A服务本地事务执行成功 ，B服务才能消费该message。</p><p><strong>那么</strong> <strong>A账户减100 （成功），B账户加100 （失败），这时候B服务失败怎么办？</strong></p><p>如果B最终执行失败，几乎可以断定就是代码有问题所以才引起的异常，因为消费端RocketMQ有重试机制，如果不是代码问题一般重试几次就能成功。</p><p>如果是代码的原因引起多次重试失败后，也没有关系，将该异常记录下来，由人工处理，人工兜底处理后，就可以让事务达到最终的一致性。</p><h2 id="5-RocketMQ消息顺序怎么保证？">5.RocketMQ消息顺序怎么保证？</h2><p>消息的有序性是指<strong>消息的消费顺序能够严格保存与消息的发送顺序一致</strong>。例如，一个订单产生了3条消息，分别是订单创建、订单付款和订单完成。在消息消费时，同一条订单要严格按照这个顺序进行消费，否则业务会发生混乱。同时，不同订单之间的消息又是可以并发消费的，比如可以先执行第三个订单的付款，再执行第二个订单的创建。</p><p>RocketMQ采用了<strong>局部顺序一致性的机制</strong>，<strong>实现了单个队列中的消息严格有序</strong>。也就是说，如果想要保证顺序消费，必须将一组消息发送到同一个队列中，然后再由消费者进行注意消费。</p><p>RocketMQ推荐的顺序消费解决方案是：安装业务划分不同的队列，然后将需要顺序消费的消息发往同一队列中即可，不同业务之间的消息仍采用并发消费。这种方式在满足顺序消费的同时提高了消息的处理速度，在一定程度上避免了消息堆积问题</p><p>RocketMQ 顺序消息的原理是：</p><ul><li>在 Producer（生产者） 把一批需要保证顺序的消息发送到同一个 MessageQueue</li><li>Consumer（消费者） 则<strong>通过加锁的机制来保证消息消费的顺序性</strong>，Broker 端通过对 MessageQueue 进行加锁，保证同一个 MessageQueue 只能被同一个 Consumer 进行消费。</li></ul><h2 id="6-RocketMQ怎么保证消息不被重复消费">6.RocketMQ怎么保证消息不被重复消费</h2><p>在业务逻辑中实现<strong>幂等性</strong>，确保即使消息被重复消费，也不会影响业务状态。例如，对于支付或转账类操作，可以<strong>使用唯一订单号或事务ID作为幂等性的标识符</strong>，确保同样的操作只会被执行一次。</p><p>消息投递时，<strong>网络中断</strong>或<strong>消费失败重试</strong>可能会导致 <strong>重复消费</strong></p><p>消息投递给消费者后，<strong>消费者处理异常</strong> 或返回失败，会被 RocketMQ <strong>重新投递</strong></p><ul><li>数据库表加“唯一约束 + 去重表”【最常用】</li><li>使用 Redis 实现幂等控制</li><li>利用 RocketMQ 提供的 <code>msg.getKeys()</code> 做幂等键</li></ul><h2 id="7-RocketMQ消息积压了，怎么办？">7.RocketMQ消息积压了，怎么办？</h2><p>导致消息积压突然增加，最粗粒度的原因，只有两种：要么是发送变快了，要么是消费变慢了。</p><p>要解决积压的问题，可以通过<strong>扩容消费端的实例数来提升总体的消费能力</strong>。</p><p>如果短时间内没有足够的服务器资源进行扩容，没办法的办法是，将<strong>系统降级</strong>，通过关闭一些不重要的业务，减少发送方发送的数据量，最低限度让系统还能正常运转，服务一些重要业务。</p><h2 id="8-什么是零拷贝">8.什么是零拷贝</h2><p>传统的数据传输流程中，用户数据通常会经过如下多次拷贝：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">硬盘 → 内核缓冲区 → 用户态 → Socket 缓冲区 → 网卡</span><br></pre></td></tr></table></figure><p>而“零拷贝”技术通过内核优化和 API 支持，能<strong>避免数据在用户态与内核态间的多次拷贝</strong>，从而提升性能。常用技术：</p><table><thead><tr><th>技术</th><th>说明</th></tr></thead><tbody><tr><td><code>mmap</code></td><td>将文件映射到内存地址空间，避免文件拷贝</td></tr><tr><td><code>sendfile</code></td><td>直接将文件从磁盘发送到 Socket，避免数据进入用户态</td></tr><tr><td><code>writev</code></td><td>批量写入多个内存区域，减少系统调用</td></tr><tr><td><code>DirectByteBuffer</code>（Java NIO）</td><td>Java 堆外内存，提高 I/O 性能</td></tr></tbody></table><p>RocketMQ使用零拷贝的场景：<br>RocketMQ 使用 <strong>顺序写入磁盘</strong> + <strong><code>MappedByteBuffer</code>（mmap）机制</strong></p><ul><li>CommitLog 文件通过 <code>mmap</code> 映射为<strong>内存地址空间</strong>，写消息时直接写入这段地址</li><li>消息写完之后由 <strong>刷盘线程 flush</strong> 到磁盘（异步或同步）</li></ul><p>➡️ 优点：避免了传统写文件的 <strong>内核缓冲区 → 用户缓冲区 → 文件系统缓存</strong> 的多次复制。</p><p>消息消费（拉取时）</p><p>RocketMQ 使用 <strong>零拷贝 + SendFile 技术</strong> 实现高效消息下发：</p><ul><li>消费者从 Broker 拉取消息时，Broker 会读取 CommitLog 中的内容</li><li>若消息在 OS PageCache 中，可直接使用 <code>FileChannel.transferTo</code>（即 sendfile）将消息直接写入 socket 输出流</li></ul><p>➡️ 相比传统读入用户空间再写出，<code>sendfile</code> 直接 <strong>在内核中完成数据搬运</strong>，性能极高。</p><p>ConsumeQueue 与 IndexFile</p><p>RocketMQ 的 ConsumeQueue（消费队列）和 IndexFile（索引文件）同样是基于 <strong>mmap 方式读写</strong>，提升顺序读性能，避免 GC 干扰。</p><ul><li>ConsumeQueue 中记录了消息的偏移量、大小和 tag hash</li><li>查询或消费时不需要实际读取 CommitLog 内容，而是通过偏移快速定位</li></ul><table><thead><tr><th>特性</th><th>优势</th></tr></thead><tbody><tr><td>mmap</td><td>减少内存复制、提高 I/O 吞吐</td></tr><tr><td>sendfile</td><td>内核空间直接完成数据搬运</td></tr><tr><td>writev（部分使用）</td><td>多个 buffer 一次写出</td></tr><tr><td>堆外内存使用（DirectByteBuffer）</td><td>降低 GC 压力，提升 I/O 性能</td></tr></tbody></table><h2 id="9-RocketMQ的Consumer两种消费模式">9.RocketMQ的Consumer两种消费模式</h2><p>推模式</p><p>实际上，RocketMQ 的推模式底层仍然是基于<strong>长轮询（Long Polling）的拉模式</strong>来实现的，只是由 RocketMQ SDK 内部管理了拉取消息、维护消费进度（Offset）等复杂逻辑，然后通过回调函数将消息“推”给用户应用。</p><p>消费者启动后，向 Broker 注册自己，并订阅感兴趣的 Topic。</p><p>RocketMQ SDK 内部会启动一个<strong>长轮询线程</strong>。它会定期（或在消息到达时）向 Broker 发送拉取消息的请求。</p><p>如果 Broker 有消息，就立即返回给消费者；如果没有，Broker 会保持连接一段时间（长轮询），直到有新消息到达或超时。</p><p>当 SDK 拉取到消息后，会将其存入<strong>本地的消费队列缓存</strong>。</p><p>然后，SDK 会根据配置的并发度，将缓存中的消息分发给用户注册的**消息监听器（MessageListener）**进行处理。</p><p>用户在消息监听器中完成业务逻辑后，返回消费结果（成功或失败）。</p><p>RocketMQ SDK 会根据消费结果自动提交消费进度（Offset）给 Broker，并处理消息重试、死信队列等。</p><p><strong>自动重试与死信</strong>：内置消息失败重试机制，以及将达到最大重试次数的消息发送到死信队列的功能。</p><p><strong>简单易用</strong>：用户只需关注业务逻辑，实现一个 <code>MessageListener</code> 接口即可，无需处理消息拉取、偏移量管理、流控等底层细节。</p><p><strong>实时性好</strong>：由于长轮询机制，消息到达后能被较快地消费。</p><p><strong>自动负载均衡</strong>：在消费者组模式下，RocketMQ SDK 会自动进行队列的负载均衡，将 Topic 的消息队列分配给组内不同的消费者实例，实现水平扩展。</p><p>拉模式</p><p>拉模式是一种<strong>更原始、更底层</strong>的消费模式。它将消息拉取的主动权完全交给用户。消费者需要<strong>主动</strong>向 Broker 发送请求拉取消息，并<strong>手动管理</strong>消息的消费进度（Offset）。</p><p>消费者启动后，需要自己获取 Topic 下所有消息队列（MessageQueue）的信息。</p><p>消费者选择一个或多个消息队列进行拉取。</p><p>消费者需要维护每个消息队列的<strong>当前消费偏移量 (Offset)</strong>。</p><p>消费者主动调用 <code>pull()</code> 方法向 Broker 发送拉取请求，指定要拉取的队列、当前偏移量和最大拉取数量。</p><p>Broker 返回拉取结果 <code>PullResult</code>，其中包含消息列表、下一个拉取偏移量等。</p><p>消费者处理完消息后，需要<strong>手动更新并提交</strong>新的消费偏移量。</p><p>消费者需要自己处理消息拉取的频率（轮询间隔）、批量处理、消息重试等逻辑。</p><p>RocketMQ 4.x 引入的 <code>DefaultLitePullConsumer</code> 简化了传统的 <code>DefaultMQPullConsumer</code> 的使用，使其在部分场景下更接近推模式的体验，但本质上仍是拉模式，需要用户主动 <code>poll</code>。</p><h2 id="10-RocketMQ的Consumer两种监听方式">10.RocketMQ的Consumer两种监听方式</h2><p>一般在push模式下会经常使用到监听。</p><p>并发消费是 RocketMQ 默认的也是最常用的消费模式。在这种模式下，消费者可以<strong>并发地处理来自同一个队列（MessageQueue）甚至同一个 Topic 的多条消息</strong>。RocketMQ 会为每个消息队列分配一个或多个消费线程，或者从线程池中获取线程来处理消息。</p><p>RocketMQ 消费者从 Broker 拉取到一批消息。</p><p>这些消息会被分发到消费者内部的<strong>多个线程</strong>中并行处理。</p><p>对于同一个消息队列，RocketMQ 可能会同时将多条消息提交给不同的线程进行消费。</p><p><strong>不保证严格顺序</strong>：对于同一个消息队列内的消息，无法保证其被消费的顺序与发送顺序一致。因为消息被分发到不同的线程并行处理，处理完成的顺序是不确定的。</p><p><strong>需要考虑并发问题</strong>：如果业务逻辑涉及到共享资源或状态，需要开发者自行处理并发安全问题（例如加锁、使用原子操作等）。</p><p>顺序消费模式保证了<strong>同一个消息队列（MessageQueue）中的消息，被消费者严格按照发送的顺序进行消费</strong>。这意味着在任何时刻，对于一个特定的消息队列，只会有一个线程在处理其中的消息。</p><p>RocketMQ 消费者从 Broker 拉取到一批消息。</p><p>对于每个消息队列，RocketMQ SDK 会确保<strong>只有一个消费线程</strong>来处理该队列中的消息。</p><p>如果当前消息队列中的某条消息正在被处理，或者处理失败需要重试，那么该队列的后续消息会被<strong>阻塞</strong>，直到当前消息处理完成并成功提交偏移量。</p><ul><li><p><strong>严格保证顺序性</strong>：确保了同一消息队列内的消息按照生产顺序被消费，这对于某些业务场景至关重要。</p></li><li><p><strong>简化并发处理</strong>：由于同一队列的消息是单线程处理，开发者无需过多考虑并发安全问题。</p></li><li><p><strong>吞吐量受限</strong>：由于是单线程处理一个消息队列，其消费速度受限于单个线程的处理能力，整体吞吐量会低于并发消费模式。</p></li><li><p><strong>可能出现消息堆积</strong>：如果某个消息处理失败并持续重试，或者处理时间过长，会导致该队列的后续消息被阻塞，造成消息堆积。</p></li><li><p><strong>死锁风险</strong>：如果消息处理逻辑中存在外部依赖的死锁，可能会导致整个队列的消费停滞。</p></li></ul><h2 id="11-如何顺序的发送消息">11.如何顺序的发送消息</h2><p>使用<strong>分区顺序（Partial Order）</strong>：这是最常用的方式。它保证同一个 <code>ShardingKey</code> (例如订单ID) 关联的所有消息在生产者端按照发送顺序发送到同一个消息队列，并在消费者端也按照这个顺序消费。不同 <code>ShardingKey</code> 的消息则可以并行处理，不保证顺序。这适用于大部分业务场景，例如一个订单的创建、支付、发货等一系列操作。</p><p>创建 <code>MessageQueueSelector</code></p><p>arg 就是你在发送消息时传入的业务ShardingKey，例如订单ID，使用 ShardingKey 的哈希值或者模运算来选择队列</p><p>需要使用 <code>DefaultMQProducer</code> 的 <code>send(Message msg, MessageQueueSelector selector, Object arg)</code> 方法。</p><ul><li><code>msg</code>: 你要发送的消息对象。</li><li><code>selector</code>: 你前面实现的 <code>MessageQueueSelector</code> 实例。</li><li><code>arg</code>: 你的业务 <code>ShardingKey</code>，例如订单ID。RocketMQ 会把这个 <code>arg</code> 传递给 <code>MessageQueueSelector</code> 的 <code>select</code> 方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderProducer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DefaultMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(<span class="string">&quot;OrderProducerGroup&quot;</span>);</span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>); <span class="comment">// 替换为你的NameServer地址</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;OrderTopic&quot;</span>;</span><br><span class="line">        <span class="comment">// 假设有三个订单</span></span><br><span class="line">        <span class="type">int</span>[] orderIds = &#123;<span class="number">101</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">103</span>, <span class="number">102</span>, <span class="number">101</span>&#125;; <span class="comment">// 订单ID，模拟相同订单ID的消息</span></span><br><span class="line"></span><br><span class="line">        <span class="type">OrderMessageQueueSelector</span> <span class="variable">selector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderMessageQueueSelector</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; orderIds.length; i++) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">orderId</span> <span class="operator">=</span> orderIds[i];</span><br><span class="line">            <span class="type">String</span> <span class="variable">msgBody</span> <span class="operator">=</span> <span class="string">&quot;Hello RocketMQ Order Message &quot;</span> + i + <span class="string">&quot; for OrderID &quot;</span> + orderId;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(topic, <span class="string">&quot;TagA&quot;</span>, <span class="string">&quot;KEY_&quot;</span> + orderId + <span class="string">&quot;_&quot;</span> + i, msgBody.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送顺序消息，关键在于传入selector和orderId</span></span><br><span class="line">            <span class="type">SendResult</span> <span class="variable">sendResult</span> <span class="operator">=</span> producer.send(msg, selector, orderId);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s%n&quot;</span>, sendResult);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>单一生产者，单一线程</strong>：RocketMQ 服务端判定消息顺序性是参照单一生产者、单一线程并发下消息发送的时序。如果多个生产者或多个线程并发发送消息，RocketMQ 只能以到达服务端的时序作为顺序依据，这可能与你业务侧的发送顺序不一致。因此，对于需要严格顺序的场景，最好保证<strong>同一个 <code>ShardingKey</code> 的消息由同一个生产者实例的同一个线程发送。</strong></p><p><strong>确保 <code>ShardingKey</code> 的稳定性</strong>：用于决定消息路由的 <code>ShardingKey</code>（例如订单ID）在整个业务流程中必须保持一致，这样相关的所有消息才能被路由到同一个队列。</p><p>消费者端需要确保同一个队列的消息被顺序消费。RocketMQ 的顺序消息消费模式是<strong>推模式（Push Consumer）</strong>，并且默认就提供了顺序消费的保证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DefaultMQPushConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQPushConsumer</span>(<span class="string">&quot;OrderConsumerGroup&quot;</span>);</span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>); <span class="comment">// 替换为你的NameServer地址</span></span><br><span class="line">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class="line">        consumer.subscribe(<span class="string">&quot;OrderTopic&quot;</span>, <span class="string">&quot;*&quot;</span>); <span class="comment">// 订阅Topic</span></span><br><span class="line"></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerOrderly</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ConsumeOrderlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs, ConsumeOrderlyContext context)</span> &#123;</span><br><span class="line">                <span class="comment">// 设置为单线程消费，确保顺序</span></span><br><span class="line">                context.setAutoCommit(<span class="literal">true</span>); <span class="comment">// 默认开启自动提交，如果业务逻辑复杂，可以手动提交</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (MessageExt msg : msgs) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> msg.getKeys().split(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>]; <span class="comment">// 从Key中提取订单ID</span></span><br><span class="line">                        System.out.printf(<span class="string">&quot;Consume Thread: %s, QueueId: %d, OrderId: %s, MsgId: %s, Body: %s %n&quot;</span>,</span><br><span class="line">                                Thread.currentThread().getName(),</span><br><span class="line">                                msg.getQueueId(),</span><br><span class="line">                                orderId,</span><br><span class="line">                                msg.getMsgId(),</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">String</span>(msg.getBody()));</span><br><span class="line">                        <span class="comment">// 模拟业务处理耗时</span></span><br><span class="line">                        TimeUnit.MILLISECONDS.sleep(<span class="number">50</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                        <span class="comment">// 如果处理失败，返回SUSPEND_CURRENT_QUEUE_A_MOMENT，RocketMQ 会稍后重试</span></span><br><span class="line">                        <span class="keyword">return</span> ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ConsumeOrderlyStatus.SUCCESS; <span class="comment">// 成功消费</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        consumer.start();</span><br><span class="line">        System.out.printf(<span class="string">&quot;Consumer Started.%n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>MessageListenerOrderly</code></strong>：这是 RocketMQ 专门为顺序消息设计的监听器。它确保了同一个消息队列中的消息会被一个线程串行地拉取和处理，从而保证了消费顺序。</p><p><strong><code>ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT</code></strong>：如果在消息处理过程中发生异常，返回此状态可以让 RocketMQ 暂停当前队列的消费，并在稍后重试。这可以避免因为一条消息处理失败而导致后续消息无法按序处理的问题。</p><p><strong>幂等性</strong>：即使 RocketMQ 保证了顺序，但由于网络等原因，消息仍可能被重复投递。因此，你的消费者逻辑必须具备<strong>幂等性</strong>，即多次处理同一条消息也能得到一致的结果。</p><p>Topic 配置</p><p>通过 <code>mqadmin</code> 工具更新 Topic：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/mqadmin updateTopic -c DefaultCluster -t YourOrderTopic -n 127.0.0.1:9876 --order true</span><br></pre></td></tr></table></figure><ul><li><code>-c</code>: 集群名称</li><li><code>-t</code>: Topic 名称</li><li><code>-n</code>: NameServer 地址</li><li><code>--order true</code>: 标记此 Topic 为有序 Topic</li></ul><h2 id="12-RocketMQ的批量消息">12.RocketMQ的批量消息</h2><p>使用批量消息的时候，要注意</p><ul><li><strong>同一批次消息的 Topic 必须相同</strong>：这是强制要求，一个批量消息中不能包含不同 Topic 的消息。</li><li><strong>批量消息的总大小不能超过 1MB</strong>：这是 RocketMQ 默认的硬性限制。如果你的批量消息总大小超过 1MB，你需要自行将它们拆分成多个批次进行发送。</li><li><strong>不支持延迟消息和事务消息</strong>：批量消息目前不支持发送延迟消息或事务消息。如果需要这些功能，请使用普通消息或其他消息类型。</li><li><strong>相同的 <code>waitStoreMsgOK</code></strong>：同一批次消息的 <code>waitStoreMsgOK</code>（表示是否等待消息存储成功再返回）属性必须相同。通常情况下，这都是默认值，所以一般不需要特别关注。</li><li><strong>不保证严格顺序</strong>：批量消息通常不保证消息在 Broker 上的存储顺序和消费顺序。如果你需要顺序消息，应该使用上一问中提到的<strong>顺序消息</strong>特性，并确保同一 <code>ShardingKey</code> 的消息发送到同一个队列。即使批量发送，只要你通过 <code>MessageQueueSelector</code> 确保了同一 <code>ShardingKey</code> 的消息发送到同一队列，它们在该队列内仍能保持相对顺序。</li></ul><p><strong>生成者：</strong></p><p>发送批量消息非常简单，只需要将一个 <code>Message</code> 列表作为参数传递给 <code>DefaultMQProducer</code> 的 <code>send</code> 方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleBatchProducer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DefaultMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(<span class="string">&quot;BatchProducerGroup&quot;</span>);</span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>); <span class="comment">// 替换为你的NameServer地址</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;BatchTestTopic&quot;</span>;</span><br><span class="line">        List&lt;Message&gt; messages = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 注意：同一批次的消息 Topic 必须相同</span></span><br><span class="line">            <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(topic,</span><br><span class="line">                    <span class="string">&quot;TagA&quot;</span>, <span class="comment">// Tag</span></span><br><span class="line">                    <span class="string">&quot;OrderID&quot;</span> + i, <span class="comment">// Key</span></span><br><span class="line">                    (<span class="string">&quot;Hello RocketMQ Batch Message &quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class="comment">// 消息体</span></span><br><span class="line">            );</span><br><span class="line">            messages.add(msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 发送批量消息</span></span><br><span class="line">            <span class="type">SendResult</span> <span class="variable">sendResult</span> <span class="operator">=</span> producer.send(messages);</span><br><span class="line">            System.out.printf(<span class="string">&quot;Batch messages sent successfully: %s%n&quot;</span>, sendResult);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;Failed to send batch messages.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>消息大小：</strong></p><p>如果你的批量消息总大小可能超过 1MB，你需要手动对消息列表进行分割。</p><p>实际中可以直接使用 RocketMQ 客户端库中提供的 <code>ListSplitter</code>。</p><p><strong>消费者端处理：</strong></p><p>消费者端通常不需要为批量消息做特殊处理。无论是单条消息还是批量消息，消费者都会以相同的 <code>MessageExt</code> 列表形式接收到。你只需要像处理普通消息一样遍历 <code>msgs</code> 列表即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatchConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DefaultMQPushConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQPushConsumer</span>(<span class="string">&quot;BatchConsumerGroup&quot;</span>);</span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>); <span class="comment">// 替换为你的NameServer地址</span></span><br><span class="line">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class="line">        consumer.subscribe(<span class="string">&quot;BatchTestTopic&quot;</span>, <span class="string">&quot;*&quot;</span>); <span class="comment">// 订阅批量消息的Topic</span></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;BatchSplitTestTopic&quot;</span>, <span class="string">&quot;*&quot;</span>); <span class="comment">// 订阅分割后的批量消息的Topic</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置一次拉取消息的最大数量，默认为1。如果设置为大于1，可以实现批量消费。</span></span><br><span class="line">        <span class="comment">// RocketMQ 客户端会尽可能一次性拉取多条消息，并以List&lt;MessageExt&gt;形式传递给监听器。</span></span><br><span class="line">        consumer.setConsumeMessageBatchMaxSize(<span class="number">32</span>); <span class="comment">// 每次最多消费32条消息</span></span><br><span class="line"></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerConcurrently</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;Consumer Thread: %s, Received %d messages.%n&quot;</span>,</span><br><span class="line">                        Thread.currentThread().getName(), msgs.size());</span><br><span class="line">                <span class="keyword">for</span> (MessageExt msg : msgs) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.printf(<span class="string">&quot;  MsgId: %s, Key: %s, Body: %s %n&quot;</span>,</span><br><span class="line">                                msg.getMsgId(), msg.getKeys(), <span class="keyword">new</span> <span class="title class_">String</span>(msg.getBody()));</span><br><span class="line">                        <span class="comment">// 模拟业务处理</span></span><br><span class="line">                        <span class="comment">// TimeUnit.MILLISECONDS.sleep(10);</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                        <span class="comment">// 如果单个消息处理失败，考虑是重试整个批次还是记录失败消息后继续处理其他消息</span></span><br><span class="line">                        <span class="comment">// 返回RECONSUME_LATER会重试整个批次</span></span><br><span class="line">                        <span class="keyword">return</span> ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.SUCCESS; <span class="comment">// 成功消费整个批次</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        consumer.start();</span><br><span class="line">        System.out.printf(<span class="string">&quot;Batch Consumer Started.%n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>setConsumeMessageBatchMaxSize(int consumeMessageBatchMaxSize)</code></strong>: 这是消费者端实现批量消费的关键配置。通过设置这个参数，你可以控制消费者每次从 Broker 拉取消息并提交给业务逻辑处理的<strong>最大消息数量</strong>。默认值是 <code>1</code>，即每次只消费一条消息。增大此值可以提高消费的并行度。</p><p><strong>消费幂等性</strong>：即使是批量消费，也需要考虑消息的重复投递问题。确保你的业务逻辑在处理批量消息时具备幂等性。</p><p><strong>异常处理</strong>：如果在批量处理中某条消息处理失败，你可能需要决定是重试整个批次，还是只重试失败的消息并继续处理批次中的其他消息。返回 <code>RECONSUME_LATER</code> 会导致整个批次的消息都被重试。如果业务允许，可以记录失败消息，并返回 <code>SUCCESS</code> 以避免阻塞整个队列。</p><h2 id="13-RocketMQ的延时消息">13.RocketMQ的延时消息</h2><p>允许你指定消息在发送到 Broker 后，不会立即被消费者消费，而是会延迟一段时间后才投递给消费者。这个功能在许多业务场景中非常有用，比如：</p><ul><li><strong>订单超时未支付自动取消</strong>：用户下单后，如果30分钟内未支付，就发送一个延时消息，30分钟后这个消息被消费，触发订单取消操作。</li><li><strong>新用户注册奖励延迟发放</strong>：用户注册成功后，延时1天发放新人奖励，确保用户体验。</li><li><strong>任务定时执行</strong>：例如，每天凌晨统计前一天的销售数据，可以发送一个延时24小时的消息来触发。</li><li><strong>消息在指定时间后发送</strong>：例如，促销短信在某个特定时间点发送。</li></ul><p>RocketMQ 不支持任意精度的时间延时，它预设了18个固定的延时等级（delayLevel）。这些等级是硬编码在 Broker 端的配置中的。</p><p>默认的延时等级字符串如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</span><br></pre></td></tr></table></figure><p>原理：</p><p><strong>发送到内部 Topic</strong>：当生产者发送一个延时消息时，Broker 不会将它直接存储到目标 Topic 的队列中。相反，它会将消息存储到一个内部的、名为 <code>SCHEDULE_TOPIC_XXXX</code> 的 Topic 中。</p><p><strong>根据 <code>delayTimeLevel</code> 分发</strong>：这个内部 Topic 实际上有多个队列，每个队列对应一个延时等级。消息会被路由到对应延时等级的队列中。</p><p><strong>定时扫描</strong>：Broker 端有一个后台线程（或者多个线程）会定时扫描这些内部延时队列。</p><p><strong>达到延时时间后重新投递</strong>：当扫描发现某个消息的投递时间已到，它就会被重新存储到<strong>原始目标 Topic 的队列中</strong>，此时消息才对消费者可见，可以被正常消费。</p><p>生产者：</p><p>生产者发送延时消息非常简单，只需要在发送消息前设置 <code>delayTimeLevel</code> 属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayProducer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DefaultMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(<span class="string">&quot;DelayProducerGroup&quot;</span>);</span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>); <span class="comment">// 替换为你的NameServer地址</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;DelayTopic&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(topic,</span><br><span class="line">                    <span class="string">&quot;TagA&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;OrderID&quot;</span> + i,</span><br><span class="line">                    (<span class="string">&quot;Hello RocketMQ Delay Message &quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET)</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置延时等级。</span></span><br><span class="line">            <span class="comment">// 例如，这里设置延时等级为 3，对应延时 10 秒。</span></span><br><span class="line">            <span class="comment">// 延时等级列表：1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</span></span><br><span class="line">            msg.setDelayTimeLevel(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">SendResult</span> <span class="variable">sendResult</span> <span class="operator">=</span> producer.send(msg);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s, Message sent to delay level %d%n&quot;</span>, sendResult, msg.getDelayTimeLevel());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能直接设置延迟等级，需要具体的时间的话，</p><p><strong>选择最近的延时等级</strong>：例如，对于 15 秒的延时，你可以选择 10 秒等级。在消费端，获取消息的生产时间戳和当前时间戳，如果还没到 15 秒，可以进行二次延时投递（重新发送一个延时消息，直到满足条件）。</p><p><strong>业务层二次确认/轮询</strong>：发送一个较短延时的消息，在消费者端收到消息后，检查业务条件是否满足。如果不满足，可以重新投递或者通过其他方式（如数据库轮询）进行补偿。</p><p><strong>自定义延时消息存储</strong>：如果对精度有极高要求，并且预设等级无法满足，可能需要考虑自己实现一个延时消息存储方案（例如，基于 Redis ZSET 或数据库）。</p><p>消费者端是正常处理的</p><p>额外：</p><p><strong>消息积压与延时准确性</strong>：如果 Broker 消息积压严重，或者 Broker 负载过高，延时消息的投递时间可能会有一定偏差。RocketMQ 会尽力在指定延时时间后投递，但不能保证毫秒级的精确。</p><p><strong>修改延时等级配置</strong>：如果你需要自定义延时等级，可以在 Broker 的 <code>broker.conf</code> 配置文件中修改 <code>messageDelayLevel</code> 参数，并重启 Broker。但请注意，修改后会影响所有使用延时消息的 Topic。 <code>messageDelayLevel=1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h 3h 4h</code></p><p><strong>不适用于定时任务调度</strong>：尽管延时消息可以实现类似定时任务的功能，但对于复杂的、需要精确控制和管理（如 Quartz）的定时任务，不推荐完全依赖延时消息。延时消息更适合于与业务流相关的“延迟执行”场景。</p><h2 id="14-RocketMQ的过滤消息">14.RocketMQ的过滤消息</h2><p>RocketMQ 提供了两种主要的过滤消息方式：</p><ol><li><strong>Tag 过滤（Broker 端过滤）</strong>：这是最常用也是推荐的方式。消息生产者在发送消息时为其设置一个或多个 <strong>Tag（标签）</strong>。消费者在订阅 Topic 时，可以指定只消费某个或某些 Tag 的消息。这种过滤是在 Broker 端完成的，即 Broker 只会将符合消费者订阅 Tag 的消息推送给消费者，大大减少了网络传输量。</li><li><strong>SQL 92 过滤（Broker 端过滤）</strong>：这是一种更高级的过滤方式，允许消费者使用 SQL 92 标准的表达式来过滤消息。消息生产者在发送消息时可以设置<strong>用户属性（User Property）</strong>。消费者可以编写类似 SQL WHERE 子句的表达式，根据这些属性的值进行过滤。这种过滤也是在 Broker 端完成的。</li></ol><p>Tag:</p><p>生产者在发送消息时，通过 <code>setTags()</code> 方法给消息设置标签。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagFilterProducer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DefaultMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(<span class="string">&quot;TagFilterProducerGroup&quot;</span>);</span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>); <span class="comment">// 替换为你的NameServer地址</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;TagFilterTopic&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送 Tag 为 &quot;Order&quot; 的消息</span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(topic, <span class="string">&quot;Order&quot;</span>, <span class="string">&quot;OrderID001&quot;</span>,</span><br><span class="line">                <span class="string">&quot;This is an order creation message.&quot;</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line">        <span class="type">SendResult</span> <span class="variable">sendResult1</span> <span class="operator">=</span> producer.send(msg1);</span><br><span class="line">        System.out.printf(<span class="string">&quot;Sent Tag: Order, %s%n&quot;</span>, sendResult1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送 Tag 为 &quot;Payment&quot; 的消息</span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(topic, <span class="string">&quot;Payment&quot;</span>, <span class="string">&quot;PaymentID001&quot;</span>,</span><br><span class="line">                <span class="string">&quot;This is a payment success message.&quot;</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line">        <span class="type">SendResult</span> <span class="variable">sendResult2</span> <span class="operator">=</span> producer.send(msg2);</span><br><span class="line">        System.out.printf(<span class="string">&quot;Sent Tag: Payment, %s%n&quot;</span>, sendResult2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送 Tag 为 &quot;Refund&quot; 的消息</span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(topic, <span class="string">&quot;Refund&quot;</span>, <span class="string">&quot;RefundID001&quot;</span>,</span><br><span class="line">                <span class="string">&quot;This is a refund request message.&quot;</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line">        <span class="type">SendResult</span> <span class="variable">sendResult3</span> <span class="operator">=</span> producer.send(msg3);</span><br><span class="line">        System.out.printf(<span class="string">&quot;Sent Tag: Refund, %s%n&quot;</span>, sendResult3);</span><br><span class="line"></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者在订阅 Topic 时，可以在 <code>subscribe()</code> 方法中指定 Tag。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagFilterConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DefaultMQPushConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQPushConsumer</span>(<span class="string">&quot;TagFilterConsumerGroup&quot;</span>);</span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>); <span class="comment">// 替换为你的NameServer地址</span></span><br><span class="line">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 订阅 Tag 为 &quot;Order&quot; 的消息</span></span><br><span class="line">        <span class="comment">// 如果想订阅多个 Tag，可以使用 &quot;TagA || TagB || TagC&quot;</span></span><br><span class="line">        <span class="comment">// 如果想订阅所有 Tag，使用 &quot;*&quot;</span></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;TagFilterTopic&quot;</span>, <span class="string">&quot;Order&quot;</span>);</span><br><span class="line"></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerConcurrently</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (MessageExt msg : msgs) &#123;</span><br><span class="line">                    System.out.printf(<span class="string">&quot;Consume Thread: %s, Topic: %s, Tag: %s, MsgId: %s, Body: %s %n&quot;</span>,</span><br><span class="line">                            Thread.currentThread().getName(),</span><br><span class="line">                            msg.getTopic(),</span><br><span class="line">                            msg.getTags(),</span><br><span class="line">                            msg.getMsgId(),</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">String</span>(msg.getBody()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        consumer.start();</span><br><span class="line">        System.out.printf(<span class="string">&quot;Tag Filter Consumer Started.%n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SQL 92 过滤</strong></p><p>在 Broker 的配置文件 <code>broker.conf</code> 中，需要将 <code>enablePropertyFilter</code> 参数设置为 <code>true</code>：</p><p>支持92过滤开启</p><p>生产者在发送消息时，通过 <code>putUserProperty()</code> 方法给消息设置自定义属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlFilterProducer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DefaultMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(<span class="string">&quot;SqlFilterProducerGroup&quot;</span>);</span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>); <span class="comment">// 替换为你的NameServer地址</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;SqlFilterTopic&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(topic, <span class="string">&quot;TagA&quot;</span>, <span class="string">&quot;KEY&quot;</span> + i,</span><br><span class="line">                    (<span class="string">&quot;Hello RocketMQ Sql Filter Message &quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置用户属性</span></span><br><span class="line">            msg.putUserProperty(<span class="string">&quot;a&quot;</span>, String.valueOf(i)); <span class="comment">// 整数字符串</span></span><br><span class="line">            msg.putUserProperty(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;abc&quot;</span> + i);       <span class="comment">// 字符串</span></span><br><span class="line">            msg.putUserProperty(<span class="string">&quot;c&quot;</span>, String.valueOf(i % <span class="number">2</span> == <span class="number">0</span>)); <span class="comment">// 布尔值</span></span><br><span class="line"></span><br><span class="line">            <span class="type">SendResult</span> <span class="variable">sendResult</span> <span class="operator">=</span> producer.send(msg);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s, Properties: &#123;a=%s, b=%s, c=%s&#125;%n&quot;</span>, sendResult, msg.getProperty(<span class="string">&quot;a&quot;</span>), msg.getProperty(<span class="string">&quot;b&quot;</span>), msg.getProperty(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者端订阅使用 SQL 92 表达式过滤消息</p><p>消费者在订阅 Topic 时，使用 <code>MessageSelector.bySql()</code> 方法传入 SQL 92 表达式。</p><p><strong>支持的 SQL 92 语法：</strong></p><ul><li><strong>数值比较</strong>: <code>&gt;</code>,<code>&lt;</code>,<code>&gt;=</code>,<code>&lt;=</code>,<code>BETWEEN</code>,<code>=</code></li><li><strong>字符比较</strong>: <code>=</code>, <code>&lt;&gt;</code>, <code>IN</code> (支持 <code>NOT IN</code> 但需要 Broker 版本支持)</li><li><strong>逻辑运算</strong>: <code>AND</code>, <code>OR</code>, <code>NOT</code></li><li><strong><code>IS NULL</code> 或者 <code>IS NOT NULL</code></strong>: 检查属性是否存在</li><li><strong>字符串常量</strong>: <code>'abc'</code>, <code>'123'</code></li><li><strong>数值常量</strong>: <code>123</code>, <code>3.14159</code></li><li><strong>布尔常量</strong>: <code>TRUE</code>, <code>FALSE</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.MessageSelector;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlFilterConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DefaultMQPushConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQPushConsumer</span>(<span class="string">&quot;SqlFilterConsumerGroup&quot;</span>);</span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>); <span class="comment">// 替换为你的NameServer地址</span></span><br><span class="line">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 SQL 92 表达式过滤消息</span></span><br><span class="line">        <span class="comment">// 例如：a &gt; 5 AND (b = &#x27;abc7&#x27; OR c IS TRUE)</span></span><br><span class="line">        <span class="comment">// 注意：属性值会作为字符串处理，进行数值比较时会自动转型</span></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;SqlFilterTopic&quot;</span>, MessageSelector.bySql(<span class="string">&quot;a between 3 and 6 and c = true&quot;</span>));</span><br><span class="line"></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerConcurrently</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (MessageExt msg : msgs) &#123;</span><br><span class="line">                    System.out.printf(<span class="string">&quot;Consume Thread: %s, MsgId: %s, Body: %s, Properties: &#123;a=%s, b=%s, c=%s&#125;%n&quot;</span>,</span><br><span class="line">                            Thread.currentThread().getName(),</span><br><span class="line">                            msg.getMsgId(),</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">String</span>(msg.getBody()),</span><br><span class="line">                            msg.getProperty(<span class="string">&quot;a&quot;</span>),</span><br><span class="line">                            msg.getProperty(<span class="string">&quot;b&quot;</span>),</span><br><span class="line">                            msg.getProperty(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        consumer.start();</span><br><span class="line">        System.out.printf(<span class="string">&quot;SQL Filter Consumer Started.%n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>单场景（按类型区分）</strong>：<strong>优先使用 Tag 过滤</strong>。它性能更高，配置简单，能满足绝大部分按消息类型过滤的需求。</li><li><strong>复杂场景（按属性值过滤）</strong>：当 Tag 无法满足你的过滤需求，需要根据消息的多个属性值进行复杂的逻辑判断时，可以考虑使用 <strong>SQL 92 过滤</strong>。但需要注意：<ul><li><strong>Broker 端支持</strong>：确保你的 RocketMQ Broker 版本支持 SQL 92 过滤，并且已经开启了 <code>enablePropertyFilter</code>。</li><li><strong>性能考量</strong>：SQL 92 过滤虽然灵活，但其解析和执行会比 Tag 过滤消耗更多的 Broker 资源。在对性能要求极高的场景下，应谨慎使用或进行压测。</li></ul></li></ul><h2 id="15-RocketMQ的事务消息，事务消息的机制了解吗？讲一讲回查机制？">15.RocketMQ的事务消息，事务消息的机制了解吗？讲一讲回查机制？</h2><p>RocketMQ 的事务消息实现了一个**两阶段提交（Two-Phase Commit）**的简化版本，但它巧妙地规避了传统 XA 事务的性能开销和复杂性，通过引入“半事务消息”和“消息回查”机制来实现最终一致性。</p><p>流程：</p><p><strong>发送半事务消息（Half Message）</strong></p><ul><li>生产者向 RocketMQ Broker 发送一条消息，这条消息被标记为“<strong>半事务消息</strong>”。</li><li><strong>Broker 收到半事务消息后，将其持久化，但并不会立即将它投递给消费者</strong>。它会返回一个 <code>ACK</code> 给生产者，表示消息已收到。此时，消费者是看不到这条消息的。</li></ul><p><strong>执行本地事务</strong></p><ul><li>生产者收到 Broker 的 <code>ACK</code> 后，开始执行自己的<strong>本地事务</strong>（例如，更新数据库、调用其他内部服务等）。</li><li><strong>这一步是事务消息的核心</strong>：你的业务逻辑会在这里完成，决定事务的最终状态。</li></ul><p><strong>提交或回滚半事务消息</strong></p><ul><li>根据本地事务的执行结果，生产者向 Broker 发送<strong>二次确认（Second Confirmation）</strong>：<ul><li>如果本地事务执行<strong>成功</strong>，生产者发送 <code>Commit</code> 命令。Broker 收到 <code>Commit</code> 后，会将之前存储的半事务消息标记为“可投递”，并将其真正投递给消费者。</li><li>如果本地事务执行<strong>失败</strong>（或需要回滚），生产者发送 <code>Rollback</code> 命令。Broker 收到 <code>Rollback</code> 后，会<strong>删除或丢弃</strong>之前存储的半事务消息，消费者永远不会收到这条消息。</li></ul></li></ul><p><strong>消息回查（Transaction Message Check）</strong></p><ul><li>这是 RocketMQ 事务消息的“杀手锏”，用于处理网络异常、生产者宕机等极端情况。</li><li>如果在步骤3中，生产者发送的二次确认（<code>Commit</code> 或 <code>Rollback</code>）因为网络问题丢失，或者生产者在执行本地事务后宕机，导致 Broker <strong>长时间没有收到二次确认</strong>，那么 Broker 会主动向生产者发起<strong>消息回查请求</strong>。</li><li>Broker 会询问生产者：<code>嘿，这条半事务消息的本地事务状态到底是什么？是成功了还是失败了？</code></li><li>生产者需要实现一个<strong>事务回查监听器 (<code>TransactionListener</code>)</strong>，当收到回查请求时，它会<strong>查询本地事务的最终状态</strong>（例如，查询数据库中相关订单的状态），并根据查询结果再次向 Broker 返回 <code>Commit</code> 或 <code>Rollback</code>。</li><li>Broker 收到回查结果后，再次执行步骤3的逻辑（标记为可投递或删除）。</li></ul><p>消息回查流程：</p><ol><li><strong>Broker 监控半事务消息</strong>：Broker 内部有一个定时任务，会不断扫描那些长时间（可配置，例如默认1分钟）处于“半事务”状态的消息。</li><li><strong>发起回查</strong>：当发现有“超时”的半事务消息时，Broker 会向**原始生产者组（Producer Group）**中的任意一个存活的生产者实例发送回查请求。</li><li><strong>生产者执行 <code>checkLocalTransaction</code></strong>：生产者接收到回查请求后，会调用其实现的 <code>TransactionListener</code> 接口中的 <code>checkLocalTransaction()</code> 方法。<ul><li>在这个方法里，生产者需要根据消息的唯一标识（通常是 <code>MsgId</code> 或者业务 <code>Key</code>）去<strong>查询本地事务的真实状态</strong>。</li><li>例如，如果你的业务是“下单后发消息”，那么在这个回查方法里，你就需要根据消息中的订单ID去查询订单表，看看订单状态是否是“已支付”。</li><li>根据查询结果，<code>checkLocalTransaction()</code> 方法会返回三种状态：<ul><li><strong><code>LocalTransactionState.COMMIT_MESSAGE</code></strong>：表示本地事务已经成功，Broker 可以将半事务消息投递给消费者。</li><li><strong><code>LocalTransactionState.ROLLBACK_MESSAGE</code></strong>：表示本地事务已经失败或需要回滚，Broker 会删除半事务消息。</li><li><strong><code>LocalTransactionState.UNKNOW</code></strong>：表示当前无法确定本地事务状态（例如，查询超时、数据库暂时不可用）。此时，RocketMQ 会<strong>过一段时间再次发起回查</strong>，直到获取明确的状态。</li></ul></li></ul></li><li><strong>Broker 处理回查结果</strong>：Broker 根据生产者返回的状态，决定将半事务消息 <code>Commit</code> 或 <code>Rollback</code>。</li></ol><p><strong>回查机制的优点：</strong></p><ul><li><strong>保证最终一致性</strong>：即使在极端情况下（网络闪断、生产者宕机），也能通过回查机制最终确定消息的去向，保证业务数据与消息状态的一致性。</li><li><strong>避免资源浪费</strong>：如果本地事务失败，消息就不会被发送出去，避免了消费者收到无效消息，从而减少了不必要的消费处理。</li><li><strong>低耦合</strong>：生产者和消费者之间不需要直接依赖本地事务状态，而是通过 Broker 进行协调。</li></ul><h2 id="16-Rocketmq的高可用">16.Rocketmq的高可用</h2><p>主要依赖于其 Broker 集群架构以及 Dledger 组件（在 RocketMQ 4.5.0 之后引入，并逐步推广）。RocketMQ 高可用的核心目标在于，即使部分 Broker 节点发生故障，消息仍然能够可靠地被持久化、生产和消费，保障业务的连续性。</p><p>架构：</p><ul><li><p><strong>NameServer:</strong> NameServer 是一个轻量级的服务发现和路由中心，用于维护 Broker 的路由信息。NameServer 通常部署为一个集群，保证高可用性。即使部分 NameServer 宕机，客户端仍然可以从其他 NameServer 获取路由信息。</p></li><li><p><strong>Broker:</strong> Broker 是 RocketMQ 的消息存储和转发节点。为了实现高可用，Broker 通常部署为一个集群。Broker 集群中的每个 Broker 节点都有一个角色，即 Master 和 Slave。</p></li><li><p><strong>Master:</strong> Master Broker 负责接收客户端的消息写入请求，并将消息存储到本地磁盘。</p></li><li><p><strong>Slave:</strong> Slave Broker 负责从 Master Broker 复制消息数据，以备 Master 宕机时接管服务。</p></li></ul><p>会出现的问题：</p><ul><li><strong>数据一致性问题:</strong> 在异步复制模式下，如果 Master 宕机，可能会丢失部分尚未同步到 Slave 的消息。</li><li><strong>切换延迟:</strong> 主备切换需要一定的时间，在切换期间服务不可用。</li><li><strong>脑裂问题:</strong> 在极端情况下，Master 和 Slave 之间可能会出现网络隔离，导致脑裂，数据不一致。</li></ul><p><strong>Dledger 方案</strong>：</p><p>它基于 Raft 一致性算法，提供更强的一致性和更高的可用性，替代了之前的普通主从复制模式。</p><ul><li><strong>Raft 协议：</strong> Dledger 使用 Raft 协议在多个 Broker 节点之间选举出一个 Leader，只有 Leader 节点才能处理客户端的写入请求。 所有的数据变更都必须经过 Leader 的批准，并且复制到 Followers 节点上，确保数据一致性。</li><li><strong>高可用架构：</strong> Dledger 使得 RocketMQ 可以构建一个高可用的 Broker 集群，其中 Leader 节点负责处理读写请求，Follower 节点负责备份数据。 如果 Leader 节点发生故障，Raft 协议会自动选举出一个新的 Leader，保证服务的连续性。</li><li><strong>自动故障转移：</strong> 当 Leader 节点宕机时，Raft 协议会自动选举出一个新的 Leader，无需人工干预。 客户端会自动重连到新的 Leader 节点，继续进行消息的生产和消费。</li><li><strong>数据一致性保证：</strong> Raft 协议保证了所有节点上的数据一致性。 即使在发生故障转移的情况下，也不会出现数据丢失或数据不一致的问题。</li></ul><p>配置要点：</p><ul><li><strong>NameServer 集群：</strong> 部署多个 NameServer 实例，组成 NameServer 集群，并确保客户端配置了所有 NameServer 的地址。</li><li><strong>Broker 集群：</strong> 部署多个 Broker 节点，并配置 Master 和 Slave 关系（在 Dledger 模式下配置 Dledger 集群）。</li><li><strong>同步刷盘（SyncFlush）：</strong> 启用同步刷盘机制，确保消息被可靠地写入磁盘。这会牺牲一定的性能，但可以提高数据的可靠性。</li><li><strong>同步复制（SyncMaster）：</strong> 对于传统 Master-Slave 架构，启用同步复制模式，确保消息被复制到 Slave 节点。 (Dledger模式下，数据同步由Dledger组件保证)</li><li><strong>监控和告警：</strong> 实施全面的监控和告警机制，以便及时发现和处理故障。</li></ul><h2 id="17-RocketMQ的消息可靠性">17.RocketMQ的消息可靠性</h2><p>生产者：</p><p>使用Rocketmq自带的事务消息，</p><p>事务消息原理：首先生产者会发送一个<strong>half 消息</strong>(对原始消息的封装)，该消息对消费者不可见，MQ 通过 ACK 机制返回消息接受状态， 生产者执行本地事务并且返回给 MQ 一个状态(Commit、RollBack 等)，如果是 Commit 的话 MQ 就会把消息给到下游， RollBack 的话就会丢弃该消息，状态如果为 UnKnow 的话会过一段时间回查本地事务状态，默认回查 15 次，一直是 UnKnow 状态的话就会丢弃此消息。</p><p>为什么先发一个 half 消息，作用就是先判断下 MQ 有没有问题，服务正不正常。</p><p>持久化：<strong>MQ 收到消息后写入硬盘如何保证不丢失？</strong></p><p>数据存盘绕过缓存，改为同步刷盘，这一步需要修改 Broker 的配置文件，将 flushDiskType 改为 SYNC_FLUSH 同步刷盘策略，默认的是 ASYNC_FLUSH 异步刷盘，<strong>一旦同步刷盘返回成功，那么就一定保证消息已经持久化到磁盘中了。</strong></p><p><strong>消息写入硬盘后，硬盘坏了如何保证不丢失？</strong></p><p>为了保证磁盘损坏导致丢失数据，RocketMQ 采用主从机构，集群部署，Leader 中的数据在多个 Follower 中都存有备份，防止单点故障导致数据丢失。</p><p>Master 节点挂了怎么办？Master 节点挂了之后 DLedger 登场</p><ul><li>接管 MQ 的 commitLog</li><li>选举从节点</li><li>文件复制 uncommited 状态 多半从节点收到之后改为 commited</li></ul><p>消费者消费 MQ 如何保证不丢失？</p><ol><li>如果是网络问题导致的消费失败可以进行重试机制，默认每条消息重试 16 次</li><li>多线程异步消费失败，MQ 认为已经消费成功但是实际上对于业务逻辑来说消息是没有落地的，解决方案就是按照 mq 官方推荐的先执行本地事务再返回成功状态。</li></ol><p>整个 MQ 节点挂了如何保证不丢失？</p><p>这种极端情况可以消息发送失败之后先存入本地，例如放到缓存中，另外启动一个线程扫描缓存的消息去重试发送。</p><h2 id="18-RocketMQ为什么这么快，可以借鉴哪些地方">18.RocketMQ为什么这么快，可以借鉴哪些地方</h2><p>1.<strong>顺序写入磁盘</strong></p><p>RocketMQ 的速度很大程度上得益于它采用了顺序写磁盘的策略。 磁盘的顺序写性能比随机写高几个数量级。 消息会被顺序地追加到 CommitLog 文件中，这使得写入速度非常快。</p><p>磁盘寻道时间是随机写的主要瓶颈，顺序写避免大量的磁头寻道操作。</p><p>2.<strong>PageCache 高效利用</strong></p><p>RocketMQ 充分利用了操作系统的 PageCache。 Broker 会优先从 PageCache 中读取数据，减少了对磁盘的直接访问，提高了读取性能。</p><p>Broker 从 CommitLog 中读取消息并发送给 Consumer 时，如果 CommitLog 中的数据已经在 PageCache 中，则可以直接从内存中读取，无需进行物理磁盘 IO。 即使数据不在 PageCache 中，由于顺序读取的特性，也可以通过预读机制将数据加载到 PageCache 中。</p><p>3.<strong>零拷贝技术</strong></p><p>RocketMQ通过零拷贝技术，例如<code>sendfile</code>， 减少了数据在内核空间和用户空间之间的复制，从而提升了消息的传输效率。消息可以直接从磁盘发送到网络接口， 减少了 CPU 的开销。</p><p>传统的 IO 操作需要多次数据拷贝。 例如, 通常需要经过 磁盘 -&gt; 内核缓冲区 -&gt; 用户缓冲区 -&gt; Socket缓冲区 -&gt; 网络 这样的路径。 零拷贝技术可以减少甚至避免这些拷贝。</p><p>避免在用户态和内核态的多次拷贝</p><p>4.<strong>避免随机读</strong></p><p>RocketMQ 的消费模型设计避免了大量的随机读。 消息是按照 Offset 顺序消费的， 这样可以充分利用磁盘的顺序读性能。</p><p>5.<strong>轻量的消息结构</strong></p><p>RocketMQ 的消息结构设计得非常轻量级， 只包含必要的元数据和消息体。 这减少了序列化和反序列化的开销， 提高了消息处理的速度。</p><p>轻量级的消息结构如何保证消息的可靠性? 通过 Broker 端的持久化机制和 Consumer 的 ACK 机制来保证。</p><p><strong>6.高效的网络通信</strong></p><p>RocketMQ 基于 Netty 框架构建， 采用了 Reactor 模式， 使用异步非阻塞 IO。 这使得 Broker 可以处理大量的并发连接， 提高了系统的吞吐量</p><p><strong>7.尽可能无锁化操作</strong></p><p>RocketMQ 在设计上尽量避免使用锁， 使用 CAS (Compare and Swap) 操作等无锁技术， 减少了线程上下文切换的开销， 提高了并发性能</p><h2 id="19-RocketMQ-的存储机制">19.RocketMQ 的存储机制</h2><p>RocketMQ 的存储采用一种混合型的存储结构，既有类似日志结构的顺序写 CommitLog，又有用于快速索引的 ConsumeQueue。 这种设计使得 RocketMQ 既能保证写入的高吞吐量，又能兼顾消费的效率。</p><p><strong>CommitLog (消息存储)</strong></p><p><strong>顺序写</strong>(Sequential Write) 是 CommitLog 最重要的特性。 消息按照到达 Broker 的顺序，依次追加到 CommitLog 文件末尾。 这使得写入速度非常快， 能够应对高并发的写入场景。</p><ul><li>CommitLog 由多个 CommitLog 文件组成， 每个文件大小固定 (默认1GB)。</li><li>当一个文件写满后，会自动创建新的文件进行写入。</li><li>文件名以偏移量命名，方便查找。</li></ul><p>CommitLog 是 RocketMQ 存储消息的核心文件。 所有的消息都以追加写的方式写入 CommitLog， 保证了写入的高吞吐量。 CommitLog 文件是顺序写的， 这也是 RocketMQ 能够应对高并发写入的关键原因。</p><p>顺序写如何保证？ Broker 接收到 Producer 发送的消息后，直接将消息追加到 CommitLog 文件的末尾， 没有随机 IO 操作。</p><p>高并发的处理策略：</p><ul><li><strong>批量写入：</strong> Broker 可以将多个消息批量写入 CommitLog， 减少 IO 次数。</li><li><strong>PageCache：</strong> 利用操作系统的 PageCache， 将数据缓存在内存中， 减少直接的磁盘 IO。</li><li><strong>异步刷盘：</strong> 可以配置成异步刷盘， 不必每次写入都进行磁盘同步，进一步提升写入性能。 但是， 也需要注意数据可靠性的权衡。</li></ul><p><strong>ConsumeQueue (消息索引)</strong></p><p>存储的是消息在 CommitLog 中的 offset (物理偏移量)、消息长度、Message Tag 的 hashcode。</p><p>相对于 CommitLog 来说， ConsumeQueue 更多的是<strong>随机读</strong>。 (虽然也会顺序追加新的索引，但消费时会根据指定的 queueId 和 offset 查找对应的索引项)</p><ul><li>ConsumeQueue 也是由多个文件组成，每个文件大小固定。</li><li>每个 ConsumeQueue 文件对应一个 Topic 下的某个 QueueId。</li><li>文件名以偏移量命名，方便查找。</li></ul><p>ConsumeQueue 相当于是 CommitLog 的索引文件。 它存储了消息在 CommitLog 中的位置信息， 使得 Consumer 可以快速地定位到消息， 提高了消费效率。 没有ConsumeQueue的话， 消费消息就需要扫描整个 CommitLog。</p><ul><li><strong>加速消费:</strong> Consumer 可以根据 Topic 和 QueueId， 从 ConsumeQueue 中找到消息在 CommitLog 中的位置 (offset)， 然后直接从 CommitLog 中读取消息。 避免了扫描整个 CommitLog 文件。</li><li><strong>过滤消息:</strong> Consumer 可以根据 Message Tag 进行消息过滤。 ConsumeQueue 中存储了 Tag 的 hashcode， Consumer 可以先在 ConsumeQueue 中进行 Tag 过滤， 减少不必要的消息读取。</li></ul><p>联系：</p><ul><li><p>ConsumeQueue 是根据 CommitLog 异步生成的。 Broker 会启动一个后台线程， 定期扫描 CommitLog， 并将消息的索引信息提取出来， 写入 ConsumeQueue</p></li><li><p><strong>对应关系:</strong> 一个 CommitLog 文件对应多个 ConsumeQueue 文件 (每个 Topic 的每个 QueueId 对应一个 ConsumeQueue 文件)。</p></li></ul><ol><li><strong>CommitLog 恢复：</strong> 扫描 CommitLog 文件， 找到最后一个有效的消息 Offset。</li><li><strong>ConsumeQueue 恢复：</strong> 根据 CommitLog 中最后一个有效的消息 Offset， 重新构建 ConsumeQueue。 如果 ConsumeQueue 已经存在， 则需要进行校验和修复。</li></ol><h2 id="20-RocketMQ中Broker的刷盘策略有哪些">20.RocketMQ中Broker的刷盘策略有哪些</h2><p>提供了两种刷盘策略：</p><ol><li><strong>同步刷盘 (SYNC_FLUSH)</strong></li><li><strong>异步刷盘 (ASYNC_FLUSH)</strong></li></ol><p>同步刷盘：</p><p>同步刷盘指的是消息写入 CommitLog 后， 必须等待刷盘完成后，才返回 Producer 写入成功。 这种方式数据可靠性最高， 但是性能较低。 适用于对数据可靠性要求极高的场景。</p><p>通过 <code>FileChannel.force()</code> 方法强制将 PageCache 中的数据刷到磁盘。</p><p>异步刷盘：</p><p>异步刷盘指的是消息写入 CommitLog 后，立即返回 Producer 写入成功， 不需要等待刷盘完成。 这种方式性能较高，但是数据可靠性相对较低。 适用于对性能要求较高， 可以容忍少量消息丢失的场景。</p><ul><li><strong>定时刷盘:</strong> 定时将 PageCache 中的数据刷到磁盘。</li><li><strong>积累一定消息后刷盘:</strong> 当 PageCache 中积累的消息达到一定数量时， 将数据刷到磁盘。</li><li><strong>OS 调度刷盘:</strong> 完全由操作系统来决定何时将 PageCache 中的数据刷到磁盘。</li></ul><h2 id="21-RocketMO中的Broker部署方式">21.RocketMO中的Broker部署方式</h2><p>1.单节点</p><p>2.多节点同步双写</p><p>多 Broker 同步双写部署方式，至少需要两个 Broker 节点。 消息同步写入到两个 Broker 节点， 只有两个 Broker 都写入成功，才返回 Producer 写入成功。 这种方式数据可靠性高，但是写入性能较低。</p><p>3.异步复制：</p><p>多 Broker 异步复制部署方式， 至少需要两个 Broker 节点。 消息先写入到 Master Broker， 然后异步复制到 Slave Broker。这种方式写入性能较高，但是数据可靠性相对较低。</p><p>4.<strong>Dledger 模式</strong></p><p>&quot;Dledger 模式是 RocketMQ 提供的基于 Raft 协议的 CommitLog 复制解决方案。 它能够提供更高的可用性和数据一致性。 在 Dledger 模式下，多个 Broker 组成一个 Raft 组， 自动选举 Leader， 实现故障转移。</p><h1>Kafak</h1><h2 id="1-对Kafka有什么了解吗？">1.对Kafka有什么了解吗？</h2><p>Kafka特点如下：</p><ul><li>高吞吐量、低延迟：kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒，每个topic可以分多个partition, consumer group 对partition进行consume操作。</li><li>可扩展性：kafka集群支持热扩展</li><li>持久性、可靠性：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失</li><li>容错性：允许集群中节点失败（若副本数量为n,则允许n-1个节点失败）</li><li>高并发：支持数千个客户端同时读写</li></ul><h2 id="2-Kafka-为什么这么快？">2.Kafka 为什么这么快？</h2><ul><li><strong>顺序写入优化</strong>：Kafka将消息顺序写入磁盘，减少了磁盘的寻道时间。这种方式比随机写入更高效，因为磁盘读写头在顺序写入时只需移动一次。</li><li><strong>批量处理技术</strong>：Kafka支持批量发送消息，这意味着生产者在发送消息时可以等待直到有足够的数据积累到一定量，然后再发送。这种方法减少了网络开销和磁盘I/O操作的次数，从而提高了吞吐量。</li><li><strong>零拷贝技术</strong>：Kafka使用零拷贝技术，可以直接将数据从磁盘发送到网络套接字，避免了在用户空间和内核空间之间的多次数据拷贝。这大幅降低了CPU和内存的负载，提高了数据传输效率。</li><li><strong>压缩技术</strong>：Kafka支持对消息进行压缩，这不仅减少了网络传输的数据量，还提高了整体的吞吐量。</li></ul><h2 id="3-kafka的模型介绍一下，kafka是推送还是拉取？">3.kafka的模型介绍一下，kafka是推送还是拉取？</h2><p>消费者通常有两种与 Broker 交互的模型：<strong>推送模型（Push Model）</strong> 和 <strong>拉取模型（Pull Model）</strong>。Kafka 选择了后者，</p><p><strong>推送模型（Push Model)原理</strong></p><p>在推送模型中，消息代理（Broker）主动将消息推送给消费者。当有新消息到达 Broker 时，<strong>Broker 会根据一定的策略（如轮询、最少连接等）将消息发送给订阅的消费者。</strong></p><p>优点</p><ul><li><strong>实时性高</strong>：消息一旦到达 Broker 就能立即被消费者获取并处理，延迟较低。</li><li><strong>开发简单</strong>：消费者只需等待接收消息即可，无需主动请求。</li></ul><p>缺点</p><ul><li><strong>消费者负载控制困难</strong>：Broker 无法得知每个消费者的处理能力。如果推送速度过快，而消费者处理能力跟不上，容易导致消费者过载、崩溃，甚至数据丢失。这就像水龙头一直全开，而水桶可能接不过来。</li><li><strong>流量控制复杂</strong>：需要<strong>复杂的流量控制机制来避免消费者过载</strong>，例如 Broker 维护每个消费者的处理速率，动态调整推送速度，这增加了 Broker 的复杂性。</li><li><strong>不灵活</strong>：消费者被动接收消息，无法根据自身处理能力或特定需求（如批量消费）来调整消息获取节奏。</li></ul><hr><p><strong>拉取模型（Pull Model）</strong></p><p>在拉取模型中，<strong>消费者主动向消息代理（Broker）请求消息</strong>。消费者定期或按需向 Broker 发送拉取请求，Broker 接收到请求后，将可用的消息返回给消费者。</p><p>优点</p><ul><li><strong>消费者自我控制</strong>：消费者可以根据自身的处理能力、网络状况或业务需求来决定何时、以何种速率拉取多少消息。这就像水桶根据自身容量和需要，主动去水龙头接水。</li><li><strong>避免过载</strong>：消费者不会因为 Broker 推送过快而导致过载，因为它只在准备好时才去拉取消息。</li><li><strong>批量消费效率高</strong>：消费者可以一次性拉取一批消息进行批量处理，减少网络往返次数，提高吞吐量，这对于磁盘 I/O 友好的消息系统尤为重要。</li></ul><p>缺点</p><ul><li><strong>实时性可能略低</strong>：如果消费者拉取间隔设置过长，可能会引入额外的消息延迟。</li><li><strong>空轮询问题</strong>：如果 Broker 没有新消息，消费者仍然会发送拉取请求，这会导致“空轮询”，浪费网络资源和 CPU 周期。Kafka 对此有优化措施。</li></ul><hr><p>Kafka 选择拉取模型的原因（重点）</p><p>Kafka 选择拉取模型是基于其<strong>高吞吐量、持久化存储和分布式特性</strong>的考量。以下是主要原因：</p><ol><li><p><strong>适应消费者异构处理能力</strong>：Kafka 的设计目标之一是<strong>支持大量异构的消费者</strong>，它们可能拥有不同的处理能力和速度。<strong>拉取模型允许每个消费者根据自己的节奏消费</strong>，避免了“快生产者-慢消费者”导致的问题。消费者可以在消息量大时快速拉取，在消息量小时或处理繁忙时放缓拉取速度。</p></li><li><p><strong>优化批量消息处理</strong>：<strong>Kafka 的设计理念是基于日志（Log）的</strong>，它将消息追加写入磁盘。批量地从磁盘读取消息远比单条读取效率高。<strong>拉取模型允许消费者一次性拉取一批（或一个批次）消息进行处理，从而最大限度地利用磁盘 I/O，提高整体吞吐量。</strong></p></li><li><p><strong>简化 Broker 设计</strong>：将流控和背压（backpressure）的复杂性从 Broker 转移到消费者端。<strong>Broker 只需关注消息的持久化和按需提供</strong>，无需跟踪每个消费者的消费状态和处理能力，这使得 Broker 的设计更加简单、健壮，更易于扩展。</p></li><li><p><strong>更好的容错性和伸缩性</strong>：消费者故障或新增时，不会对 Broker 造成冲击。新的消费者加入或旧的消费者退出时，只需重新分配分区和调整拉取逻辑即可。</p></li><li><p><strong>消费者主动控制偏移量 (Offset)</strong>：这是拉取模型最重要的优势之一，也是 Kafka 独特且强大的特性。</p><p>消费者如何通过控制偏移量实现灵活的消息消费</p><p>Kafka 的每个分区（Partition）<strong>都是一个有序的、不可变的消息序列</strong>，每条消息都有一个唯一的、递增的<strong>偏移量（Offset）</strong>。消费者在拉取消息时，会记录自己消费到的当前偏移量。Kafka Broker <strong>不负责跟踪消费者的消费状态</strong>，而是由<strong>消费者自己负责管理其消费的偏移量。</strong></p><ul><li><strong>提交偏移量</strong>：消费者成功处理一批消息后，会向 Kafka 提交（commit）它已处理的最新消息的偏移量。这个偏移量通常存储在 Kafka 内部的一个特殊 Topic (<code>__consumer_offsets</code>) 中。</li><li><strong>从指定偏移量开始消费</strong>：当消费者启动或重新平衡（rebalance）时，它会从已提交的偏移量处开始消费。这种机制赋予了消费者极大的灵活性：<ul><li><strong>重置到旧偏移量（Time Travel）</strong>：如果因为业务逻辑错误或需要重新处理历史数据，消费者可以<strong>手动将偏移量重置到更早的时间点或更小的偏移量</strong>。例如，通过 <code>seek()</code> 方法将消费指针移到指定偏移量，甚至可以通过时间戳 (<code>seek(TopicPartition, long timestamp)</code>) 寻找到某个时间点的偏移量。这使得 Kafka 成为一个“时间机器”，可以重复消费数据。</li><li><strong>跳到最新位置（Consume from Latest）</strong>：如果消费者只想处理新生成的消息，或者跳过历史积压，它可以将偏移量直接<strong>设置为分区中的最新偏移量</strong>。这意味着它会从当前写入位置开始消费，忽略所有之前的历史消息。这对于快速启动消费者，只关注实时数据很有用。</li></ul></li></ul><p>这种基于偏移量自主控制的消费模式，使得 Kafka 的消费者非常灵活，能够适应各种复杂的业务场景，包括数据回溯、灾难恢复、实时处理与历史批处理的结合等。</p></li></ol><p><strong>消费者组的概念</strong></p><p>Kafka 引入了**消费者组（Consumer Group）**的概念来实现高伸缩性和高可用性。</p><ul><li><strong>实现水平扩展</strong>：<ul><li><strong>一个 Topic 的一个分区在同一时刻只能被一个消费者组中的一个消费者实例消费。</strong></li><li>当一个消费者组内有多个消费者实例时，Kafka 会将 Topic 的所有分区<strong>均匀地分配</strong>给组内的消费者。例如，如果一个 Topic 有 10 个分区，一个消费者组有 5 个消费者实例，那么每个消费者可能负责消费 2 个分区。</li><li>通过增加消费者组内的消费者实例数量，可以提高整个消费者组的并发处理能力，实现水平扩展。**当消费者数量等于分区数量时，每个分区由一个消费者处理，达到最大并行度。**如果消费者数量超过分区数量，多余的消费者将处于空闲状态。</li></ul></li><li><strong>实现故障转移（高可用性）</strong>：<ul><li>当消费者组中的某个消费者实例发生故障（如崩溃、下线）时，Kafka 会触发**再平衡（Rebalance）**机制。</li><li>Kafka 会将该消费者原来负责消费的分区<strong>自动重新分配</strong>给组内其他活跃的消费者实例。</li><li>这样，即使有消费者实例故障，整个消费者组的消费任务也不会中断，保证了高可用性。新的消费者实例上线也会触发再平衡，将部分分区分配给它。</li></ul></li></ul><p><strong>消费者如何通过拉取模式从 Broker 读取数据</strong></p><p>消费者组中的每个消费者实例，都会对它被分配到的每个分区执行拉取操作：</p><ol><li><strong>初始化</strong>：消费者启动并加入消费者组。通过<strong>心跳机制与 Broker 保持连接</strong>，并参与分区分配（再平衡）。</li><li><strong>获取偏移量</strong>：消费者从 <code>__consumer_offsets</code> Topic 中获取其负责的每个分区的已提交偏移量，作为下一次拉取消息的起始位置。</li><li><strong>发送拉取请求</strong>：消费者向其分配到的分区的 Leader Broker 发送 <code>FetchRequest</code>。请求中包含它想从哪个分区、从哪个偏移量开始、拉取多少字节的消息等信息。</li><li><strong>Broker 响应</strong>：Leader Broker 收到请求后，从其日志文件中读取指定偏移量之后的消息，并以 <code>FetchResponse</code> 返回给消费者。</li><li><strong>消费者处理</strong>：消费者收到消息后，进行业务逻辑处理。</li><li><strong>提交偏移量</strong>：处理成功后，消费者将新的偏移量提交到 <code>__consumer_offsets</code> Topic，更新自己的消费进度。</li><li><strong>循环拉取</strong>：消费者会持续循环执行 3-6 步，不断地拉取并处理消息。</li></ol><p><strong>解决无数据时的循环问题（长轮询）</strong></p><p>为了解决拉取模型可能出现的“空轮询”问题和提高效率，Kafka 的拉取请求通常采用**长轮询（Long Polling）**机制：</p><ul><li>当消费者发送拉取请求时，如果 Broker 上没有立即可用的新消息，Broker 不会立即返回空结果。</li><li>相反，Broker 会**持有（hold）**住这个请求一段时间（由消费者请求中的 <code>max.wait.ms</code> 参数控制，默认 500ms）。</li><li>在这段时间内，<strong>如果新的消息到达了，或者达到了等待时间，Broker 才会将这些新消息返回给消费者。</strong></li><li>如果等待时间内没有新消息，Broker 才会返回一个空的结果。</li><li>这样，就避免了消费者频繁地发送空请求，减少了网络和 CPU 资源的浪费，同时又保证了相对较好的实时性。</li></ul><h2 id="4-Kafka-如何保证顺序读取消息？">4.Kafka 如何保证顺序读取消息？</h2><p>Kafka 可以保证在同一个分区内消息是有序的，生产者写入到同一分区的消息会按照写入顺序追加到分区日志文件中，消费者从分区中读取消息时也会按照这个顺序。这是 Kafka 天然具备的特性。</p><p>要在 Kafka 中保证顺序读取消息，需要结合生产者、消费者的配置以及合适的业务处理逻辑来实现。以下具体说明如何实现顺序读取消息：</p><ul><li>生产者端确保消息顺序：为了保证消息写入同一分区从而确保顺序性，生产者需要将消息发送到指定分区。<strong>可以通过自定义分区器来实现，通过为消息指定相同的Key，保证相同Key的消息发送到同一分区。</strong></li><li>消费者端保证顺序消费：消费者在消费消息时，需要<strong>单线程消费同一分区的消息</strong>，这样才能保证按顺序处理消息。如果使用多线程消费同一分区，就无法保证消息处理的顺序性。</li></ul><p>Kafka 本身不能保证跨分区的消息顺序性，如果需要全局的消息顺序性，通常有以下两种方法：</p><ul><li>只使用一个分区：<strong>将所有消息都写入到同一个分区，消费者也只从这个分区消费消息</strong>。但这种方式会导致 Kafka 的并行处理能力下降，因为 Kafka 的性能优势在于多分区并行处理。</li><li>业务层面保证：在业务代码中对消息进行<strong>编号或添加时间戳等标识</strong>，消费者在消费消息后，根据这些标识对消息进行排序处理。但这种方式会增加业务代码的复杂度。</li></ul><h2 id="5-kafka-消息积压怎么办？">5.kafka 消息积压怎么办？</h2><p>Kafka 消息积压是一个常见的问题，它可能会导致数据处理延迟，甚至影响业务的正常运行，下面是一些解决 Kafka 消息积压问题的常用方法：</p><ul><li><strong>增加消费者实例可以提高消息的消费速度</strong>，从而缓解积压问题。你需要确保消费者组中的消费者数量<strong>不超过分区数量</strong>，因为一个分区同一时间只能被一个消费者消费。</li><li>增加 Kafka 主题的分区数量可以提高消息的并行处理能力。在创建新分区后，你需要重新平衡消费者组，让更多的消费者可以同时消费消息。</li></ul><h2 id="6-Kafka为什么一个分区只能由消费者组的一个消费者消费？这样设计的意义是什么？">6.Kafka为什么一个分区只能由消费者组的一个消费者消费？这样设计的意义是什么？</h2><p>同一时刻，<strong>一条消息只能被组中的一个消费者实例消费</strong></p><p><img src="https://cdn.xiaolincoding.com//picgo/1724653429445-22f12b17-9413-4611-9d78-c3599d8c7906.png" alt="img"></p><p>如果两个消费者负责同一个分区，那么就意味着两个消费者同时读取分区的消息，由于消费者自己可以控制读取消息的offset，就有可能C1才读到2，而C1读到1，C1还没处理完，C2已经读到3了，则会造成很多浪费，因为这就相当于多线程读取同一个消息，会造成消息处理的重复，且不能保证消息的顺序。</p><h2 id="7-如果有一个消费主题topic，有一个消费组group，topic有10个分区，消费线程数和分区数的关系是怎么样的？">7.如果有一个消费主题topic，有一个消费组group，topic有10个分区，消费线程数和分区数的关系是怎么样的？</h2><p>topic下的一个分区只能被同一个consumer group下的一个consumer线程来消费，但反之并不成立，即一个consumer线程可以消费多个分区的数据，比如Kafka提供的ConsoleConsumer，默认就只是一个线程来消费所有分区的数据。</p><p><img src="https://cdn.xiaolincoding.com//picgo/1732606891790-bf7cb080-0209-46bc-80b4-5f96ad88453f.webp" alt="img"></p><p>所以，<strong>分区数决定了同组消费者个数的上限</strong>。</p><p>**如果你的分区数是N，那么最好线程数也保持为N，这样通常能够达到最大的吞吐量。**超过N的配置只是浪费系统资源，因为多出的线程不会被分配到任何分区。</p><h2 id="8-消息中间件如何做到高可用？">8.消息中间件如何做到高可用？</h2><p>消息中间件如何保证高可用呢？单机是没有高可用可言的，高可用都是对集群来说的，一起看下kafka的高可用吧。</p><p>Kafka 的基础集群架构，由多个<code>broker</code>组成，每个<code>broker</code>都是一个节点。当你创建一个<code>topic</code>时，它可以划分为多个<code>partition</code>，而每个<code>partition</code>放一部分数据，分别存在于不同的 broker 上。也就是说，<strong>一个 topic 的数据，是分散放在多个机器上的，每个机器就放一部分数据。</strong></p><p>有些伙伴可能有疑问，每个<code>partition</code>放一部分数据，如果对应的broker挂了，那这部分数据是不是就丢失了？那还谈什么高可用呢？</p><blockquote><p>Kafka 0.8 之后，提供了HA机制，复制品副本机制来保证高可用，即每个 partition 的数据都会同步到其它机器上，形成多个副本。**然后所有的副本会选举一个 leader 出来，让leader去跟生产和消费者打交道，其他副本都是follower。**写数据时，leader 负责把数据同步给所有的follower，读消息时， 直接读 leader 上的数据即可。如何保证高可用的？就是假设某个 broker 宕机，这个broker上的partition 在其他机器上都有副本的。如果挂的是leader的broker呢？其他follower会重新选一个leader出来。</p></blockquote><p><strong>写数据</strong>的时候，生产者就写 leader，然后 leader 将数据落地写本地磁盘，接着其他 follower 自己主动从 leader 来 pull 数据。一旦所有 follower 同步好数据了，就会发送 ack 给 leader，leader 收到所有 follower 的 ack 之后，就会返回写成功的消息给生产者。</p><p><strong>消费</strong>的时候，只会从 leader 去读，但是只有当一个消息已经被所有 follower 都同步成功返回 ack 的时候，这个消息才会被消费者读到。</p><h2 id="9-Kafka-和-RocketMQ-消息确认机制有什么不同？">9.<strong>Kafka 和 RocketMQ 消息确认机制有什么不同？</strong></h2><p>Kafka的消息确认机制有三种：0，1，-1：</p><ul><li><strong>ACK=0</strong>：这是最不可靠的模式。<strong>生产者在发送消息后不会等待来自服务器的确认</strong>。这意味着消息可能会在发送之后丢失，而生产者将无法知道它是否成功到达服务器。</li><li><strong>ACK=1</strong>：这是默认模式，也是一种折衷方式。在这种模式下，<strong>生产者会在消息发送后等待来自分区领导者（leader）的确认</strong>，但不会等待所有副本（replicas）的确认。这意味着只要消息被写入分区领导者，生产者就会收到确认。如果分区领导者成功写入消息，但在同步到所有副本之前宕机，消息可能会丢失。</li><li><strong>ACK=-1</strong>：这是最可靠的模式。在这种模式下，<strong>生产者会在消息发送后等待所有副本的确认</strong>。只有在所有副本都成功写入消息后，生产者才会收到确认。这确保了消息的可靠性，但会导致更长的延迟。</li></ul><p>RocketMQ 提供了三种消息发送方式：同步发送、异步发送和单向发送：</p><ul><li><strong>同步发送</strong>：是指消息发送方发出一条消息后，会在<strong>收到服务端同步响应之后才发下一条消息的通讯方式</strong>。应用场景非常广泛，例如重要通知邮件、报名短信通知、营销短信系统等。</li><li><strong>异步发送</strong>：是指发送方发出一条消息后，不等服务端返回响应，接着发送下一条消息的通讯方式，但是需要<strong>实现异步发送回调接口（SendCallback）</strong>。消息发送方在发送了一条消息后，不需要等待服务端响应即可发送第二条消息。发送方通过回调接口接收服务端响应，并处理响应结果。适用于链路耗时较长，对响应时间较为敏感的业务场景，例如，视频上传后通知启动转码服务，转码完成后通知推送转码结果等。</li><li><strong>单向发送</strong>：发送方只负责发送消息，不等待服务端返回响应且没有回调函数触发，即<strong>只发送请求不等待应答</strong>。此方式发送消息的过程耗时非常短，一般在微秒级别。适用于某些耗时非常短，但对可靠性要求并不高的场景，例如日志收集。</li></ul><h2 id="10-Kafka-和-RocketMQ-的-broker-架构有什么区别">10.<strong>Kafka 和 RocketMQ 的 broker 架构有什么区别</strong></h2><ul><li>Kafka 的 broker 架构：Kafka 的 broker 架构采用了分布式的设计，<strong>每个 Kafka broker 是一个独立的服务实例</strong>，负责存储和处理一部分消息数据。Kafka 的 topic 被分区存储在不同的 broker 上，实现了水平扩展和高可用性。</li><li>RocketMQ 的 broker 架构：RocketMQ 的 broker 架构也是分布式的，但是<strong>每个 RocketMQ broker 有主从之分</strong>，一个主节点和多个从节点组成一个 broker 集群。<strong>主节点负责消息的写入和消费者的拉取，从节点负责消息的复制和消费者的负载均衡，提高了消息的可靠性和可用性。</strong></li></ul><h2 id="11-kafka是怎么解决消息幂等的">11.kafka是怎么解决消息幂等的</h2><p><strong>幂等性 (Idempotence)</strong> 指的是，对于同一个操作，无论执行多少次，其结果都是相同的，不会对系统状态造成额外的副作用。在分布式系统中，由于网络抖动、超时重试等原因，<strong>消息生产者可能会重复发送同一条消息。如果不对这些重复消息进行处理，就可能导致数据不一致</strong>（例如，重复扣款、重复插入数据）。</p><p>Kafka 在 <strong>0.11.0 版本</strong> 引入了<strong>生产者幂等性</strong>，以确保消息在<strong>生产者到 Broker</strong> 的传输过程中，即使生产者重试，消息也只会被写入 Kafka <strong>一次且仅一次</strong>。</p><p><strong>原理：</strong></p><p>Kafka 实现生产者幂等性的核心机制是为每个生产者会话分配一个唯一的 <strong>Producer ID (PID)</strong>，并为每条消息分配一个<strong>序列号 (Sequence Number)</strong>。</p><p>当生产者首次连接到 Kafka 集群并启用幂等性时，Broker 会为这个生产者会话分配一个唯一的 <code>PID</code>。</p><p>这个 <code>PID</code> 在生产者会话的生命周期内保持不变。</p><p>每个 <code>PID</code> 都会维护一个针对每个分区递增的<strong>序列号</strong>。</p><p>生产者发送的每条消息都会带上其 <code>PID</code> 和对应的 <code>Sequence Number</code>。</p><p>broker：</p><p>当 Broker 收到消息时，它会检查消息的 <code>(PID, Partition, Sequence Number)</code> 元组。</p><p>对于每个 <code>(PID, Partition)</code>，Broker 会维护一个已接收到的最大序列号。</p><p>如果收到的消息的 <code>Sequence Number</code> <strong>等于</strong> Broker 记录的 <code>max_sequence_number + 1</code>，则表示这是一条新消息，Broker 会将其写入日志，并更新 最大序列号。</p><p>如果收到的消息的 <code>Sequence Number</code> <strong>小于或等于</strong> <code>max_sequence_number</code>，则表示这是一条<strong>重复消息</strong>（因为生产者重试发送了），Broker 会直接<strong>丢弃</strong>这条消息，但仍向生产者发送成功确认。</p><p>如果收到的消息的 <code>Sequence Number</code> <strong>大于</strong> <code>max_sequence_number + 1</code>，则表示消息乱序，这通常是不可恢复的错误，Broker 会抛出异常。</p><p>跟MVCC的read view的活跃事务id差不多</p><p><strong>配置：</strong></p><p>在 Kafka 生产者配置中，只需设置 <code>enable.idempotence=true</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Properties props <span class="operator">=</span> <span class="keyword">new</span> Properties();</span><br><span class="line">props.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">props.put(&quot;enable.idempotence&quot;, &quot;true&quot;); <span class="operator">/</span><span class="operator">/</span> 启用幂等性</span><br><span class="line">props.put(&quot;acks&quot;, &quot;all&quot;); <span class="operator">/</span><span class="operator">/</span> 幂等性要求 acks 必须是 <span class="keyword">all</span></span><br><span class="line">props.put(&quot;retries&quot;, Integer.MAX_VALUE); <span class="operator">/</span><span class="operator">/</span> 启用幂等性后可以安全地重试</span><br></pre></td></tr></table></figure><p><strong>确保数据不重复</strong>：解决了生产者侧由于重试导致的重复消息问题。</p><p><strong>简化生产者逻辑</strong>：开发者无需在应用层手动处理消息去重。</p><p><strong>实现“精确一次语义”(Exactly-Once Semantics)</strong> 的基础：生产者幂等性是实现端到端事务性消息（包括跨多个 Topic/Partition 的事务）的关键组成部分。</p><p><strong>单会话、单分区</strong>：幂等性保证只在<strong>一个生产者会话内，且针对单个分区有效</strong>。如果生产者重启（<code>PID</code> 会变），或者消息发送到不同的分区，则无法保证幂等性。</p><p><strong>不处理消费者端的重复消费</strong>：生产者幂等性只解决了<strong>消息写入到 Kafka 的去重问题</strong>。消费者仍然可能因为重试消费等原因，从 Kafka 中<strong>读取到同一条消息多次</strong>。<strong>消费者端的去重（或保证“精确一次”处理）需要消费者自身结合业务逻辑实现，或者使用 Kafka Streams/Flink 等流处理框架的事务性功能。</strong></p><h2 id="12-kafka持久化的机制">12.kafka持久化的机制</h2><p>Kafka 的持久性指的是它能够<strong>可靠地存储消息，即使在 Broker 宕机、网络故障等情况下也不会丢失数据</strong>。Kafka 通过以下几个核心机制来保证消息的持久性：</p><p>1.持久化到硬盘</p><p><strong>追加写入 (Append-Only Log)</strong>：Kafka 的所有数据都以**日志（log）**的形式存储在 Broker 的文件系统上。消息被追加写入到分区对应的日志文件中，是顺序写入，这使得磁盘 I/O 效率极高。</p><p><strong>不可变性 (Immutability)</strong>：一旦消息被写入分区，就是不可变的。它们不会被修改或删除，只能通过日志清理策略（基于时间或大小）来过期。</p><p><strong>文件系统缓存 (Page Cache)</strong>：Kafka 充分利用操作系统的文件系统缓存（Page Cache）。当消息写入磁盘时，它们首先进入操作系统的内存缓存，然后再异步地刷写到物理磁盘。这既提供了高性能写入，又在一定程度上保证了数据在内存中的持久性。</p><p>2.消息复制</p><p><strong>分区副本 (Partition Replicas)</strong>：Kafka 的每个 Topic 都被划分为多个<strong>分区 (Partitions)</strong>，每个分区都可以配置一个<strong>复制因子 (Replication Factor)</strong>。例如，如果 <code>replication.factor=3</code>，则每个分区会有 3 个副本。</p><p><strong>Leader-Follower 模型</strong>：每个分区都有一个<strong>Leader 副本</strong>和若干个<strong>Follower 副本</strong>。</p><ul><li><strong>Leader</strong>：负责处理该分区所有的生产（写入）和消费（读取）请求。</li><li><strong>Follower</strong>：被动地从 Leader 复制消息日志，保持与 Leader 的数据同步。</li></ul><p><strong>In-Sync Replicas (ISR)</strong>：<strong>同步副本集合</strong>。这是一个动态维护的集合，包含 Leader 副本和所有与 Leader 保持同步的 Follower 副本。<strong>判断同步的标准通常是 Follower 副本的日志与 Leader 副本的日志的差距在一个可配置的阈值之内。</strong></p><p><strong>故障转移 (Failover)</strong>：如果 Leader 副本所在的 Broker 宕机，Kafka 控制器（Controller）会从 ISR 中选举一个新的 Leader 副本，从而确保该分区持续可用且数据不丢失。只要 ISR 中至少有一个副本存活，数据就不会丢失。</p><p>3.生产者确认机制：</p><p>生产者在发送消息时，可以通过 <code>acks</code> 参数来配置不同级别的<strong>确认机制</strong>，从而控制消息的持久性保证：</p><ul><li><p><strong><code>acks=0</code> (Lowest Durability)</strong>：</p><ul><li>生产者发送消息后，<strong>不等待</strong> Broker 的任何确认就认为发送成功。</li><li><strong>优点</strong>：吞吐量最高，延迟最低。</li><li><strong>缺点</strong>：可靠性最差， Broker 宕机或消息未成功写入，都可能导致消息丢失。</li></ul></li><li><p><strong><code>acks=1</code> (Default / Moderate Durability)</strong>：</p><ul><li>生产者等待<strong>分区 Leader 副本</strong>确认消息已写入其本地日志（并进入文件系统缓存）。</li><li><strong>优点</strong>：相对高的吞吐量和较低的延迟，同时提供了基本的可靠性保证。</li><li><strong>缺点</strong>：如果 Leader 副本写入成功后，但在 Follower 副本同步之前 Leader 宕机，可能会导致消息丢失。</li></ul></li><li><p><strong><code>acks=all</code> (or <code>-1</code>) (Highest Durability)</strong>：</p><ul><li>生产者等待<strong>所有 ISR 中的副本</strong>都确认消息已写入其本地日志。</li><li><strong>优点</strong>：最高级别的可靠性保证，只要至少 <code>min.insync.replicas</code> 个副本存活，消息就不会丢失。</li><li><strong>缺点</strong>：吞吐量最低，延迟最高。因为需要等待所有同步副本的确认，如果某个 Follower 同步速度慢，就会增加延迟。</li><li><strong>推荐配置</strong>：为了最高的数据持久性，通常会配置 <code>replication.factor &gt;= 3</code>，<code>min.insync.replicas &gt;= 2</code>，并且生产者设置 <code>acks=all</code>。</li></ul><p>4.日志保留策略：</p><p>Kafka 不会像传统消息队列那样在消息被消费后立即删除。它会根据配置的<strong>保留策略</strong>来持久化消息：</p><ul><li><strong>基于时间</strong>：消息保留多长时间（<code>log.retention.ms</code>，默认 7 天）。</li><li><strong>基于大小</strong>：日志文件达到多大时开始清理（<code>log.retention.bytes</code>）。</li><li><strong>日志压缩 (Log Compaction)</strong>：对于某些特殊的 Topic（如用于存储状态的 Topic），可以配置日志压缩。它会保留每个消息键的最新消息，清除旧的相同键的消息，从而实现按键的持久化。</li></ul></li></ul><h2 id="13-kafka处理消息丢失">13.kafka处理消息丢失</h2><p>消费者：关闭offset的自动提交</p><p>就是说，你消费到了这个消息，然后消费者那边<strong>自动提交了 offset</strong>，让 Kafka 以为你已经消费好了这个消息，但其实你才刚准备处理这个消息，你还没处理，你自己就挂了，此时这条消息就丢咯。</p><p>这不是跟 RabbitMQ 差不多吗，大家都知道 Kafka 会自动提交 offset，那么只要<strong>关闭自动提交</strong> offset，在处理完之后自己手动提交 offset，就可以保证数据不会丢。但是此时确实还是<strong>可能会有重复消费</strong>，比如你刚处理完，还没提交 offset，结果自己挂了，此时肯定会重复消费一次，自己保证幂等性就好了。</p><p>kafka丢数据：</p><p>就是 Kafka 某个 broker 宕机，然后重新选举 partition 的 leader。大家想想，要是此时其他的 follower 刚好还有些数据没有同步，结果此时 leader 挂了，然后选举某个 follower 成 leader 之后，不就少了一些数据？这就丢了一些数据啊。</p><p>配置参数来解决：</p><ul><li>给 topic 设置 <code>replication.factor</code> 参数：这个值必须大于 1，要求每个 partition 必须有至少 2 个副本。</li><li>在 Kafka 服务端设置 <code>min.insync.replicas</code> 参数：这个值必须大于 1，这个是要求一个 leader 至少感知到有至少一个 follower 还跟自己保持联系，没掉队，这样才能确保 leader 挂了还有一个 follower 吧。</li><li>在 producer 端设置 <code>acks=all</code> ：这个是要求每条数据，必须是<strong>写入所有 replica 之后，才能认为是写成功了</strong>。</li><li>在 producer 端设置 <code>retries=MAX</code> （很大很大很大的一个值，无限次重试的意思）：这个是<strong>要求一旦写入失败，就无限重试</strong>，卡在这里了。</li></ul><p>至少在 Kafka broker 端就可以保证在 leader 所在 broker 发生故障，进行 leader 切换时，数据不会丢失。</p><p>生产者：</p><p><code>acks=all</code> ，一定不会丢，要求是，你的 leader 接收到消息，所有的 follower 都同步到了消息之后，才认为本次写成功了。如果没满足这个条件，生产者会自动不断的重试，重试无限次。</p><h1>RabbitMQ</h1><h2 id="1-RabbitMQ的特性你知道哪些？">1.RabbitMQ的特性你知道哪些？</h2><p>abbitMQ 以 <strong>可靠性</strong>、<strong>灵活性</strong> 和 <strong>易扩展性</strong> 为核心优势，适合需要稳定消息传递的复杂系统。其丰富的插件和协议支持使其在微服务、IoT、金融等领域广泛应用，比较核心的特性有如下：</p><ul><li><strong>持久化机制</strong>：RabbitMQ 支持消息、队列和交换器的持久化。<strong>当启用持久化时，消息会被写入磁盘</strong>，即使 RabbitMQ 服务器重启，消息也不会丢失。例如，在声明队列时可以设置 <code>durable</code> 参数为 <code>true</code> 来实现队列的持久化：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="string">&#x27;localhost&#x27;</span>))</span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明一个持久化队列</span></span><br><span class="line">channel.queue_declare(queue=<span class="string">&#x27;durable_queue&#x27;</span>, durable=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>消息确认机制</strong>：提供了生产者确认和消费者确认机制。生产者可以设置 <code>confirm</code> 模式，当消息成功到达 RabbitMQ 服务器时，会收到确认消息；消费者在处理完消息后，可以向 RabbitMQ 发送确认信号，告知服务器该消息已被成功处理，服务器才会将消息从队列中删除。</li><li><strong>镜像队列</strong>：支持创建镜像队列，将队列的内容复制到多个节点上，提高消息的可用性和可靠性。当一个节点出现故障时，其他节点仍然可以提供服务，确保消息不会丢失。</li><li><strong>多种交换器类型</strong>：RabbitMQ 提供了多种类型的交换器，如<strong>直连交换器（Direct Exchange）、扇形交换器（Fanout Exchange）、主题交换器（Topic Exchange）和头部交换器（Headers Exchange）</strong>。不同类型的交换器根据不同的规则将消息路由到队列中。例如，扇形交换器会将接收到的消息广播到所有绑定的队列中；主题交换器则根据消息的路由键和绑定键的匹配规则进行路由。</li></ul><h2 id="2-RabbitMQ的底层架构是什么？">2.RabbitMQ的底层架构是什么？</h2><p>以下是 RabbitMQ 的一些核心架构组件和特性：</p><ul><li><strong>核心组件</strong>：生产者负责发送消息到 RabbitMQ、消费者负责从 RabbitMQ 接收并处理消息、RabbitMQ 本身负责存储和转发消息。</li><li><strong>交换机</strong>：交换机接收来自生产者的消息，并根据 routing key 和绑定规则将消息路由到一个或多个队列。</li><li><strong>持久化</strong>：RabbitMQ 支持消息的持久化，可以将消息保存在磁盘上，以确保在 RabbitMQ 重启后消息不丢失，队列也可以设置为持久化，以保证其结构在重启后不会丢失。</li><li><strong>确认机制</strong>：为了确保消息可靠送达，RabbitMQ 使用确认机制，费者在处理完消息后发送确认给 RabbitMQ，未确认的消息会重新入队。</li><li><strong>高可用性</strong>：RabbitMQ 提供了集群模式，可以将多个 RabbitMQ 实例组成一个集群，以提高可用性和负载均衡。通过镜像队列，可以在多个节点上复制同一队列的内容，以防止单点故障。</li></ul><h2 id="3-RabbitMQ交换器有哪些">3.RabbitMQ交换器有哪些</h2><p>Direct Exchange（直连交换器）</p><p><strong>路由规则</strong>：Direct Exchange 会将消息路由到那些<strong>绑定键（Binding Key）与消息的路由键（Routing Key）完全匹配</strong>的队列。</p><p><strong>特点</strong>：点对点或一对一的精确路由。</p><p>比如：日志级别分发，私人消息等等。</p><p>Fanout Exchange（扇形交换器）</p><p><strong>路由规则</strong>：Fanout Exchange 会将接收到的所有消息<strong>广播</strong>到所有绑定到它的队列，无视消息的路由键和队列的绑定键。</p><p><strong>特点</strong>：发布/订阅模型，多播。</p><p>比如：系统广播通知，</p><p>Topic Exchange（主题交换器）</p><p><strong>路由规则</strong>：Topic Exchange 会根据消息的路由键和队列的绑定键的<strong>模式匹配</strong>（模糊匹配）将消息路由到队列。</p><ul><li>绑定键使用 <code>.</code> 分隔单词。</li><li><code>*</code> (星号) 匹配一个单词。</li><li><code>#</code> (井号) 匹配零个或多个单词。</li></ul><p><strong>特点</strong>：最强大的路由方式，实现复杂的发布/订阅模式。</p><p>比如：复杂日志订阅，一个大型分布式系统的日志收集与分析。不同的服务（如认证服务 <code>auth</code>、支付服务 <code>payment</code>、数据库服务 <code>db</code>）产生不同级别的日志。消费者可以根据自己感兴趣的日志类型（如所有严重错误、某个服务的所有日志、所有警告）进行订阅。</p><p>商品库存事件通知，电商平台中，针对不同品类商品的库存变动、价格更新、新品上架等事件进行通知。例如，库存部门只关心低库存预警，运营部门关心所有商品更新，而某个特定部门可能只关心电子产品的所有相关事件。</p><p>Headers Exchange（头部交换器）</p><p><strong>路由规则</strong>：Headers Exchange 不依赖于路由键，而是根据消息的**头部属性（Headers）**进行路由。队列与交换器绑定时，除了指定头部键值对，还需要指定一个 <code>x-match</code> 参数：</p><ul><li><code>x-match=all</code>：表示消息的所有头部属性必须与绑定时指定的头部属性完全匹配。</li><li><code>x-match=any</code>：表示消息的任意一个头部属性与绑定时指定的头部属性匹配即可。</li></ul><p><strong>特点</strong>：灵活性最高，但通常性能不如 Topic Exchange，且使用频率较低。</p><p>比如：多条件任务分发，任务调度系统，根据任务的优先级、类型、设备平台等多个维度进行复杂路由。例如，高优先级且关键的报警任务需要进入专门的处理队列，而来自移动设备的任务可以进入移动任务处理队列。</p><h2 id="4-说一说RabbitMQ中的AMQP">4.说一说RabbitMQ中的AMQP</h2><p><strong>AMQP</strong> 是一种<strong>开放的、通用的消息协议</strong>，它定义了客户端应用程序和消息中间件之间进行消息传递的方式。你可以把它想象成消息通信领域的“HTTP 协议”或“SQL 协议”。就像 HTTP 定义了浏览器和服务器如何通信，SQL 定义了应用程序和数据库如何通信一样，AMQP 定义了<strong>如何发送、存储和接收消息</strong>。</p><p><strong>生产者 (Producer)</strong>：发送消息的应用程序。</p><p><strong>消费者 (Consumer)</strong>：接收并处理消息的应用程序。</p><p><strong>消息 (Message)</strong>：在生产者和消费者之间传递的数据单元。消息包含：</p><ul><li><strong>有效载荷 (Payload)</strong>：实际的数据，例如 JSON、XML 或二进制数据。</li><li><strong>属性 (Properties)</strong>：关于消息的元数据，例如内容类型、编码、优先级、过期时间等。</li></ul><p><strong>连接 (Connection)</strong>：TCP/IP 连接，生产者/消费者通过它与 RabbitMQ 建立连接。</p><p><strong>信道 (Channel)</strong>：在连接内部建立的轻量级逻辑连接。在同一个连接中可以有多个信道，这样可以复用 TCP 连接，减少开销。大部分 AMQP 操作都是在信道上进行的。</p><p><strong>交换器 (Exchange)</strong>：消息的接收者。生产者将消息发送到交换器，而不是直接发送到队列。交换器根据<strong>路由规则</strong>将消息路由到一个或多个队列。这是 AMQP 灵活路由的核心。</p><ul><li>RabbitMQ 支持多种交换器类型：<code>Direct</code>、<code>Fanout</code>、<code>Topic</code>、<code>Headers</code>。</li></ul><p><strong>绑定 (Binding)</strong>：交换器和队列之间的规则，它告诉交换器如何根据消息的<strong>路由键 (Routing Key)</strong> 将消息路由到哪个队列。</p><p><strong>队列 (Queue)</strong>：存储消息的地方。消息在被消费者消费之前会暂时存储在队列中。</p><p><strong>路由键 (Routing Key)</strong>：生产者发送消息时携带的一个字符串，交换器根据它和绑定键进行匹配，决定消息的路由去向。</p><p><strong>绑定键 (Binding Key)</strong>：队列在绑定到交换器时设置的一个字符串，用于与消息的路由键进行匹配。</p><p><strong>确认机制 (Acknowledgements)</strong>：AMQP 支持消费者对消息进行确认（ACK），告知 RabbitMQ 消息已成功处理。如果消费者没有确认，RabbitMQ 会认为消息未被正确处理，可能会重新投递。这保证了消息的<strong>可靠投递</strong>。</p><p>流程：</p><p>生产者连接到 RabbitMQ 服务器，建立一个<strong>连接 (Connection)</strong>。</p><p>在连接上创建一个或多个<strong>信道 (Channel)</strong>。</p><p>声明一个<strong>交换器 (Exchange)</strong>（如果不存在）。</p><p>声明一个<strong>队列 (Queue)</strong>（如果不存在）。</p><p>通过一个<strong>绑定 (Binding)</strong> 将队列绑定到交换器，并指定<strong>绑定键 (Binding Key)</strong>。</p><p>生产者通过信道向交换器发布消息，消息包含<strong>路由键 (Routing Key)</strong> 和有效载荷。</p><p>交换器根据其类型和绑定规则，匹配消息的路由键和队列的绑定键，将消息路由到一个或多个队列。</p><p>消费者连接到 RabbitMQ 服务器，建立连接和信道。</p><p>消费者从队列中拉取或订阅消息。</p><p>消费者处理消息后，向 RabbitMQ 发送<strong>确认 (ACK)</strong>。</p><p>AMQP 的优点：</p><ul><li><strong>开放标准</strong>：不限于特定厂商，提供了互操作性。你可以用 Java 客户端向 RabbitMQ 发送消息，用 Python 客户端接收。</li><li><strong>灵活性</strong>：通过交换器和绑定机制，实现了非常灵活的消息路由。</li><li><strong>可靠性</strong>：支持消息持久化、消息确认、发布者确认等机制，确保消息不丢失。</li><li><strong>跨平台/语言</strong>：由于是协议标准，有多种语言的客户端库支持。</li></ul><h2 id="5-RabbitMQ是怎么解决消息幂等问题的">5.RabbitMQ是怎么解决消息幂等问题的</h2><p>实现 RabbitMQ 消息幂等性的核心思想是：为每条消息生成一个<strong>全局唯一标识符（Message ID）</strong>，并在消费者端维护一个<strong>已处理消息 ID 的记录</strong>。</p><p>跟kafka感觉差不多？？</p><p><strong>唯一ID：</strong></p><p>生产者是消息的源头，它有责任为每条消息生成一个全局唯一的 ID，并将其作为消息的元数据（通常是消息头）发送出去。</p><p><strong>UUID (Universally Unique Identifier)</strong>：最简单和常用的方法。生成一个随机的 128 位数字，冲突概率极低。</p><ul><li><strong>示例：</strong> <code>UUID.randomUUID().toString()</code></li></ul><p><strong>时间戳 + 机器/服务 ID + 计数器</strong>：这种方式可以<strong>保证 ID 的单调性</strong>（在一定程度上），方便排查问题，但实现略复杂。</p><ul><li><strong>示例：</strong> <code>System.currentTimeMillis() + &quot;-&quot; + serviceId + &quot;-&quot; + AtomicInteger.incrementAndGet()</code></li></ul><p><strong>业务唯一 ID</strong>：如果业务本身就存在一个唯一 ID（例如订单号、交易流水号），可以直接使用它作为消息 ID。这是最理想的情况，因为它天然与业务关联，易于追溯。</p><ul><li><strong>示例：</strong> 订单创建消息，直接使用 <code>orderId</code> 作为消息 ID。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessagePostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageProducer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String exchangeName, String routingKey, String messageBody, String businessId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">messageId</span> <span class="operator">=</span> <span class="string">&quot;业务唯一ID或UUID或自定义ID&quot;</span> + businessId; <span class="comment">// 例如： UUID.randomUUID().toString() + &quot;_&quot; + businessId;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">MessagePostProcessor</span> <span class="variable">messagePostProcessor</span> <span class="operator">=</span> message -&gt; &#123;</span><br><span class="line">            <span class="type">MessageProperties</span> <span class="variable">messageProperties</span> <span class="operator">=</span> message.getMessageProperties();</span><br><span class="line">            messageProperties.setHeader(<span class="string">&quot;x-message-id&quot;</span>, messageId); <span class="comment">// 将唯一 ID 添加到消息头</span></span><br><span class="line">            messageProperties.setCorrelationId(messageId); <span class="comment">// 也可以使用 correlationId 字段</span></span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, routingKey, messageBody, messagePostProcessor);</span><br><span class="line">        <span class="comment">// 生产者发送消息时，记录下 messageId，用于本地审计或后续追踪</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Producer sent message with ID: &quot;</span> + messageId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>消费者处理</strong></p><p>消费者是实现幂等性的核心环节。它需要<strong>维护一个已处理消息的 ID 存储</strong>，并在每次接收消息时进行判断。</p><p>从消息头中取出唯一 ID，并查询本地存储。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码：消费者处理逻辑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">messageId</span> <span class="operator">=</span> (String) message.getMessageProperties().getHeader(<span class="string">&quot;x-message-id&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (messageId == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果消息没有 ID，可能是非幂等消息，或者处理异常，需要根据业务决定如何处理</span></span><br><span class="line">        System.err.println(<span class="string">&quot;Received message without ID: &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line">        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isMessageProcessed(messageId)) &#123; <span class="comment">// 检查消息 ID 是否已存在于存储中</span></span><br><span class="line">        <span class="comment">// **如果消息 ID 已存在，直接丢弃该消息** (确认消息，不再重复处理)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Duplicate message received, ID: &quot;</span> + messageId + <span class="string">&quot;. Discarding.&quot;</span>);</span><br><span class="line">        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>); <span class="comment">// 确认消息，防止 RabbitMQ 重发</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// **如果消息 ID 不存在，则进行消息处理**</span></span><br><span class="line">        processMessageBusinessLogic(message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// **处理成功后，将消息 ID 存入存储**</span></span><br><span class="line">        saveProcessedMessageId(messageId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确认消息已成功处理，RabbitMQ 会将其从队列中移除</span></span><br><span class="line">        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Message ID: &quot;</span> + messageId + <span class="string">&quot; processed successfully.&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// 消息处理失败，不确认（或进行 NACK），让 RabbitMQ 重新投递或进入死信队列</span></span><br><span class="line">        <span class="comment">// 注意：这里是关键，如果处理失败，不能将 ID 存入幂等存储，否则下次重试时会被当成重复消息</span></span><br><span class="line">        System.err.println(<span class="string">&quot;Message ID: &quot;</span> + messageId + <span class="string">&quot; processing failed: &quot;</span> + e.getMessage());</span><br><span class="line">        <span class="comment">// channel.basicNack(message.getMessageProperties().getDeliveryTag(), false, true); // 重新入队</span></span><br><span class="line">        channel.basicReject(message.getMessageProperties().getDeliveryTag(), <span class="literal">true</span>); <span class="comment">// 拒绝并重新入队</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟检查消息ID是否已处理的方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isMessageProcessed</span><span class="params">(String messageId)</span> &#123;</span><br><span class="line">    <span class="comment">// 实际实现会查询 Redis 或数据库</span></span><br><span class="line">    <span class="keyword">return</span> IdempotentStorage.contains(messageId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟保存已处理消息ID的方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveProcessedMessageId</span><span class="params">(String messageId)</span> &#123;</span><br><span class="line">    <span class="comment">// 实际实现会将 messageId 存入 Redis 或数据库</span></span><br><span class="line">    IdempotentStorage.add(messageId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟业务处理逻辑</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processMessageBusinessLogic</span><span class="params">(Message message)</span> &#123;</span><br><span class="line">    <span class="comment">// ... 执行实际的业务逻辑，例如更新数据库、发送邮件等</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Processing business logic for message: &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line">    <span class="comment">// 模拟业务处理失败</span></span><br><span class="line">    <span class="comment">// if (Math.random() &lt; 0.2) &#123;</span></span><br><span class="line">    <span class="comment">//     throw new RuntimeException(&quot;Simulated business error&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>存储：</strong></p><p><strong>Redis</strong>：</p><ul><li><strong>优点</strong>：高性能、低延迟、支持过期时间（TTL）。非常适合作为缓存层，快速判断 ID 是否存在。</li><li><strong>缺点</strong>：内存存储，如果 Redis 宕机或重启，未持久化的数据会丢失（但 Redis 支持 AOF/RDB 持久化）。容量受限于内存。</li><li><strong>适用场景</strong>：绝大多数需要高性能幂等性的场景。</li></ul><p>可以使用 <strong>Set (集合)</strong> 或 <strong>String (字符串)</strong> 类型。</p><ul><li><strong>Set</strong>：<code>SADD processed_message_ids messageId</code>，<code>SISMEMBER processed_message_ids messageId</code>。</li><li><strong>String</strong>：<code>SET processed_message_id_</code><strong><code>messageId</code></strong> <code>1 EX timeout NX</code> （<code>key</code> 是 <code>messageId</code>，<code>value</code> 是任意占位符，<code>EX timeout</code> 设置过期时间，<code>NX</code> 保证原子性）。</li></ul><p><strong>过期时间 (TTL)</strong>：非常重要！消息 ID 不应永久存储，因为磁盘空间有限。设置一个合理的过期时间（例如 7 天、30 天，根据消息的生命周期和重复发送的可能性来定），让 Redis 自动清除过期 ID。</p><p><strong>容量</strong>：评估每天的消息量，确定存储这些 ID 需要的内存。如果 ID 数量巨大，可以考虑按天或按月创建不同的 Set/Key，或者使用 Redis Cluster 分片。</p><p><strong>关系型数据库 (MySQL, PostgreSQL)</strong>：</p><ul><li><strong>优点</strong>：数据持久化能力强，可靠性高，支持事务。</li><li><strong>缺点</strong>：性能相对 Redis 差，存在 I/O 瓶颈，并发能力有限。</li><li><strong>适用场景</strong>：对数据可靠性要求极高，且并发量不是特别巨大的场景，或者业务本身就强依赖数据库事务的场景。</li></ul><p><strong>查询</strong>：<code>SELECT COUNT(*) FROM processed_messages WHERE message_id = ? AND consumer_group = ?;</code></p><p><strong>插入</strong>：<code>INSERT INTO processed_messages (message_id, consumer_group, process_time) VALUES (?, ?, NOW());</code></p><p><strong>索引</strong>：必须在 <code>message_id</code> 或 <code>(message_id, consumer_group)</code> 上建立唯一索引，以保证 ID 的唯一性。</p><p><strong>清理</strong>：需要定期清理过期数据（例如通过定时任务删除 <code>process_time</code> 过早的记录）。</p><p><strong>分布式文件存储 (如 HDFS, S3)</strong>：</p><ul><li><strong>优点</strong>：容量巨大，成本低。</li><li><strong>缺点</strong>：查询延迟高，不适合实时判断。</li><li><strong>适用场景</strong>：极少数离线批处理或审计场景，不适合在线消息处理的幂等性判断。</li></ul><p><strong>异常处理：</strong></p><p>在“检查消息 ID 不存在 -&gt; 处理业务 -&gt; 记录消息 ID”这个流程中，如果业务处理失败，但消息 ID 已经存入存储，那么下次重试时就会被判断为重复消息而丢弃，导致消息丢失。因此，<strong>消息处理和消息 ID 存储必须是原子性的</strong>。</p><p><strong>数据库事务</strong>：</p><ul><li>如果业务处理和幂等性存储都在同一个数据库中，可以直接使用<strong>数据库事务</strong>。</li><li>将查询 ID、处理业务、插入 ID 放在同一个数据库事务中。</li><li>如果业务处理失败，事务回滚，消息 ID 也不会被记录。</li></ul><p><strong>Redis + 业务事务 (TCC/最终一致性)</strong>：</p><p>如果幂等性存储在 Redis，而业务处理涉及数据库或其他服务，则不能简单地用一个本地事务。</p><p><strong>方案一：先处理业务，后记录 ID (不推荐，可能出现业务成功但ID未记录)</strong></p><ul><li><code>try-catch</code> 捕获异常：如果业务处理失败，不记录 ID，不 ACK 消息，让 RabbitMQ 重试。</li><li><strong>问题</strong>：如果在业务处理成功后、记录 ID 之前服务崩溃，下次消息过来仍会被处理。</li></ul><p><strong>方案二：先记录 ID，再处理业务，异常时回滚 ID (复杂，但更可靠)</strong></p><ul><li><strong>两阶段提交 (Two-Phase Commit)</strong> 或 <strong>TCC (Try-Confirm-Cancel)</strong> 思想的简化版。</li><li>在 Redis 中先用 <code>SETNX</code> 尝试“预占”消息 ID，设置一个短的过期时间。</li><li>然后进行业务处理。</li><li>如果业务成功，则将 Redis 中的消息 ID 的过期时间设置为长期，并 ACK 消息。</li><li>如果业务失败，则删除 Redis 中的预占 ID，并 NACK 消息。</li><li><strong>问题</strong>：如果在业务成功后、设置过期时间为长期之前崩溃，这个 ID 可能会在短时间内过期，导致重复消费。</li></ul><p><strong>推荐方案 (结合消息确认机制)</strong>：</p><ul><li><strong>在消费消息后立即将消息 ID 存入 Redis，并设置一个相对短的过期时间（例如几分钟）。</strong></li><li><strong>异步执行实际的业务逻辑。</strong></li><li><strong>如果业务逻辑成功，再将 Redis 中的消息 ID 的过期时间延长至长期（或直接更新）。</strong></li><li><strong>最终成功后才 ACK 消息。</strong></li><li><strong>关键</strong>：如果业务处理失败或超时，消息 ID 在 Redis 中会过期，下次 RabbitMQ 重投消息时，该 ID 不存在，从而再次进入处理流程。</li><li><strong>死信队列</strong>：如果多次重试仍失败，可以将消息路由到死信队列，人工介入。</li></ul><p>更强的原子性：</p><p><strong>更强的原子性（两阶段确认）</strong>：</p><ol><li><strong>第一阶段</strong>：消费者收到消息后，在<strong>本地事务</strong>（如果业务和幂等存储在同一个数据库）或<strong>分布式事务</strong>（如 TCC）中，先进行幂等性判断并记录 ID，然后执行业务逻辑。</li><li><strong>第二阶段</strong>：只有当整个事务提交成功后，才向 RabbitMQ 发送 <code>basicAck</code>。如果事务失败，则不发送 <code>basicAck</code>，让 RabbitMQ 重新投递消息。 这种方式确保了消息处理和幂等性记录的<strong>最终一致性</strong>，因为只要消息 ID 未成功记录，或者业务未成功执行，RabbitMQ 就会重试。</li></ol><h2 id="6-RabbitMQ上的一个queue中存放-message是否有数量限制">6.RabbitMQ上的一个queue中存放 message是否有数量限制</h2><p>是的有限制，是多种因素构成的</p><p>物理因素：内存和磁盘</p><p><strong>内存</strong></p><p>RabbitMQ 默认会将队列中的一部分消息保存在内存中，以提高消费性能。</p><p>当内存使用达到<strong>高水位阈值 (high water mark)</strong> 时（默认是 RabbitMQ 节点可用 RAM 的 40% 或 0.4 倍，可以通过 <code>vm_memory_high_watermark.relative</code> 或 <code>vm_memory_high_watermark.absolute</code> 配置），RabbitMQ 会触发内存警报，并<strong>阻塞生产者</strong>，阻止其继续发送消息，直到内存使用率下降。</p><p>内存中存储的主要是消息的<strong>元数据和最近发送/未消费的消息体</strong>。</p><p><strong>硬盘</strong></p><p>当队列中的消息数量过多，或者内存压力过大时，RabbitMQ 会将内存中的消息<strong>分页（page out）到磁盘上，以释放内存。这就是所谓的惰性队列 (Lazy Queues)</strong> 的工作原理，或对于经典队列在内存压力下进行的分页。</p><p>磁盘空间是另一个限制因素。如果磁盘空间不足，RabbitMQ 也会触发<strong>磁盘警报</strong>（默认剩余空间低于 5GB 或总容量的 80% 会触发警报），同样会阻塞生产者。</p><p>消息持久化（durable message）会直接写入磁盘，而非持久化消息也会在内存不足时被写到磁盘。</p><p><strong>配置</strong></p><p>多种参数来<strong>主动限制队列中消息的数量或总大小</strong>，可以防止队列溢出，防止单个队列无限增长，导致整个 Broker 资源耗尽</p><p><strong><code>x-max-length</code> (最大消息数量)</strong>：限制队列中可以存储的<strong>最大消息数量</strong>。当达到此限制时，队列会根据其溢出策略丢弃最老的消息（默认行为）。</p><p><strong><code>x-max-length-bytes</code> (最大消息总大小)</strong>：限制队列中可以存储的<strong>消息总字节数</strong>。当达到此限制时，同样会根据溢出策略丢弃最老的消息。</p><p>如果同时设置了 <code>x-max-length</code> 和 <code>x-max-length-bytes</code>，则<strong>两者都适用</strong>，哪个限制先达到就先强制执行。</p><p><strong><code>x-overflow</code> (溢出策略)</strong>：当队列达到 <code>x-max-length</code> 或 <code>x-max-length-bytes</code> 限制时，如何处理新消息：</p><ul><li><strong><code>drop-head</code> (默认)</strong>：丢弃队列头部（最老）的消息。</li><li><strong><code>reject-publish</code></strong>：拒绝生产者发布的新消息。生产者会收到 <code>basic.nack</code> 或通道阻塞。</li><li><strong><code>reject-publish-dlx</code></strong>：拒绝生产者发布的新消息，并将这些被拒绝的消息路由到死信交换器 (DLX)。</li></ul><p><strong><code>message-ttl</code> (消息 TTL / 过期时间)</strong>：可以为队列中的所有消息设置默认的过期时间。超过此时间，消息将自动从队列中删除。这可以间接限制消息的数量，尤其对于时效性强的消息。</p><p><strong>性能</strong></p><p><strong>消费延迟增加</strong>：大量消息堆积在队列中，消费者需要更长时间才能处理到最新的消息。</p><p><strong>内存交换到磁盘 (Paging out) 增加 I/O 负担</strong>：当消息从内存分页到磁盘时，会增加磁盘 I/O，降低整体吞吐量。</p><p><strong>集群同步开销</strong>：在镜像队列（Mirrored Queues）或仲裁队列（Quorum Queues）中，大量消息的同步会增加网络和 CPU 开销。</p><p><strong>管理界面响应变慢</strong>：当队列中有数百万甚至上亿条消息时，管理界面查询队列状态会非常缓慢。</p><p><strong>Broker 重启慢</strong>：如果 RabbitMQ Broker 异常重启，需要从磁盘加载和恢复大量的消息索引，导致启动时间变长。</p><h2 id="7-Rabbitmq的高可用">7.Rabbitmq的高可用</h2><p>RabbitMQ 有三种模式：单机模式、普通集群模式、镜像集群模式。</p><p>普通集群模式，意思就是在多台机器上启动多个 RabbitMQ 实例，每台机器启动一个。你<strong>创建的 queue，只会放在一个 RabbitMQ 实例上</strong>，但是每个实例都同步 queue 的元数据（元数据可以认为是 queue 的一些配置信息，通过元数据，可以找到 queue 所在实例）。你消费的时候，实际上如果连接到了另外一个实例，那么那个实例会从 queue 所在实例上拉取数据过来。这个模式是没有高可用的</p><p>镜像集群模式（高可用性）</p><p>这种模式，才是所谓的 RabbitMQ 的高可用模式。跟普通集群模式不一样的是，在镜像集群模式下，你创建的 queue，无论是元数据还是 queue 里的消息都会<strong>存在于多个实例上</strong>，就是说，每个 RabbitMQ 节点都有这个 queue 的一个<strong>完整镜像</strong>，包含 queue 的全部数据的意思。然后每次你写消息到 queue 的时候，都会自动把<strong>消息同步</strong>到多个实例的 queue 上。</p><p>这个策略是<strong>镜像集群模式的策略</strong>，指定的时候是可以要求数据同步到所有节点的，也可以要求同步到指定数量的节点，再次创建 queue 的时候，应用这个策略，就会自动将数据同步到其他的节点上去了。</p><p>好处在于，你任何一个机器宕机了，没事儿，其它机器（节点）还包含了这个 queue 的完整数据，别的 consumer 都可以到其它节点上去消费数据。坏处在于，第一，这个性能开销也太大了吧，消息需要同步到所有机器上，导致网络带宽压力和消耗很重！第二，这么玩儿，不是分布式的，就<strong>没有扩展性可言</strong>了，如果某个 queue 负载很重，你加机器，新增的机器也包含了这个 queue 的所有数据，并<strong>没有办法线性扩展</strong>你的 queue。你想，如果这个 queue 的数据量很大，大到这个机器上的容量无法容纳了，此时该怎么办呢？</p><p>解决办法：</p><p>1.选择合适的同步策略，RabbitMQ允许你配置消息同步的节点数量。你可以选择将消息同步到所有节点（<code>ha-mode: all</code>）以获得最高的可用性，或者同步到指定的节点，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ha-mode: exactly`, `ha-sync-batch-size</span><br></pre></td></tr></table></figure><p>根据性能来选择。</p><p>2.限制单个队列的大小,避免在高可用队列中存储过多的消息。可以设置队列的最大长度或 TTL (time-to-live)，以防止队列无限制增长。 可以考虑将消息归档到外部存储系统。</p><p>3.使用队列分片，对于单个队列数据量过大的情况，可以将队列拆分成多个分片，每个分片分布在不同的节点上。  RabbitMQ 本身并不原生支持队列分片，但你可以通过客户端的逻辑来实现。  例如，可以根据消息的某个属性（如用户ID）进行哈希，然后将消息发送到对应的分片队列。</p><p>实现队列分片：</p><ul><li>生产者根据某种算法（通常是哈希）将消息路由到不同的队列。 例如，使用 <code>messageKey.hashCode() % numOfShards</code> 来决定消息应该发往哪个分片。</li><li><strong>消费者端合并：</strong> 消费者需要同时订阅多个分片队列，并将接收到的消息按照某种规则进行合并和处理。</li><li>可以结合批量发送来解决，但是消息的顺序是不能保证的</li></ul><p>4.<strong>Federation/Shovel 插件：</strong> 这两个插件允许你将消息从一个 RabbitMQ 集群桥接到另一个集群。 这可以用来实现跨数据中心的消息复制和负载均衡。 <code>Federation</code> 适用于更松耦合的场景，而 <code>Shovel</code> 则适用于更紧密耦合的场景。</p><p>5.<strong>Quorum Queues:</strong> RabbitMQ 3.8 引入Quorum Queues，它基于Raft一致性算法，提供了更强的一致性和更高的可靠性，同时也具有比镜像队列更好的性能。 但是它并非完全替代镜像队列，选择哪种方案需要考量具体的应用场景和需求。</p><h2 id="8-rabbit解决消息丢失问题">8.rabbit解决消息丢失问题</h2><p>生产者：</p><p>RabbitMQ 提供的事务功能，就是生产者<strong>发送数据之前</strong>开启 RabbitMQ 事务 <code>channel.txSelect()</code> ，然后发送消息，如果消息没有成功被 RabbitMQ 接收到，那么生产者会收到异常报错，此时就可以回滚事务 <code>channel.txRollback()</code> ，然后重试发送消息；如果收到了消息，那么可以提交事务 <code>channel.txCommit()</code> 。</p><p>但是因为rabbitmq是同步的，然后集群备份下来。性能比较低。</p><p>我们可以开启confirm模式：</p><p>在生产者那里设置开启 <code>confirm</code> 模式之后，你每次写的消息都会分配一个唯一的 id，然后如果写入了 RabbitMQ 中，RabbitMQ 会给你回传一个 <code>ack</code> 消息，告诉你说这个消息 ok 了。如果 RabbitMQ 没能处理这个消息，会回调你的一个 <code>nack</code> 接口，告诉你这个消息接收失败，你可以重试。而且你可以结合这个机制自己在内存里维护每个消息 id 的状态，如果超过一定时间还没接收到这个消息的回调，那么你可以重发。</p><p>已经在 transaction 事务模式的 channel 是不能再设置成 confirm 模式的，即这两种模式是不能共存的。</p><p>**普通confirm:**每发送一条消息后，调用 <code>waitForConfirms()</code> 方法，等待服务器端 confirm，如果服务端返回 false 或者在一段时间内都没返回，客户端可以进行消息重发。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">channel.basicPublish(ConfirmConfig.exchangeName, ConfirmConfig.routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, ConfirmConfig.msg_10B.getBytes());</span><br><span class="line"><span class="keyword">if</span> (!channel.waitForConfirms()) &#123;</span><br><span class="line">    <span class="comment">// 消息发送失败</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>批量 confirm 模式</strong>：每发送一批消息后，调用 <code>waitForConfirms()</code> 方法，等待服务端 confirm。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">channel.confirmSelect();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; batchCount; ++i) &#123;</span><br><span class="line">    channel.basicPublish(ConfirmConfig.exchangeName, ConfirmConfig.routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, ConfirmConfig.msg_10B.getBytes());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!channel.waitForConfirms()) &#123;</span><br><span class="line">    <span class="comment">// 消息发送失败</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>异步 confirm 模式</strong>：提供一个回调方法，服务端 confirm 了一条或者多条消息后客户端会回调这个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">SortedSet&lt;Long&gt; confirmSet = Collections.synchronizedSortedSet(<span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;Long&gt;());</span><br><span class="line">channel.confirmSelect();</span><br><span class="line">channel.addConfirmListener(<span class="keyword">new</span> <span class="title class_">ConfirmListener</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleAck</span><span class="params">(<span class="type">long</span> deliveryTag, <span class="type">boolean</span> multiple)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (multiple) &#123;</span><br><span class="line">            confirmSet.headSet(deliveryTag + <span class="number">1</span>).clear();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            confirmSet.remove(deliveryTag);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleNack</span><span class="params">(<span class="type">long</span> deliveryTag, <span class="type">boolean</span> multiple)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Nack, SeqNo: &quot;</span> + deliveryTag + <span class="string">&quot;, multiple: &quot;</span> + multiple);</span><br><span class="line">        <span class="keyword">if</span> (multiple) &#123;</span><br><span class="line">            confirmSet.headSet(deliveryTag + <span class="number">1</span>).clear();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            confirmSet.remove(deliveryTag);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">nextSeqNo</span> <span class="operator">=</span> channel.getNextPublishSeqNo();</span><br><span class="line">    channel.basicPublish(ConfirmConfig.exchangeName, ConfirmConfig.routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, ConfirmConfig.msg_10B.getBytes());</span><br><span class="line">    confirmSet.add(nextSeqNo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rabbit自己丢了数据：</p><p>这个你必须<strong>开启 RabbitMQ 的持久化</strong>，就是消息写入之后会持久化到磁盘，哪怕是 RabbitMQ 自己挂了，<strong>恢复之后会自动读取之前存储的数据</strong>，一般数据不会丢。除非极其罕见的是，RabbitMQ 还没持久化，自己就挂了，<strong>可能导致少量数据丢失</strong>，但是这个概率较小。</p><ul><li>创建 queue 的时候将其设置为持久化。这样就可以保证 RabbitMQ 持久化 queue 的元数据，但是它是不会持久化 queue 里的数据的。</li><li>第二个是发送消息的时候将消息的 <code>deliveryMode</code> 设置为 2。就是将消息设置为持久化的，此时 RabbitMQ 就会将消息持久化到磁盘上去。</li></ul><p>需要同时设置这两个，才能成功开启</p><p>消费者弄丢了数据：</p><p>主要是因为你消费的时候，<strong>刚消费到，还没处理，结果进程挂了</strong>，比如重启了，那么就尴尬了，RabbitMQ 认为你都消费了，这数据就丢了。</p><p>这个时候得用 RabbitMQ 提供的 <code>ack</code> 机制，简单来说，就是你必须关闭 RabbitMQ 的自动 <code>ack</code> ，可以通过一个 api 来调用就行，然后每次你自己代码里确保处理完的时候，再在程序里 <code>ack</code> 一把。这样的话，如果你还没处理完，不就没有 <code>ack</code> 了？那 RabbitMQ 就认为你还没处理完，这个时候 RabbitMQ 会把这个消费分配给别的 consumer 去处理，消息是不会丢的。</p><p>为了保证消息从队列中可靠地到达消费者，RabbitMQ 提供了消息确认机制。消费者在声明队列时，<strong>可以指定 noAck 参数，当 noAck=false</strong>，RabbitMQ 会等待消费者显式发回 ack 信号后，才从内存（和磁盘，如果是持久化消息）中移去消息。否则，一旦消息被消费者消费，RabbitMQ 会在队列中立即删除它。</p><h2 id="9-RabbitMQ保证消息的顺序">9.RabbitMQ保证消息的顺序</h2><p>拆分多个 queue，每个 queue 一个 consumer，就是多一些 queue 而已，确实是麻烦点，这样也会造成吞吐量下降，可以在消费者内部采用多线程的方式取消费。</p><p>或者就一个 queue 但是对应一个 consumer，然后这个 consumer 内部用内存队列做排队，然后分发给底层不同的 worker 来处理。</p><p>注意，这里消费者不直接消费消息，而是将消息根据关键值（比如：订单 id）进行哈希，哈希值相同的消息保存到相同的内存队列里。也就是说，需要保证顺序的消息存到了相同的内存队列，然后由一个唯一的 worker 去处理。</p>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/">技术栈</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/%E9%9D%A2%E8%AF%95/">面试</category>
      
      <category domain="https://blog.tokenlen.top/tags/rocketmq/">rocketmq</category>
      
      
      <comments>https://blog.tokenlen.top/2025/06/24/new-stack/MQ1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://blog.tokenlen.top/2025/06/22/new-stack/docker/</link>
      <guid>https://blog.tokenlen.top/2025/06/22/new-stack/docker/</guid>
      <pubDate>Sat, 21 Jun 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1&gt;困难现状&lt;/h1&gt;
&lt;p&gt;软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？&lt;/p&gt;
&lt;p&gt;用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1>困难现状</h1><p>软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？</p><p>用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。</p><p>如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：“它在我的机器可以跑了”（It works on my machine），言下之意就是，其他机器很可能跑不了。</p><hr><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。</p><p>但是会有以下的问题：</p><p><strong>（1）资源占用多</strong></p><p>虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。</p><p><strong>（2）冗余步骤多</strong></p><p>虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。</p><p><strong>（3）启动慢</strong></p><p>启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。</p><hr><h1>docker</h1><p>**Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。**它是目前最流行的 Linux 容器解决方案。</p><p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p><p>总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p><p>Docker 的主要用途，目前有三大类。</p><p>**（1）提供一次性的环境。**比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。</p><p>**（2）提供弹性的云服务。**因为 Docker 容器可以随开随关，很适合动态扩容和缩容。</p><p>**（3）组建微服务架构。**通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</p><p>**Docker 把应用程序及其依赖，打包在 image 文件里面。**只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p><p>image 是二进制文件。实际开发中，<strong>一个 image 文件往往通过继承另一个 image 文件</strong>，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 列出本机的所有 image 文件。</span><br><span class="line">$ docker image ls</span><br><span class="line"></span><br><span class="line"># 删除 image 文件</span><br><span class="line">$ docker image rm [imageName]</span><br></pre></td></tr></table></figure><p>image 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。</p><p>为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库 <a href="https://hub.docker.com/">Docker Hub</a> 是最重要、最常用的 image 仓库。此外，出售自己制作的 image 文件也是可以的。</p><h2 id="实例">实例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image pull library/hello-world</span><br></pre></td></tr></table></figure><p>上面代码中，<code>docker image pull</code>是抓取 image 文件的命令。<code>library/hello-world</code>是 image 文件在仓库里面的位置，其中<code>library</code>是 image 文件所在的组，<code>hello-world</code>是 image 文件的名字。</p><p>由于 Docker 官方提供的 image 文件，都放在<a href="https://hub.docker.com/r/library/"><code>library</code></a>组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image pull hello-world</span><br></pre></td></tr></table></figure></blockquote><p>抓取成功以后，就可以在本机看到这个 image 文件了。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image <span class="built_in">ls</span></span><br></pre></td></tr></table></figure></blockquote><p>现在，运行这个 image 文件。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container run hello-world</span><br></pre></td></tr></table></figure></blockquote><p><code>ocker container run</code>命令会从 image 文件，生成一个正在运行的容器实例。</p><p>注意，<code>docker container run</code>命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的<code>docker image pull</code>命令并不是必需的步骤。</p><p>对于那些不会自动终止的容器，必须使用<a href="https://docs.docker.com/engine/reference/commandline/container_kill/"><code>docker container kill</code></a> 命令手动终止。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container <span class="built_in">kill</span> [containID]</span><br></pre></td></tr></table></figure><h2 id="容器文件">容器文件</h2><p>**image 文件生成的容器实例，本身也是一个文件，称为容器文件。**也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 列出本机正在运行的容器</span><br><span class="line">$ docker container ls</span><br><span class="line"></span><br><span class="line"># 列出本机所有容器，包括终止运行的容器</span><br><span class="line">$ docker container ls --all</span><br></pre></td></tr></table></figure><p>上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的<code>docker container kill</code>命令。</p><h2 id="Dockerfile">Dockerfile</h2><p>首先，在项目的根目录下，新建一个文本文件<code>.dockerignore</code>，写入下面的<a href="https://github.com/ruanyf/koa-demos/blob/master/.dockerignore">内容</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.git</span><br><span class="line">node_modules</span><br><span class="line">npm-debug.log</span><br></pre></td></tr></table></figure><p>上面代码表示，这三个路径要排除，不要打包进入 image 文件。如果你没有路径要排除，这个文件可以不新建。</p><p>然后，在项目的根目录下，新建一个文本文件 Dockerfile，写入下面的<a href="https://github.com/ruanyf/koa-demos/blob/master/Dockerfile">内容</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM node:8.4</span><br><span class="line">COPY . /app</span><br><span class="line">WORKDIR /app</span><br><span class="line">RUN npm install --registry=https://registry.npm.taobao.org</span><br><span class="line">EXPOSE 3000</span><br></pre></td></tr></table></figure><ul><li><code>FROM node:8.4</code>：该 image 文件继承官方的 node image，冒号表示标签，这里标签是<code>8.4</code>，即8.4版本的 node。</li><li><code>COPY . /app</code>：将当前目录下的所有文件（除了<code>.dockerignore</code>排除的路径），都拷贝进入 image 文件的<code>/app</code>目录。</li><li><code>WORKDIR /app</code>：指定接下来的工作路径为<code>/app</code>。</li><li><code>RUN npm install</code>：在<code>/app</code>目录下，运行<code>npm install</code>命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。</li><li><code>EXPOSE 3000</code>：将容器 3000 端口暴露出来， 允许外部连接这个端口。</li></ul><p>有了 Dockerfile 文件以后，就可以使用<code>docker image build</code>命令创建 image 文件了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image build -t koa-demo .</span><br><span class="line"># 或者</span><br><span class="line">$ docker image build -t koa-demo:0.0.1 .</span><br></pre></td></tr></table></figure><p>上面代码中，<code>-t</code>参数用来指定 image 文件的名字，后面还可以用冒号指定标签。如果不指定，默认的标签就是<code>latest</code>。最后的那个点表示 Dockerfile 文件所在的路径，上例是当前路径，所以是一个点。</p><p>如果运行成功，就可以看到新生成的 image 文件<code>koa-demo</code>了。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image <span class="built_in">ls</span></span><br></pre></td></tr></table></figure></blockquote><p><code>docker container run</code>命令会从 image 文件生成容器。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker container run -p 8000:3000 -it koa-demo /bin/bash</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ docker container run -p 8000:3000 -it koa-demo:0.0.1 /bin/bash</span><br></pre></td></tr></table></figure></blockquote><p>上面命令的各个参数含义如下：</p><blockquote><ul><li><code>-p</code>参数：容器的 3000 端口映射到本机的 8000 端口。</li><li><code>-it</code>参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。</li><li><code>koa-demo:0.0.1</code>：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。</li><li><code>/bin/bash</code>：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。</li></ul></blockquote><p>如果一切正常，运行上面的命令以后，就会返回一个命令行提示符。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@66d80f4aaf1e:/app<span class="comment">#</span></span><br></pre></td></tr></table></figure></blockquote><p>这表示你已经在容器里面了，返回的提示符就是容器内部的 Shell 提示符。执行下面的命令。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@66d80f4aaf1e:/app<span class="comment"># node demos/01.js</span></span><br></pre></td></tr></table></figure></blockquote><p>这时，Koa 框架已经运行起来了。打开本机的浏览器，访问 <a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a>，网页显示&quot;Not Found&quot;，这是因为这个 <a href="https://github.com/ruanyf/koa-demos/blob/master/demos/01.js">demo</a> 没有写路由。</p><p>这个例子中，Node 进程运行在 Docker 容器的虚拟环境里面，进程接触到的文件系统和网络接口都是虚拟的，与本机的文件系统和网络接口是隔离的，<strong>因此需要定义容器与物理机的端口映射（map）。</strong></p><p>现在，在容器的命令行，按下 Ctrl + c 停止 Node 进程，然后按下 Ctrl + d （或者输入 exit）退出容器。此外，也可以用<code>docker container kill</code>终止容器运行。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在本机的另一个终端窗口，查出容器的 ID</span></span><br><span class="line">$ docker container <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止指定的容器运行</span></span><br><span class="line">$ docker container <span class="built_in">kill</span> [containerID]</span><br></pre></td></tr></table></figure></blockquote><p>容器停止运行之后，并不会消失，用下面的命令删除容器文件。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查出容器的 ID</span></span><br><span class="line">$ docker container <span class="built_in">ls</span> --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的容器文件</span></span><br><span class="line">$ docker container <span class="built_in">rm</span> [containerID]</span><br></pre></td></tr></table></figure></blockquote><p>也可以使用<code>docker container run</code>命令的<code>--rm</code>参数，在容器终止运行后自动删除容器文件。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container run --<span class="built_in">rm</span> -p 8000:3000 -it koa-demo /bin/bash</span><br></pre></td></tr></table></figure></blockquote><p>cmd:</p><p>容器启动以后，需要手动输入命令<code>node demos/01.js</code>。我们可以把这个命令写在 Dockerfile 里面，这样容器启动以后，这个命令就已经执行了，不用再手动输入了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM node:8.4</span><br><span class="line">COPY . /app</span><br><span class="line">WORKDIR /app</span><br><span class="line">RUN npm install --registry=https://registry.npm.taobao.org</span><br><span class="line">EXPOSE 3000</span><br><span class="line">CMD node demos/01.js</span><br></pre></td></tr></table></figure><p>上面的 Dockerfile 里面，多了最后一行<code>CMD node demos/01.js</code>，它表示容器启动后自动执行<code>node demos/01.js</code>。</p><p>你可能会问，<code>RUN</code>命令与<code>CMD</code>命令的区别在哪里？简单说，<code>RUN</code>命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件；<code>CMD</code>命令则是在容器启动后执行。另外，一个 Dockerfile 可以包含多个<code>RUN</code>命令，但是只能有一个<code>CMD</code>命令。</p><p>注意，指定了<code>CMD</code>命令以后，<code>docker container run</code>命令就不能附加命令了（比如前面的<code>/bin/bash</code>），否则它会覆盖<code>CMD</code>命令。现在，启动容器可以使用下面的命令。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container run --<span class="built_in">rm</span> -p 8000:3000 -it koa-demo:0.0.1</span><br></pre></td></tr></table></figure></blockquote><h2 id="命令">命令</h2><p><strong>docker container start</strong></p><p>前面的<code>docker container run</code>命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。如果希望重复使用容器，就要使用<code>docker container start</code>命令，它用来启动已经生成、已经停止运行的容器文件。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container start [containerID]</span><br></pre></td></tr></table></figure></blockquote><p><strong>docker container stop</strong></p><p>前面的<code>docker container kill</code>命令终止容器运行，相当于向容器里面的主进程发出 SIGKILL 信号。而<code>docker container stop</code>命令也是用来终止容器运行，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container stop [containerID]</span><br></pre></td></tr></table></figure></blockquote><p>这两个信号的差别是，应用程序收到 SIGTERM 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号。如果收到 SIGKILL 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。</p><p>stop更像是一个建议，而kill是强制性的</p><p><strong>docker container logs</strong></p><p><code>docker container logs</code>命令用来查看 docker 容器的输出，即容器里面 Shell 的标准输出。如果<code>docker run</code>命令运行容器的时候，没有使用<code>-it</code>参数，就要用这个命令查看输出。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container logs [containerID]</span><br></pre></td></tr></table></figure></blockquote><p><strong>docker container exec</strong></p><p><code>docker container exec</code>命令用于进入一个正在运行的 docker 容器。如果<code>docker run</code>命令运行容器的时候，没有使用<code>-it</code>参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 Shell 执行命令了。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container <span class="built_in">exec</span> -it [containerID] /bin/bash</span><br></pre></td></tr></table></figure></blockquote><p><strong>docker container cp</strong></p><p><code>docker container cp</code>命令用于从正在运行的 Docker 容器里面，将文件拷贝到本机。下面是拷贝到当前目录的写法。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container <span class="built_in">cp</span> [containID]:[/path/to/file] .</span><br></pre></td></tr></table></figure></blockquote><h1>微服务</h1><h2 id="自建服务-1">自建服务-1</h2><p>首先，新建一个工作目录，并进入该目录。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> docker-demo &amp;&amp; <span class="built_in">cd</span> docker-demo</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker container run \</span><br><span class="line">  --rm \</span><br><span class="line">  --name wordpress \</span><br><span class="line">  --volume &quot;$PWD/&quot;:/var/www/html \</span><br><span class="line">  php:5.6-apache</span><br></pre></td></tr></table></figure><p>上面的命令基于<code>php</code>的 image 文件新建一个容器，并且运行该容器。<code>php</code>的标签是<code>5.6-apache</code>，说明装的是 PHP 5.6，并且自带 Apache 服务器。该命令的三个参数含义如下。</p><ul><li><code>--rm</code>：停止运行后，自动删除容器文件。</li><li><code>--name wordpress</code>：容器的名字叫做<code>wordpress</code>。</li><li><code>--volume &quot;$PWD/&quot;:/var/www/html</code>：将当前目录（<code>$PWD</code>）映射到容器的<code>/var/www/html</code>（Apache 对外访问的默认目录）。因此，<strong>当前目录的任何修改，都会反映到容器里面，进而被外部访问到。</strong></li></ul><p>安装mysql:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ docker container run \</span><br><span class="line">  -d \</span><br><span class="line">  --rm \</span><br><span class="line">  --name wordpressdb \</span><br><span class="line">  --env MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">  --env MYSQL_DATABASE=wordpress \</span><br><span class="line">  mysql:5.7</span><br></pre></td></tr></table></figure><ul><li><code>-d</code>：容器启动后，在后台运行。</li><li><code>--rm</code>：容器终止运行后，自动删除容器文件。</li><li><code>--name wordpressdb</code>：容器的名字叫做<code>wordpressdb</code></li><li><code>--env MYSQL_ROOT_PASSWORD=123456</code>：向容器进程传入一个环境变量<code>MYSQL_ROOT_PASSWORD</code>，该变量会被用作 MySQL 的根密码。</li><li><code>--env MYSQL_DATABASE=wordpress</code>：向容器进程传入一个环境变量<code>MYSQL_DATABASE</code>，容器里面的 MySQL 会根据该变量创建一个同名数据库（本例是<code>WordPress</code>）。</li></ul><p>这样把mysql和php连接起来：</p><p>在<code>docker-demo</code>目录里面，新建一个<code>Dockerfile</code>文件，写入下面的内容。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM php:5.6-apache</span><br><span class="line">RUN docker-php-ext-install mysqli</span><br><span class="line">CMD apache2-foreground</span><br></pre></td></tr></table></figure></blockquote><p>上面代码的意思，就是在原来 PHP 的 image 基础上，安装<code>mysqli</code>的扩展。然后，启动 Apache。</p><p>基于这个 Dockerfile 文件，新建一个名为<code>phpwithmysql</code>的 image 文件。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t phpwithmysql .</span><br></pre></td></tr></table></figure></blockquote><p>现在基于 phpwithmysql image，重新新建一个 WordPress 容器。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker container run \</span><br><span class="line">  --<span class="built_in">rm</span> \</span><br><span class="line">  --name wordpress \</span><br><span class="line">  --volume <span class="string">&quot;<span class="variable">$PWD</span>/&quot;</span>:/var/www/html \</span><br><span class="line">  --<span class="built_in">link</span> wordpressdb:mysql \</span><br><span class="line">  phpwithmysql</span><br></pre></td></tr></table></figure></blockquote><p>跟上一次相比，上面的命令多了一个参数<code>--link wordpressdb:mysql</code>，表示 WordPress 容器要连到<code>wordpressdb</code>容器，冒号表示该容器的别名是<code>mysql</code>。</p><p>这时还要改一下<code>wordpress</code>目录的权限，让容器可以将配置信息写入这个目录（容器内部写入的<code>/var/www/html</code>目录，会映射到这个目录）。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> -R 777 wordpress</span><br></pre></td></tr></table></figure></blockquote><p>接着，回到浏览器的<code>http://172.17.0.2/wordpress</code>页面，点击&quot;现在就开始！&quot;按钮，开始安装。</p><p>然后在界面里面输入用户名和密码</p><h2 id="自建服务-2">自建服务-2</h2><p>首先，新建并启动 MySQL 容器。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker container run \</span><br><span class="line">  -d \</span><br><span class="line">  --<span class="built_in">rm</span> \</span><br><span class="line">  --name wordpressdb \</span><br><span class="line">  --<span class="built_in">env</span> MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">  --<span class="built_in">env</span> MYSQL_DATABASE=wordpress \</span><br><span class="line">  mysql:5.7</span><br></pre></td></tr></table></figure></blockquote><p>然后，基于官方的 WordPress image，新建并启动 WordPress 容器。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker container run \</span><br><span class="line">  -d \</span><br><span class="line">  --<span class="built_in">rm</span> \</span><br><span class="line">  --name wordpress \</span><br><span class="line">  --<span class="built_in">env</span> WORDPRESS_DB_PASSWORD=123456 \</span><br><span class="line">  --<span class="built_in">link</span> wordpressdb:mysql \</span><br><span class="line">  wordpress</span><br></pre></td></tr></table></figure></blockquote><p>上面命令中，各个参数的含义前面都解释过了，其中环境变量<code>WORDPRESS_DB_PASSWORD</code>是 MySQL 容器的根密码。</p><p>上面命令指定<code>wordpress</code>容器在后台运行，导致前台看不见输出，使用下面的命令查出<code>wordpress</code>容器的 IP 地址。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container inspect wordpress</span><br></pre></td></tr></table></figure></blockquote><p>上面命令运行以后，会输出很多内容，找到<code>IPAddress</code>字段即可。我的机器返回的 IP 地址是<code>172.17.0.3</code>。</p><p>浏览器访问<code>172.17.0.3</code>，就会看到 WordPress 的安装提示。</p><p>官方 WordPress 容器的安装就已经成功了。但是，这种方法有两个很不方便的地方。</p><blockquote><ul><li>每次新建容器，返回的 IP 地址不能保证相同，导致要更换 IP 地址访问 WordPress。</li><li>WordPress 安装在容器里面，本地无法修改文件。</li></ul></blockquote><p>使用下面的命令新建并启动 WordPress 容器。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker container run \</span><br><span class="line"> -d \</span><br><span class="line"> -p 127.0.0.2:8080:80 \</span><br><span class="line"> --<span class="built_in">rm</span> \</span><br><span class="line"> --name wordpress \</span><br><span class="line"> --<span class="built_in">env</span> WORDPRESS_DB_PASSWORD=123456 \</span><br><span class="line"> --<span class="built_in">link</span> wordpressdb:mysql \</span><br><span class="line"> --volume <span class="string">&quot;<span class="variable">$PWD</span>/wordpress&quot;</span>:/var/www/html \</span><br><span class="line"> wordpress</span><br></pre></td></tr></table></figure></blockquote><p>上面的命令跟前面相比，命令行参数只多出了两个。</p><blockquote><ul><li><code>-p 127.0.0.2:8080:80</code>：将容器的 80 端口映射到<code>127.0.0.2</code>的<code>8080</code>端口。</li><li><code>--volume &quot;$PWD/wordpress&quot;:/var/www/html</code>：将容器的<code>/var/www/html</code>目录映射到当前目录的<code>wordpress</code>子目录。</li></ul></blockquote><p>浏览器访问<code>127.0.0.2:8080:80</code>就能看到 WordPress 的安装提示了。而且，你在<code>wordpress</code>子目录下的每次修改，都会反映到容器里面。</p><p>最后，终止这两个容器（容器文件会自动删除）。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container stop wordpress wordpressdb</span><br></pre></td></tr></table></figure></blockquote><h2 id="compose">compose</h2><p>可以管理多个 Docker 容器组成一个应用。你需要定义一个 <a href="https://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML</a> 格式的配置文件<code>docker-compose.yml</code>，写好多个容器之间的调用关系。然后，只要一个命令，就能同时启动/关闭这些容器。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动所有服务</span></span><br><span class="line">$ docker-compose up</span><br><span class="line"><span class="comment"># 关闭所有服务</span></span><br><span class="line">$ docker-compose stop</span><br></pre></td></tr></table></figure></blockquote><p>在<code>docker-demo</code>目录下，新建<code>docker-compose.yml</code>文件，写入下面的内容。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql:</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    environment:</span><br><span class="line">     - MYSQL_ROOT_PASSWORD=123456</span><br><span class="line">     - MYSQL_DATABASE=wordpress</span><br><span class="line">web:</span><br><span class="line">    image: wordpress</span><br><span class="line">    links:</span><br><span class="line">     - mysql</span><br><span class="line">    environment:</span><br><span class="line">     - WORDPRESS_DB_PASSWORD=123456</span><br><span class="line">    ports:</span><br><span class="line">     - <span class="string">&quot;127.0.0.3:8080:80&quot;</span></span><br><span class="line">    working_dir: /var/www/html</span><br><span class="line">    volumes:</span><br><span class="line">     - wordpress:/var/www/html</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，两个顶层标签表示有两个容器<code>mysql</code>和<code>web</code>。每个容器的具体设置，前面都已经讲解过了，还是挺容易理解的。</p><p>启动两个容器。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up</span><br></pre></td></tr></table></figure></blockquote><p>浏览器访问 <a href="http://127.0.0.3:8080">http://127.0.0.3:8080</a>，应该就能看到 WordPress 的安装界面。</p><p>现在关闭两个容器。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose stop</span><br></pre></td></tr></table></figure></blockquote><p>关闭以后，这两个容器文件还是存在的，写在里面的数据不会丢失。下次启动的时候，还可以复用。下面的命令可以把这两个容器文件删除（容器必须已经停止运行）。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose <span class="built_in">rm</span></span><br></pre></td></tr></table></figure></blockquote><h1>面试</h1><h2 id="1-Docker-和虚拟机的区别？">1.Docker 和虚拟机的区别？</h2><p>Docker 是<strong>操作系统级别</strong>的轻量虚拟化，虚拟机是硬件级别的虚拟化。Docker 启动快、资源占用小，适合快速交付和微服务架构部署。docker是一个进程级别的，基于linux容器</p><h2 id="2-Docker-的工作原理？">2.Docker 的工作原理？</h2><p>基于 Linux 的 <strong>Namespace（命名空间）</strong> 实现进程隔离；</p><p>利用 <strong>Cgroups（控制组）</strong> 限制资源；</p><p>使用 <strong>UnionFS（联合文件系统）</strong> 构建分层的镜像结构；</p><p>容器本质上是运行在宿主机内核上的一个普通进程。</p><h2 id="3-镜像的分层结构理解？">3.镜像的分层结构理解？</h2><p>每个 Docker 镜像由多个**只读层（Read-Only Layer）**构成；</p><p>容器运行时会在镜像最上层添加一层可写层；</p><p>修改只会影响写层，原始镜像不变；</p><p>优点是<strong>节省空间、加速构建、共享层数据</strong>。</p><h2 id="4-Dockerfile-常见优化技巧有哪些？">4.Dockerfile 常见优化技巧有哪些？</h2><p>使用官方的精简基础镜像，如 <code>alpine</code>；</p><p>合并 RUN 命令，减少中间层数量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br></pre></td></tr></table></figure><p>使用 <code>.dockerignore</code> 忽略不必要文件；</p><p>尽量减少镜像大小，加快构建和传输。</p><h2 id="5-CMD-和-ENTRYPOINT-的区别？">5.CMD 和 ENTRYPOINT 的区别？</h2><p><code>CMD</code> 提供默认参数，可被 <code>docker run</code> 的命令参数覆盖；</p><p><code>ENTRYPOINT</code> 提供主命令，不会被覆盖，适合制作“工具型镜像”；</p><p>一般组合使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;python&quot;]</span><br><span class="line">CMD [&quot;app.py&quot;]</span><br></pre></td></tr></table></figure><p>比如我们有两个文件，一个main 一个master</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">FROM python:3.9-slim</span><br><span class="line"></span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;python&quot;]</span><br><span class="line">CMD [&quot;main.py&quot;]</span><br></pre></td></tr></table></figure><h2 id="6-容器间通信方式？">6.容器间通信方式？</h2><p><strong>同一个 Docker 网络下，容器可以通过服务名互相访问</strong>；比如link</p><p>例如 Docker Compose 会默认创建一个网络，服务名可作为 hostname；</p><p>跨主机通信需使用 Docker Swarm / Kubernetes 等编排工具。</p><h2 id="7-Docker-的数据持久化方案？">7.Docker 的数据持久化方案？</h2><p><strong>数据卷（Volume）</strong>：推荐，独立于容器生命周期；</p><p><strong>绑定挂载（Bind Mount）</strong>：挂载宿主机路径，开发测试方便；</p><p><strong>tmpfs 挂载</strong>：内存中临时文件系统，适合敏感数据或缓存。</p><h2 id="8-docker-compose-yml-常用字段详解">8.docker-compose.yml 常用字段详解</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  app:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8080:8080&quot;</span><br><span class="line">    environment:</span><br><span class="line">      - ENV=prod</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">  db:</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=123456</span><br><span class="line">    volumes:</span><br><span class="line">      - db-data:/var/lib/mysql</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  db-data:</span><br></pre></td></tr></table></figure><p><code>build</code>: 指定构建上下文；</p><p><code>depends_on</code>: 依赖关系，控制容器启动顺序；</p><p><code>volumes</code>: 数据卷，持久化数据；</p><p><code>environment</code>: 设置环境变量；</p><p><code>networks</code>: 自定义网络支持跨服务通信。</p><h2 id="9-Docker-Registry">9.Docker Registry</h2><p>私有镜像仓库搭建（Docker Registry）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 --name registry registry:2</span><br></pre></td></tr></table></figure><ul><li>将镜像推送到私有仓库：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag myapp localhost:5000/myapp</span><br><span class="line">docker push localhost:5000/myapp</span><br></pre></td></tr></table></figure><ul><li>为啥需要私有仓库？答：用于公司内部部署，避免依赖公网 DockerHub，提升安全性和私有化能力。</li><li>如何保证私有仓库安全？答：<strong>启用 TLS、身份认证、访问控制策略</strong>。</li></ul><table><thead><tr><th>问题</th><th>建议简答</th></tr></thead><tbody><tr><td>容器和镜像的区别？</td><td>镜像是只读模板，容器是镜像运行的实例，有可写层。</td></tr><tr><td>Docker 为什么快？</td><td>因为它是进程级别的隔离，不启动完整 OS。</td></tr><tr><td>你如何优化 Docker 镜像大小？</td><td>使用小镜像、合并 RUN、清理缓存、使用多阶段构建等。</td></tr><tr><td>多容器协作怎么做？</td><td>用 Docker Compose 或 Kubernetes 进行编排和通信。</td></tr><tr><td>镜像构建失败怎么调试？</td><td>使用分层构建+缓存机制逐步调试，也可以手动进入中间镜像。</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/">技术栈</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/docker/">docker</category>
      
      
      <comments>https://blog.tokenlen.top/2025/06/22/new-stack/docker/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>javase面试题目hot2web开发</title>
      <link>https://blog.tokenlen.top/2025/06/21/javase/javaweb1/</link>
      <guid>https://blog.tokenlen.top/2025/06/21/javase/javaweb1/</guid>
      <pubDate>Fri, 20 Jun 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1&gt;web基础&lt;/h1&gt;
&lt;h2 id=&quot;1-JavaWeb是什么（静态资源和动态资源）&quot;&gt;1.JavaWeb是什么（静态资源和动态资源）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;JavaWeb 是基于 Java 技术的 Web</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1>web基础</h1><h2 id="1-JavaWeb是什么（静态资源和动态资源）">1.JavaWeb是什么（静态资源和动态资源）</h2><blockquote><p><strong>JavaWeb 是基于 Java 技术的 Web 开发体系，用于构建浏览器/服务器（B/S）架构的动态网站或服务。</strong></p></blockquote><p>核心组成部分：</p><table><thead><tr><th>模块</th><th>说明</th></tr></thead><tbody><tr><td>Servlet</td><td>JavaWeb 的核心，用于处理 HTTP 请求</td></tr><tr><td>JSP / Thymeleaf</td><td>页面展示层，用于动态生成 HTML 内容</td></tr><tr><td>Filter / Listener</td><td>过滤器和监听器，提供请求过滤、生命周期监听等功能</td></tr><tr><td>Web.xml</td><td>部署描述文件，用于配置 Servlet、Filter 等组件（Spring Boot 多用注解配置）</td></tr><tr><td>静态资源</td><td>纯前端文件，如 HTML、JS、CSS、图片等</td></tr><tr><td>动态资源</td><td>由 Servlet / Controller 处理、运行时生成的内容</td></tr></tbody></table><table><thead><tr><th>类型</th><th>描述</th><th>是否经过服务端处理</th></tr></thead><tbody><tr><td>静态资源</td><td>浏览器请求后直接返回内容（如 HTML/CSS/JS/图片）</td><td>❌ 不经过 Java 代码处理，直接由服务器返回</td></tr><tr><td>动态资源</td><td>运行时由后端生成（如 .jsp、Servlet、Controller 响应 JSON）</td><td>✅ 由 Java 程序处理后动态生成响应</td></tr></tbody></table><p>静态资源：</p><ul><li>URL: <code>http://example.com/static/index.html</code></li><li>返回：静态 HTML 页面</li><li>存储位置：<code>/static/</code>、<code>/public/</code>、<code>/resources/</code>（Spring Boot 默认支持）</li></ul><p>动态资源：</p><ul><li>URL: <code>http://example.com/user/list</code></li><li>后端：调用 Controller → Service → Dao → 数据库 → 生成动态 HTML / JSON</li><li>常见技术：Servlet、JSP、Spring MVC、Thymeleaf、FreeMarker</li></ul><p>流程：：：</p><p>浏览器请求 → Tomcat（Servlet 容器）接收 → 判断资源类型：<br>├─ 静态资源：直接读取文件返回<br>└─ 动态资源：交给 Servlet/DispatcherServlet 执行 → 处理请求 → 返回响应</p><p>总结：：：</p><p>JavaWeb 是基于 Java 的 Web 应用开发技术，主要通过 Servlet 处理 HTTP 请求，支持静态与动态资源的服务。<br>静态资源如 HTML、CSS、JS 不经后端处理直接响应；<br>动态资源（如 Servlet、JSP、Controller）通过服务器运行 Java 逻辑动态生成响应内容。<br>在现代开发中，JavaWeb 往往结合 Spring MVC + 前端页面模板或前后端分离架构使用。</p><p>可以使用nginx进行动静的分离</p><h2 id="2-tomcat是什么以及作用">2.tomcat是什么以及作用</h2><p>Tomcat 是一个<strong>开源的、轻量级的 Web 服务器和 Servlet 容器</strong></p><p><strong>Servlet 规范</strong>：Servlet 是 Java 语言的一个接口，它定义了如何响应客户端请求（如浏览器发出的 HTTP 请求）。Tomcat 作为 Servlet 容器，负责加载、初始化和管理 Servlet 的生命周期，并根据请求将它们与对应的 Servlet 实例关联起来。</p><p><strong>JSP (JavaServer Pages) 规范</strong>：JSP 允许开发者在 HTML 页面中嵌入 Java 代码，从而动态生成 Web 内容。Tomcat 能够解析和编译 JSP 文件为 Servlet，然后像处理普通 Servlet 一样执行它们。</p><p>它能理解来自客户端（比如你的浏览器）的 HTTP 请求，将这些请求传递给你的 Java Web 应用程序（比如你写的 Servlet 或 JSP），然后把应用程序处理完的结果（比如一个 HTML 页面）再返回给客户端。</p><h2 id="3-HTTP协议的作用以及组成（请求行：请求头，请求体">3.HTTP协议的作用以及组成（请求行：请求头，请求体)</h2><p>HTTP（HyperText Transfer Protocol），<strong>超文本传输协议</strong>，是互联网上应用最为广泛的一种网络协议。它定义了客户端（如浏览器）和服务器之间如何进行通信，是 Web 应用程序能够正常运作的基础。</p><p>HTTP 规范了客户端（如你的浏览器、手机 App）如何向服务器发送请求，以及服务器如何响应这些请求。这包括了请求的格式、响应的格式、如何处理错误等等。</p><p>功能：</p><p>实现连接，传输资源，无状态，可扩展性</p><p>报文组成：</p><p>请求行，请求头，请求体</p><h2 id="4-浏览器输入一个网址后，看到返回结构，都经历了哪些流程">4.浏览器输入一个网址后，看到返回结构，都经历了哪些流程</h2><p>解析，host检查，dns递归解析，tcp三次握手，发送http请求，响应http请求，浏览器解析</p><h2 id="5-URI和URL的区别">5.URI和URL的区别</h2><p><strong>URI</strong>，全称 <strong>统一资源标识符</strong>，它是一个字符串，用来<strong>唯一标识</strong>互联网上的一个资源。这里的“资源”可以是任何东西，比如一个网页、一张图片、一段视频、一个文件，甚至是一个服务或者一个抽象概念。</p><p><strong>URL</strong>，全称 <strong>统一资源定位符</strong>，它是 URI 的一个子集。URL 不仅能够<strong>标识</strong>一个资源，更重要的是，它还指明了这个资源在互联网上的<strong>位置</strong>。换句话说，URL 告诉我们如何<strong>访问</strong>到这个资源。</p><h2 id="6-MVC架构是什么">6.MVC架构是什么</h2><p>旨在将应用程序的业务逻辑、数据和用户界面进行<strong>分离</strong>，从而提高代码的<strong>可维护性、可扩展性和重用性</strong>。</p><p>Model（模型）</p><ul><li><strong>作用</strong>：模型是应用程序的<strong>核心</strong>，它包含了<strong>数据</strong>和<strong>业务逻辑</strong>。它独立于用户界面，负责数据的存储、检索、处理、验证和管理。当数据发生变化时，模型会通知视图进行更新。</li><li><strong>职责</strong>：<ul><li><strong>数据管理</strong>：负责与数据库或其他数据源的交互，进行数据的增删改查。</li><li><strong>业务规则</strong>：包含应用程序的核心业务逻辑和规则，确保数据的完整性和一致性。</li><li><strong>状态管理</strong>：管理应用程序的状态，并在其状态改变时通知相关的视图或控制器。</li></ul></li><li><strong>示例</strong>：在一个电商应用中，<code>Product</code> 类、<code>Order</code> 类、<code>User</code> 类以及它们对应的数据库操作和业务逻辑（如计算订单总价、库存管理）都属于模型层。</li></ul><ol start="2"><li>View（视图）</li></ol><ul><li><strong>作用</strong>：视图是用户与应用程序交互的<strong>界面</strong>。它负责<strong>显示</strong>模型的数据给用户，并接收用户的输入（如点击按钮、填写表单）。视图本身不包含任何业务逻辑，它只负责数据的展示。</li><li><strong>职责</strong>：<ul><li><strong>数据展示</strong>：从模型中获取数据，并以用户友好的方式呈现。</li><li><strong>用户交互</strong>：提供用户界面元素，并捕获用户的输入事件。</li><li><strong>不含业务逻辑</strong>：视图层应该尽可能“哑巴”，不直接处理业务逻辑，而是将用户输入事件传递给控制器。</li></ul></li><li><strong>示例</strong>：网页中的 HTML 页面、Android 或 iOS 应用中的 UI 界面、桌面应用中的窗口和控件，都属于视图层。</li></ul><ol start="3"><li>Controller（控制器）</li></ol><ul><li><strong>作用</strong>：控制器是模型和视图之间的<strong>桥梁</strong>或“协调者”。它接收用户的输入（来自视图），根据输入调用相应的模型进行业务逻辑处理，然后选择合适的视图来显示处理结果。</li><li><strong>职责</strong>：<ul><li><strong>处理用户输入</strong>：接收并解析来自视图的用户请求和操作。</li><li><strong>协调模型和视图</strong>：根据用户输入，调用模型层执行相应的业务逻辑操作。</li><li><strong>更新视图</strong>：模型处理完数据后，控制器会选择一个合适的视图来展示更新后的数据或结果。控制器通常不直接修改视图，而是告诉视图去更新自己。</li></ul></li><li><strong>示例</strong>：在 Web 应用中，一个 Servlet 或 Spring MVC 中的 <code>@Controller</code> 类就是控制器。它接收 HTTP 请求，调用服务层（模型的一部分）处理业务，然后将数据传递给 JSP 或 Thymeleaf 模板（视图）进行渲染。</li></ul><h2 id="7-三大组件Servlet、Filter-和-Listener">7.三大组件<strong>Servlet、Filter 和 Listener</strong></h2><p><strong>Servlet</strong> 是 Java 语言的一个接口，也是所有 Java Web 应用程序的核心组件。它定义了服务器端程序如何<strong>接收和响应客户端（通常是浏览器）的请求</strong>。</p><p><strong>处理请求</strong>：接收并处理来自客户端的 HTTP 请求（如 GET、POST 等）。</p><p><strong>生成响应</strong>：根据请求执行业务逻辑（如查询数据库、调用服务），然后生成动态内容（如 HTML 页面、JSON 数据）作为 HTTP 响应返回给客户端。</p><p><strong>生命周期管理</strong>：Servlet 容器负责管理 Servlet 的生命周期，包括加载、实例化、初始化 (<code>init()</code>)、处理请求 (<code>service()</code>) 和销毁 (<code>destroy()</code>)。</p><p><strong>多线程处理</strong>：同一个 Servlet 实例可以同时处理多个请求，每个请求都在独立的线程中执行。因此，Servlet 中的共享资源需要考虑线程安全问题。</p><p><code>init(ServletConfig config)</code>：Servlet 初始化时调用，只执行一次。</p><p><code>service(ServletRequest req, ServletResponse res)</code>：每次客户端请求时调用，根据请求类型分发到 <code>doGet()</code>、<code>doPost()</code> 等方法。</p><p><code>doGet(HttpServletRequest req, HttpServletResponse resp)</code>：处理 HTTP GET 请求。</p><p><code>doPost(HttpServletRequest req, HttpServletResponse resp)</code>：处理 HTTP POST 请求。</p><p><code>destroy()</code>：Servlet 销毁时调用，只执行一次，用于释放资源。</p><p><strong>Filter</strong> 也是 Java Web 的一个接口，它允许你在请求到达 Servlet 之前和响应发送回客户端之后<strong>拦截和处理请求/响应</strong>。过滤器就像一个“管道”或“拦截器”，可以在核心业务逻辑（Servlet）执行前后进行预处理和后处理。</p><p><strong>请求/响应拦截</strong>：在请求进入 Servlet 之前进行预处理，或在 Servlet 处理完响应返回客户端之前进行后处理。</p><p><strong>链式调用</strong>：可以配置多个过滤器形成一个过滤链，请求会依次经过这些过滤器。</p><p><strong>不改变核心业务</strong>：过滤器主要用于通用性、非核心的逻辑处理，而不会改变 Servlet 的核心业务功能。</p><p><code>init(FilterConfig filterConfig)</code>：过滤器初始化时调用，只执行一次。</p><p><code>doFilter(ServletRequest request, ServletResponse response, FilterChain chain)</code>：每次请求匹配到过滤器时调用。核心逻辑在此方法中实现，<code>chain.doFilter()</code> 方法用于将请求传递给下一个过滤器或目标 Servlet。</p><p><code>destroy()</code>：过滤器销毁时调用，只执行一次。</p><p><strong>Listener</strong> 也是 Java Web 的一组接口，用于<strong>监听 Web 应用程序中的特定事件</strong>。当这些事件发生时，监听器会收到通知并执行相应的处理逻辑。监听器就像应用程序的“耳目”，能感知到各种生命周期或状态变化。</p><p><strong>事件驱动</strong>：基于事件机制，当某个特定事件（如 ServletContext 创建/销毁、HttpSession 创建/销毁、ServletRequest 创建/销毁等）发生时，自动触发相应的监听器方法。</p><p><strong>无侵入性</strong>：监听器通常与业务逻辑分离，用于处理一些全局性的、非业务相关的任务。</p><p><strong>Web 应用程序范围</strong>：</p><ul><li><code>ServletContextListener</code>：监听 ServletContext（Web 应用上下文）的创建和销毁。<ul><li><code>contextInitialized(ServletContextEvent sce)</code>：Web 应用启动时调用。</li><li><code>contextDestroyed(ServletContextEvent sce)</code>：Web 应用关闭时调用。</li><li><strong>应用场景</strong>：加载配置文件、初始化资源池、启动后台任务。</li></ul></li></ul><p><strong>会话范围</strong>：</p><ul><li><code>HttpSessionListener</code>：监听 HttpSession 的创建和销毁。<ul><li><code>sessionCreated(HttpSessionEvent se)</code>：新会话创建时调用。</li><li><code>sessionDestroyed(HttpSessionEvent se)</code>：会话销毁时调用（如超时、手动失效）。</li><li><strong>应用场景</strong>：统计在线用户数量。</li></ul></li><li><code>HttpSessionAttributeListener</code>：监听 HttpSession 中属性的增删改。</li></ul><p><strong>请求范围</strong>：</p><ul><li><code>ServletRequestListener</code>：监听 ServletRequest 对象的创建和销毁。<ul><li><code>requestInitialized(ServletRequestEvent sre)</code>：请求开始处理时调用。</li><li><code>requestDestroyed(ServletRequestEvent sre)</code>：请求处理结束时调用。</li><li><strong>应用场景</strong>：统计请求次数、记录请求日志。</li></ul></li><li><code>ServletRequestAttributeListener</code>：监听 ServletRequest 中属性的增删改。</li></ul><h2 id="8-什么是JDBC">8.什么是JDBC</h2><p>它提供了一套<strong>统一的接口和类</strong>，允许 Java 开发者使用相同的 Java 代码来连接、查询和更新不同的关系型数据库，而无需关心底层数据库的具体实现细节。</p><p>JDBC 定义了：</p><ul><li>如何建立与数据库的连接。</li><li>如何发送 SQL 语句给数据库。</li><li>如何处理从数据库返回的结果。</li><li>如何管理数据库事务。</li></ul><p><strong>统一的编程接口</strong>： JDBC 提供了一套标准的 API（位于 <code>java.sql</code> 和 <code>javax.sql</code> 包中），无论底层是 MySQL、Oracle、SQL Server 还是 PostgreSQL，开发者都使用相同的接口来编写数据库操作代码。这大大简化了开发工作。</p><p><strong>可插拔的驱动机制</strong>： 虽然 JDBC 定义了统一的接口，但不同数据库厂商的底层实现是不同的。为了让 Java 程序能够与特定的数据库通信，每个数据库厂商都需要提供一个符合 JDBC 规范的 <strong>JDBC 驱动程序</strong>。这个驱动程序负责将 JDBC API 调用翻译成数据库能理解的特定协议，并进行实际的数据传输。 <strong>开发者只需要在项目中引入对应数据库的 JDBC 驱动 JAR 包</strong>，并在代码中加载该驱动，就可以连接到相应的数据库。</p><p><strong>支持多种数据库</strong>： 由于其驱动机制，JDBC 可以支持几乎所有主流的关系型数据库。这使得 Java 应用具有很强的数据库<strong>无关性</strong>和<strong>可移植性</strong>。如果未来需要更换数据库，通常只需要更换 JDBC 驱动和修改连接配置，而无需大幅改动业务代码。</p><p><strong>提供强大的数据库操作能力</strong>： JDBC 提供了丰富的方法来执行 SQL 语句，包括：</p><ul><li><strong>建立连接</strong>：<code>DriverManager.getConnection()</code></li><li><strong>创建语句</strong>：<code>Connection.createStatement()</code>、<code>Connection.prepareStatement()</code></li><li><strong>执行查询</strong>：<code>Statement.executeQuery()</code>，返回 <code>ResultSet</code>（结果集）</li><li><strong>执行更新</strong>：<code>Statement.executeUpdate()</code>（用于插入、更新、删除）</li><li><strong>处理结果集</strong>：<code>ResultSet</code> 接口提供了遍历结果、获取列值等方法。</li><li><strong>事务管理</strong>：<code>Connection.setAutoCommit()</code>、<code>commit()</code>、<code>rollback()</code> 等。</li></ul>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/javase/">javase</category>
      
      <category domain="https://blog.tokenlen.top/categories/javase/java/">java</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/java/">java</category>
      
      <category domain="https://blog.tokenlen.top/tags/%E9%9D%A2%E8%AF%95/">面试</category>
      
      
      <comments>https://blog.tokenlen.top/2025/06/21/javase/javaweb1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>汇编语言期末复习</title>
      <link>https://blog.tokenlen.top/2025/06/21/lastteam/huibian/</link>
      <guid>https://blog.tokenlen.top/2025/06/21/lastteam/huibian/</guid>
      <pubDate>Fri, 20 Jun 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1&gt;题目解答&lt;/h1&gt;
&lt;h2 id=&quot;一-基础知识&quot;&gt;一 基础知识&lt;/h2&gt;
&lt;p&gt;1.若CPU的寻址能力是 2^n字节（Byte），那么地址总线宽度为 n 位。&lt;/p&gt;
&lt;p&gt;8KB =</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1>题目解答</h1><h2 id="一-基础知识">一 基础知识</h2><p>1.若CPU的寻址能力是 2^n字节（Byte），那么地址总线宽度为 n 位。</p><p>8KB = 2^13byte</p><p>所以为13</p><p>2.1KB存储器的地址范围， 1KB = 1024个存储单元，地址从0开始编号</p><p>所以为0-1023</p><p>3.1KB存储器可存储的数据量，1KB = 2^13bit</p><p>可存储 <strong>2^13</strong> bit</p><p>可存储 <strong>2^10</strong> Byte</p><p>4.常见的转换：：：</p><p>1KB = 2^10Byte</p><p>1MB = 2^20Byte</p><p>1GB = 2^30Byte</p><p>6.传输1024字节所需次数</p><p>若数据总线宽度为 n 位，则每次传输 n/8 字节</p><p>所需次数 = 总字节数 ÷ 每次字节数</p><p>8086（16位）→ 一次2B → =512 次</p><p>80386（32位）→ 一次4B → =256 次</p><p>8080：8位 → 1B</p><p>8088：8位 → 1B</p><p>8086：16位 → 2B</p><p>80286：16位 → 2B</p><p>80386：32位 → 4B</p><h2 id="二-寄存器">二 寄存器</h2><p>1.补充完整：</p><p><code>mov</code> 是赋值指令，不影响标志位。</p><p><code>add</code> 是加法指令，结果存入目标寄存器。</p><p><code>ax</code> 包括 <code>ah</code>（高8位）和 <code>al</code>（低8位）。</p><p>指令演示：</p><table><thead><tr><th>指令</th><th>执行后寄存器值</th><th>说明</th></tr></thead><tbody><tr><td><code>mov ax,62627</code></td><td>AX = F4A3H</td><td>62627₁ = F4A3₁₆</td></tr><tr><td><code>mov ah,31H</code></td><td>AX = 31A3H</td><td>修改高 8 位</td></tr><tr><td><code>mov al,23H</code></td><td>AX = 3123H</td><td>修改低 8 位</td></tr><tr><td><code>add ax,ax</code></td><td>AX = 6246H</td><td>3123H + 3123H</td></tr><tr><td><code>mov bx,826CH</code></td><td>BX = 826CH</td><td>直接赋值</td></tr><tr><td><code>mov cx,ax</code></td><td>CX = 6246H</td><td>AX → CX</td></tr><tr><td><code>mov ax,bx</code></td><td>AX = 826CH</td><td>BX → AX</td></tr><tr><td><code>add ax,bx</code></td><td>AX = 04D8H</td><td>826CH + 826CH = 104D8H → 截断为 04D8H</td></tr><tr><td><code>mov al,bh</code></td><td>AX = 0482H</td><td>BH → AL（AL = 82H），AH 未变（仍为 04H）</td></tr><tr><td><code>mov ah,bl</code></td><td>AX = 6C82H</td><td>BL → AH（AH = 6CH）</td></tr><tr><td><code>add ah,ah</code></td><td>AX = D882H</td><td>AH = 6C + 6C = D8H</td></tr><tr><td><code>add al,6</code></td><td>AX = D888H</td><td>AL = 82H + 06H = 88H</td></tr><tr><td><code>add al,al</code></td><td>AX = D810H</td><td>AL = 88H + 88H = 110H → 截断为 10H</td></tr><tr><td><code>mov ax,cx</code></td><td>AX = 6246H</td><td>CX → AX</td></tr></tbody></table><p>2.用最多4条指令计算 2⁴</p><p>每次 <code>add ax, ax</code> 就是乘以 2，相当于左移 1 位</p><p>mov ax,2<br>add ax,ax   ; 2 × 2 = 4<br>add ax,ax   ; 4 × 2 = 8<br>add ax,ax   ; 8 × 2 = 16</p><p>3.段地址 0001H 时的寻址范围</p><p>实地址 = 段地址 × 16 + 偏移地址</p><p>段地址 0001H → 00010H 实起始地址</p><p>最大偏移 = <strong>FFFFH</strong> → 最大地址 = 00010H + FFFFH = 1000FH</p><p>所以寻址的范围就是00010H-1000FH</p><p>4.要访问实地址 20000H，求段地址 SA 的范围</p><p>实地址 = SA × 10H + 偏移</p><p>设偏移 = 0 → SA 最小 = 20000H ÷ 10H = 2000H</p><p>设偏移最大 = FFFFH → SA 最大 = (20000H - FFFFH) ÷ 10H ≈ 1001H</p><p>最小段地址：<strong>1001H</strong></p><p>最大段地址：<strong>2000H</strong></p><ol start="5"><li></li></ol><p>sub ax, ax  用 <code>AX</code> 自己减自己，结果赋给 <code>AX</code> 这样的结果为0</p><p>清零首选 <code>xor ax, ax</code></p><p>jmp ax，跳转到 <code>AX</code> 中存储的地址</p><p><strong>IP 修改次数：4 次</strong></p><p><strong>修改时机：</strong></p><ol><li><code>mov</code> 指令加载 → IP++</li><li><code>sub</code> 指令加载 → IP++</li><li><code>jmp</code> 指令加载 → IP++</li><li><code>jmp</code> 执行 → IP ← AX</li></ol><p><strong>最后 IP 的值：</strong> <strong>0000H</strong></p><h2 id="九-跳跃">九 跳跃</h2><p>1.段内转移指令 <code>jmp word ptr [bx+1]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">data segment</span><br><span class="line">?</span><br><span class="line">data ends</span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">mov ax,data</span><br><span class="line">mov ds,ax</span><br><span class="line">mov bx,<span class="number">0</span></span><br><span class="line">jmp word ptr [bx+<span class="number">1</span>]  ; 段内跳转，偏移地址来自ds:[bx+<span class="number">1</span>]</span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>jmp word ptr [bx+1]</code> 表示从内存地址 <code>ds:[1]</code> 和 <code>ds:[2]</code> 处读取2字节构成目标偏移地址，CS不变。</p><p>要跳到 <code>IP = 0000H</code>，那么 <code>ds:[1~2] = 0000H</code>。</p><p>所以只需确保 data 段的第二、三字节是 0。</p><p><strong>db 4 dup (0)  ; 定义4字节，确保ds:[1]和ds:[2]都是0</strong></p><p>2.段间跳跃，jmp dword ptr ds:[0]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data segment</span><br><span class="line">dd 12345678H</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">mov ax,data</span><br><span class="line">mov ds,ax</span><br><span class="line">mov bx,<span class="number">0</span></span><br><span class="line">mov [bx],____</span><br><span class="line">mov [bx+<span class="number">2</span>],____</span><br><span class="line">jmp dword ptr ds:[<span class="number">0</span>]</span><br><span class="line">mov ax,4c00h</span><br><span class="line"><span class="type">int</span> 21h</span><br><span class="line">code ends</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>jmp dword ptr ds:[0]</code> 是<strong>段间跳转</strong>，执行时：</p><ul><li><code>ds:[0]~[1]</code> → 被解释为 IP（偏移地址）</li><li><code>ds:[2]~[3]</code> → 被解释为 CS（段地址）</li></ul><p>当前指令起始处 IP = 0000H（或 <code>offset start</code>）</p><p>当前 CS = cs，跳转目标就是 <code>CS:0</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov [bx], bx    ; 相当于 mov [0], 0</span><br><span class="line">mov [bx+2], cs  ; 相当于 mov [2], cs</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.指令 <code>jmp dword ptr es:[1000H]</code>，查看内存内容分析跳转结果</p><p>2000:1000 BE 00 06 00 00 00 …</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax,2000H</span><br><span class="line">mov es,ax</span><br><span class="line">jmp dword ptr es:[1000H]</span><br></pre></td></tr></table></figure><p>段间跳转，目标是 <code>es:[1000H]</code> 开始的4字节：</p><ul><li><code>低地址两字节（BE 00）</code> → IP = 00BEH</li><li><code>高地址两字节（06 00）</code> → CS = 0006H</li></ul><p>跳转后：CS = 0006H, IP = 00BEH</p><p>4.使用 <code>jcxz</code> 查找第一个值为0的字节</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">mov ax,2000H</span><br><span class="line">mov ds,ax</span><br><span class="line">mov bx,0</span><br><span class="line">s:mov cl,ds:[bx]   ; 将内存内容加载到CL</span><br><span class="line">mov ch,0         ; 组成CX = 0000 ~ 00FF</span><br><span class="line">jcxz ok          ; 如果 CX = 0, 跳转</span><br><span class="line">add bx,1</span><br><span class="line">jmp short s</span><br><span class="line">ok:mov dx,bx        ; BX 即偏移位置</span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每次加载一个字节到 CL，然后组成 16 位 CX（CH=0）</p><p>如果 <code>CX=0</code>，说明找到了值为0的字节</p><p>用 <code>jcxz</code> 检查，找到后跳转到 <code>ok</code></p><p>最终将偏移地址保存在 DX 中</p><p>5.使用 <code>loop</code> 查找第一个为0的 byte</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">mov ax,2000H</span><br><span class="line">mov ds,ax</span><br><span class="line">mov bx,0</span><br><span class="line">s:mov cl,[bx]</span><br><span class="line">mov ch,0</span><br><span class="line">add cx,1        ; 如果 cx = 0，add cx,1 得到 1，loop 继续</span><br><span class="line">inc bx          ; 查下一个字节</span><br><span class="line">loop s </span><br><span class="line">ok:dec bx         ; 多加了一次 bx，回退</span><br><span class="line">mov dx,bx</span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>loop指令减少 CX 并跳转，直到 CX=0</li><li>用 <code>cl=[bx]</code> 加载内存，若为0，则 <code>cx=0</code>，<code>add cx,1</code> 变成 1，<code>loop</code>执行后 cx=0，跳出</li><li>最终偏移值存在 <code>bx</code> 中，但已多加一，因此 <code>dec bx</code> 修正偏移</li></ul><h2 id="三">三</h2><p>1.内存查看与汇编执行分析(x)</p><p>0000:0000 70 80 F0 30 EF 60 30 E2 00 80 80 12 66 20 22 60<br>0000:0010 62 26 E6 D6 CC 2E 3C 3B AB BA 00 00 26 06 66 88</p><table><thead><tr><th>汇编指令</th><th>AX</th><th>BX</th><th>说明</th></tr></thead><tbody><tr><td><code>mov ax,1</code></td><td>0001</td><td>0000</td><td>AX ← 1</td></tr><tr><td><code>mov ds,ax</code></td><td>0001</td><td>0000</td><td>DS ← AX，不影响 AX/BX</td></tr><tr><td><code>mov ax,[0000]</code></td><td>2662</td><td>0000</td><td>AX ← DS:0000 = 0x8026（注意是低地址在前）</td></tr><tr><td><code>mov bx,[0001]</code></td><td>2662</td><td>E626</td><td>BX ← DS:0001 = 0x26E6（从地址0001开始读两个字节）</td></tr><tr><td><code>mov ax,bx</code></td><td>E626</td><td>E626</td><td>AX ← BX</td></tr><tr><td><code>mov ax,[0000]</code></td><td>2662</td><td>E626</td><td>AX ← DS:0000</td></tr><tr><td><code>mov bx,[0002]</code></td><td>2662</td><td>D6E6</td><td>BX ← DS:0002 = 0xE6D6</td></tr><tr><td><code>add ax,bx</code></td><td>FD48</td><td>D6E6</td><td>AX = 2662 + D6E6 = FD48</td></tr><tr><td><code>add ax,[0004]</code></td><td>2C14</td><td>D6E6</td><td>AX += DS:0004 = 0x602C → FD48+602C=15D74 → 截断为2C14</td></tr><tr><td><code>mov ax,0</code></td><td>0000</td><td>D6E6</td><td>清零 AX</td></tr><tr><td><code>mov al,[0002]</code></td><td>00E6</td><td>D6E6</td><td>AL ← E6（AX低字节），AH=0 → AX=00E6</td></tr><tr><td><code>mov bx,0</code></td><td>00E6</td><td>0000</td><td>BX 清零</td></tr><tr><td><code>mov bl,[000C]</code></td><td>00E6</td><td>0026</td><td>BL ← DS:000C = 26H → BX=0026</td></tr><tr><td><code>add al,bl</code></td><td>000C</td><td>0026</td><td>AL=E6+26=10C → 截断为 0C，AX=000C</td></tr></tbody></table><p>2.程序执行追踪 + 汇编流程图(x)</p><p>mov ax,6622H<br>jmp 0ff0:0100H<br>mov ax,2000H<br>mov ds,ax<br>mov ax,[0008]<br>mov ax,[0002]</p><table><thead><tr><th>指令</th><th>AX</th><th>BX</th><th>CS</th><th>IP</th><th>DS</th></tr></thead><tbody><tr><td><code>mov ax,6622H</code></td><td>6622</td><td>0000</td><td>2000</td><td>0003</td><td>1000</td></tr><tr><td><code>jmp 0ff0:0100H</code></td><td>6622</td><td>0000</td><td>0FF0</td><td>0100</td><td>1000</td></tr><tr><td><code>mov ax,2000H</code></td><td>2000</td><td>0000</td><td>0FF0</td><td>0103</td><td>1000</td></tr><tr><td><code>mov ds,ax</code></td><td>2000</td><td>0000</td><td>0FF0</td><td>0105</td><td>2000</td></tr><tr><td><code>mov ax,[0008]</code></td><td>C189</td><td>0000</td><td>0FF0</td><td>0108</td><td>2000</td></tr><tr><td><code>mov ax,[0002]</code></td><td>EA66</td><td>0000</td><td>0FF0</td><td>010B</td><td>2000</td></tr></tbody></table><p>3.逆序拷贝程序（使用栈）</p><p>将 <code>10000H~1000FH</code> 的 8 个字（<strong>16 字节</strong>）将 10000H~1000FH 中的 8 个字逆序拷贝到 20000H~2000FH 中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mov ax,1000H</span><br><span class="line">mov ds,ax           ; 数据段指向 10000H，就是原始地址</span><br><span class="line"></span><br><span class="line">mov ax,2000H</span><br><span class="line">mov ss,ax           ; 栈段指向 20000H,就是目的地址</span><br><span class="line">mov sp,0010H        ; 栈顶为 20000:0010</span><br><span class="line"></span><br><span class="line">push [0]</span><br><span class="line">push [2]</span><br><span class="line">push [4]</span><br><span class="line">push [6]</span><br><span class="line">push [8]</span><br><span class="line">push [0AH]</span><br><span class="line">push [0CH]</span><br><span class="line">push [0EH]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>栈是从高地址向低地址存储，push 后栈内容为 <code>[0EH], [0CH], ..., [0]</code></p><p>注意 <code>[0]</code> 等都是 <code>ds</code> 段内偏移地址</p><p>出栈写入（pop）将 10000H~1000FH 中的 8 个字逆序拷贝到 20000H~2000FH 中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mov ax,2000H</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,1000H</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,0000H</span><br><span class="line">pop [E]</span><br><span class="line">pop [C]</span><br><span class="line">pop [A]</span><br><span class="line">pop [8]</span><br><span class="line">pop [6]</span><br><span class="line">pop [4]</span><br><span class="line">pop [2]</span><br><span class="line">pop [0]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>DS（Data Segment，数据段寄存器）</strong><br>指向当前程序使用的数据段基地址，用于访问数据。</p><p><strong>SS（Stack Segment，栈段寄存器）</strong><br>指向当前栈所在的段基地址。</p><p><strong>SP（Stack Pointer，栈指针寄存器）</strong><br>指示当前栈顶（栈顶指针）的偏移地址，结合 SS 寄存器，确定栈顶的线性地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,1000H</span><br><span class="line">mov ds,ax</span><br></pre></td></tr></table></figure><p>说明数据段 DS 指向段地址 <code>1000H</code>，即内存中以 <code>10000H</code> 为起始的地址区域。</p><p><code>SP</code> 是栈顶偏移量，相对于 SS 指定的段地址。</p><h2 id="十">十</h2><p>1.利用 <code>retf</code> 实现远跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">stack segment</span><br><span class="line">    db <span class="number">16</span> dup(<span class="number">0</span>)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">    mov ax,stack</span><br><span class="line">    mov ss,ax</span><br><span class="line">    mov sp,<span class="number">16</span></span><br><span class="line">    mov ax,1000h</span><br><span class="line">    push ax</span><br><span class="line">    mov ax,<span class="number">0</span></span><br><span class="line">    push ax</span><br><span class="line">    retf</span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov ax,1000h   ; 目标段地址</span><br><span class="line">push ax        ; 压栈：目标段</span><br><span class="line">mov ax,<span class="number">0</span>       ; 目标偏移地址</span><br><span class="line">push ax        ; 压栈：目标偏移</span><br><span class="line">retf           ; 弹出两个字：IP ← [SP]，CS ← [SP+<span class="number">2</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从当前程序跳转到 1000:0000 开始执行。</p><p>2.<code>call 段内过程</code> 的本质</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1000</span>:<span class="number">0000</span> b8 <span class="number">00</span> <span class="number">00</span>        mov ax,<span class="number">0</span></span><br><span class="line"><span class="number">1000</span>:<span class="number">0003</span> e8 <span class="number">01</span> <span class="number">00</span>        call s</span><br><span class="line"><span class="number">1000</span>:<span class="number">0006</span> <span class="number">40</span>              inc ax</span><br><span class="line"><span class="number">1000</span>:<span class="number">0007</span> <span class="number">58</span>          s: pop ax</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov ax,<span class="number">0</span></span><br><span class="line">call s       ; 将下一条指令地址（<span class="number">1000</span>:<span class="number">06</span>）压栈</span><br><span class="line">inc ax       ; IP 跳转后这句不会先执行</span><br><span class="line">s: pop ax    ; 从栈中弹出 <span class="number">1000</span>:<span class="number">06</span>，ax=<span class="number">6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>call s</code> 将<strong>返回地址 1000:06</strong> 压入栈</p><p>pop ax<code> 弹出该地址，</code>ax=6</p><p>3.机械码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1000</span>:<span class="number">0000</span> b8 <span class="number">00</span> <span class="number">00</span>        mov ax,<span class="number">0</span></span><br><span class="line"><span class="number">1000</span>:<span class="number">0003</span> 9a 09 <span class="number">00</span> <span class="number">00</span> <span class="number">10</span>  call far ptr s  ; 调用 <span class="number">1000</span>:0009</span><br><span class="line"><span class="number">1000</span>:0008 <span class="number">40</span>              inc ax</span><br><span class="line"><span class="number">1000</span>:0009 <span class="number">58</span>          s: pop ax</span><br><span class="line">           <span class="number">05</span> <span class="number">00</span>           add ax, ax</span><br><span class="line">           <span class="number">1f</span>              pop bx</span><br><span class="line">           <span class="number">03</span> d8           add ax, bx</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行后，<strong>ax的值为多少？</strong></p><p><code>pop ax</code> → ax = 0008h（返回地址）</p><p><code>add ax, ax</code> → ax = 0x10</p><p><code>pop bx</code> → bx = 1000h（段）</p><p><code>add ax, bx</code> → ax = 0x10 + 0x1000 = 0x1010</p><p>4.call ax（寄存器间接调用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1000:0000 b8 06 00       mov ax,6</span><br><span class="line">1000:0003 ff d0          call ax</span><br><span class="line">1000:0005 40             inc ax</span><br><span class="line">1000:0006 58             pop ax</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>call ax</code> 相当于 <code>call 0006h</code>，先把返回地址 1000:05 压栈</p><p>到 <code>1000:06</code>，执行 <code>pop ax</code> → ax = 0005</p><p>5.间接调用 call word ptr ds:[0eh]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">call word ptr ds:[0eh]</span><br><span class="line">inc ax</span><br><span class="line">inc ax</span><br><span class="line">inc ax</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>已知 <code>[ds:0eh] = 0011h</code>，<strong>call跳转到0011h后执行 inc ax 三次</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">stack segment</span><br><span class="line">    dw 8 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">    mov ax,stack</span><br><span class="line">    mov ss,ax</span><br><span class="line">    mov sp,16</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov ax,0</span><br><span class="line">    call word ptr ds:[0eh]</span><br><span class="line">    inc ax</span><br><span class="line">    inc ax</span><br><span class="line">    inc ax</span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>栈段 <code>stack</code> 定义了 8 个 word 空间，共 16 字节（从 0 到 15）。</li><li>初始化：<code>ss = stack</code>, <code>sp = 16</code>，即栈顶从偏移 <code>0010h</code> 开始。</li><li><code>ds = ax = stack</code></li><li><code>call word ptr ds:[0eh]</code><br>查找 <code>ds:0eh</code> 处的内容，即偏移地址（设为 0011h）</li></ul><blockquote><p>因为 call 是段内调用，所以：</p></blockquote><ul><li><p><strong>执行 <code>call 0011h</code>：</strong></p><ul><li><code>call</code> 会将 <strong>返回地址 (call 下一条指令地址) = 0011h</strong> 压入栈</li><li>IP ← 0011h</li></ul></li><li><p>IP 跳转到 offset=0011h 的位置，接着执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inc ax</span><br><span class="line">inc ax</span><br><span class="line">inc ax</span><br></pre></td></tr></table></figure><p>初始 ax = 0 → 1 → 2 → 3</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">assume cs:codesg</span><br><span class="line">stack segment</span><br><span class="line">    dw 8 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line">start:</span><br><span class="line">    mov ax,stack</span><br><span class="line">    mov ss,ax</span><br><span class="line">    mov sp,10h</span><br><span class="line">    mov word ptr ss:[0],offset s ; (ss:[0]) = 1Ah</span><br><span class="line">    mov ss:[2],cs                ; (ss:[2]) = 当前代码段 CS</span><br><span class="line">    call dword ptr ss:[0]        ; 相当于 call far ptr cs:1Ah</span><br><span class="line">                                 ; 执行前压栈：cs 和 IP=19h</span><br><span class="line">                                 ; (ss:[4]) = cs, (ss:[6]) = 19h</span><br><span class="line">    nop</span><br><span class="line">s:</span><br><span class="line">    mov ax,offset s              ; ax = 1Ah</span><br><span class="line">    sub ax,ss:[0ch]              ; ax = 1Ah - ss:[0Ch] = 1Ah - 19h = 1</span><br><span class="line">    mov bx,cs                    ; bx = cs</span><br><span class="line">    sub bx,ss:[0eh]              ; bx = cs - ss:[0eh] = cs - cs = 0</span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>ss:[0] = 1Ah</code>，即跳转到当前段偏移地址 1Ah</li><li><code>ss:[2] = cs</code>，即段地址</li><li><code>call dword ptr ss:[0]</code> → <strong>跳转到 cs:1Ah</strong></li><li>call 指令将 <strong>返回地址 IP=19h</strong> 和 <strong>CS=cs</strong> 入栈：<ul><li><code>ss:[4] = cs</code></li><li><code>ss:[6] = 0019h</code></li></ul></li></ul><p>进入 <code>s:</code> 标签后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov ax, offset s      ; ax = 1Ah</span><br><span class="line">sub ax, ss:[0ch]      ; ss:[0ch] = 19h → ax = 1Ah - 19h = 1</span><br><span class="line">mov bx, cs            ; bx = cs</span><br><span class="line">sub bx, ss:[0eh]      ; ss:[0eh] = cs → bx = cs - cs = 0</span><br></pre></td></tr></table></figure><h4 id=""></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ax = 1</span><br><span class="line">bx = 0</span><br></pre></td></tr></table></figure><h1>十一</h1><p>写出每条指令执行后，标志位的值：</p><table><thead><tr><th>指令</th><th>CF</th><th>OF</th><th>SF</th><th>ZF</th><th>PF</th></tr></thead><tbody><tr><td><code>sub al, al</code></td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td></tr><tr><td><code>mov al,10H</code></td><td>—</td><td>—</td><td>0</td><td>0</td><td>1</td></tr><tr><td><code>add al,90H</code></td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td><code>mov al,80H</code></td><td>—</td><td>—</td><td>1</td><td>0</td><td>1</td></tr><tr><td><code>add al,80H</code></td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td><code>mov al,0FCH</code></td><td>—</td><td>—</td><td>1</td><td>0</td><td>1</td></tr><tr><td><code>add al,05H</code></td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td><code>mov al,7DH</code></td><td>—</td><td>—</td><td>0</td><td>0</td><td>0</td></tr><tr><td><code>add al,0BH</code></td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td></tr></tbody></table><h1>知识框架</h1><h2 id="简答题">简答题</h2><h3 id="1-对汇编语言的理解">1.对汇编语言的理解</h3><p><strong>概念</strong>：面向机器的低级语言，使用符号化指令（助记符）</p><p><strong>优点</strong>：</p><ul><li>执行效率高（直接操作寄存器/内存）</li><li>控制力强（可精细操控硬件）</li><li>有助于理解计算机体系结构</li></ul><p><strong>缺点</strong>：</p><ul><li>语法繁琐、代码量大</li><li>可读性差、维护难度高</li><li>不可移植，依赖具体 CPU 架构</li></ul><h3 id="2-寄存器体系及其使用">2.寄存器体系及其使用</h3><table><thead><tr><th>标志位</th><th>含义</th><th>触发条件示例</th></tr></thead><tbody><tr><td><strong>ZF</strong></td><td>Zero Flag，零标志</td><td>运算结果为0时置位1</td></tr><tr><td><strong>SF</strong></td><td>Sign Flag，符号标志</td><td>运算结果最高位为1时置位1</td></tr><tr><td><strong>CF</strong></td><td>Carry Flag，进位/借位标志</td><td>无符号加法产生进位或减法借位时置1</td></tr><tr><td><strong>OF</strong></td><td>Overflow Flag，溢出标志</td><td>有符号运算超出范围时置1</td></tr><tr><td><strong>PF</strong></td><td>Parity Flag，奇偶标志（低8位偶数个1）</td><td>结果低8位中1的个数为偶数时置1</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sub al,al    → ZF=1, PF=1, SF=0</span><br><span class="line">mov al,10H   → ZF=0, PF=1, SF=0</span><br><span class="line">add al,90H   → SF=1, ZF=0, PF=1</span><br><span class="line">add al,80H   → OF=1, CF=1, ZF=1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-程序加载与段：偏移机制">3.程序加载与段：偏移机制</h3><p><strong>段地址（Segment Address）</strong>：指内存中一个<strong>64KB段的起始地址</strong>，由段寄存器（如 CS、DS、SS、ES）给出。</p><p><strong>偏移地址（Offset Address）</strong>：表示<strong>该段内的相对地址位置</strong>，通常由 IP、BX、SI、DI 等寄存器提供。</p><p><strong>物理地址计算公式</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">编辑物理地址 = 段地址 × 16 + 偏移地址</span><br><span class="line">        = 段地址 &lt;&lt; 4 + 偏移地址</span><br></pre></td></tr></table></figure><h3 id="4-条件与无条件跳转">4.条件与无条件跳转</h3><p><code>jmp</code>/ <code>je</code>/ <code>jne</code>/ <code>jg</code>… 指令格式</p><p>近跳转 vs 远跳转 vs 间接跳转</p><p>跳转目标：立即数、寄存器、内存</p><p><strong>jmp 指令</strong>：</p><p><strong>jmp 段内跳转</strong>：只修改 IP，CS 不变。<strong>jmp 段间跳转</strong>：同时修改 CS 和 IP</p><p><strong>call 指令：</strong></p><p>实现<strong>子程序调用</strong>，会将<strong>返回地址入栈</strong>，然后跳转到目标地址。</p><ul><li>近调用（段内）：只入栈 IP</li><li>远调用（段间）：先入栈 CS，再入栈 IP</li></ul><p>调用完成后跳转到子程序开始位置执行。</p><p><strong>ret / retf 指令</strong>：</p><p><strong>ret</strong>：弹出栈顶内容（IP）并跳回（适用于近调用）；</p><p><strong>retf</strong>：弹出两个字节恢复 IP，然后再弹出两个字节恢复 CS，实现段间返回。</p><h3 id="5-基本结构">5.基本结构</h3><p>汇编程序的基本结构：由代码段（存放指令）、数据段（存放数据）、栈段（管理栈空间）组成，程序入口标签（如 <code>start:</code>）指明执行起点，<code>end</code> 标记程序结束</p><p>段寄存器的作用及设置：CS 指向代码段，DS 指向数据段，SS 指向栈段。设置时先用 <code>mov ax, 段地址</code>，再用 <code>mov 段寄存器, ax</code> 装载段地址。</p><p>汇编程序的执行流程：CPU 从 CS:IP 指向位置开始执行指令，执行后 IP 自动加指令长度，跳转指令可修改 CS 和 IP 以改变执行流。</p><p>内存访问方式：内存地址由段寄存器和偏移地址组合计算，数据访问用 DS，代码访问用 CS，栈操作用 SS。</p><p>汇编指令的基本作用：<code>mov</code> 指令实现数据在寄存器和内存间传送，段寄存器初始化通过先装载到通用寄存器再转移。</p><h3 id="6-DOS-如何加载-EXE-可执行程序？">6.DOS 如何加载 EXE 可执行程序？</h3><p>DOS 从内存中找到一块空闲区域，段地址为 SA，偏移为 0000。</p><p>在 SA:0 开始的 256 字节内创建 PSP（程序段前缀），用于 DOS 和程序通信。</p><p>程序本体加载到 SA+10H:0 处，即从 256 字节后开始执行。</p><p>PSP 和程序在物理地址上连续，但逻辑段地址不同。</p><p>最后设置 DS=SA，CS:IP=SA+10H:0，准备开始执行程序。</p><h2 id="填空题">填空题</h2><h3 id="1-栈操作细节，push-pop-对-SP、SS-的影响">1.栈操作细节，<code>push</code>/ <code>pop</code> 对 SP、SS 的影响</h3><h3 id="2-转移指令格式，机器码长度、操作数类型">2.转移指令格式，机器码长度、操作数类型</h3><h3 id="3-子程序调用，call-ret-的入栈、出栈顺序">3.子程序调用，<code>call</code>/ <code>ret</code> 的入栈、出栈顺序</h3><h3 id="4-标志寄存器，ZF、SF、CF、OF-置位条件，哪些算术-逻辑指令影响哪些标志">4.标志寄存器，ZF、SF、CF、OF 置位条件，哪些算术/逻辑指令影响哪些标志</h3><h2 id="程序分析题">程序分析题</h2><p>1.<code>loop</code> 循环 &amp; CX 计数寄存器变化，<code>loop label</code> 的执行流程——取指、CX–1、ZF检查、跳转，执行次数与初始 CX 的关系</p><p>2.子程序/间接跳转跟踪，</p><p><code>call</code>/ <code>jmp reg</code>/ <code>ret</code> 全流程：</p><ol><li>IP 入栈</li><li>CS:IP 更新</li><li>返回地址弹栈</li></ol><p>3.复制程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">    mov ax, 0020h</span><br><span class="line">    mov ds, ax        ; DS = 源数据段 → <span class="number">0020</span>:<span class="number">0000</span> 起</span><br><span class="line">    mov ax, 0021h</span><br><span class="line">    mov es, ax        ; ES = 目标数据段 → <span class="number">0021</span>:<span class="number">0000</span> 起</span><br><span class="line"></span><br><span class="line">    mov bx, <span class="number">0</span></span><br><span class="line">    mov cx, <span class="number">10</span>        ; 拷贝 <span class="number">10</span> 个字节（或字符）</span><br><span class="line"></span><br><span class="line">s:  mov al, [bx]      ; 从 DS:[BX] 取数据（即 <span class="number">0020</span>:BX）</span><br><span class="line">    mov es:[bx], al   ; 写入 ES:[BX]（即 <span class="number">0021</span>:BX）</span><br><span class="line">    inc bx</span><br><span class="line">    loop s            ; 循环 CX 次，CX ← CX - <span class="number">1</span>，直到 CX=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    mov ax, 4c00h</span><br><span class="line">    <span class="type">int</span> 21h</span><br><span class="line">code ends</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将 DS:0000（0020:0000）开始的 <strong>10 个字节</strong> 拷贝到 ES:0000（0021:0000）开始的地址。</p><p><code>mov al, [bx]</code> 表示：从 <strong>DS:BX</strong> 指向的内存地址中读取一个字节到 AL（间接寻址）</p><p><code>mov es:[bx], al</code> 表示：将 AL 的值存入 ES:BX 指向的内存地址</p><p><code>loop s</code> = <code>dec cx; if cx != 0 then jmp s</code>，循环控制语句，用于固定次数循环</p><p><code>mov ds, ax</code> 和 <code>mov es, ax</code> 是设置数据段和额外段，访问内存前必须设置段寄存器</p><h1>编程题目</h1><ol><li><p><strong>基于 <code>loop</code> 的计数/求和程序（第5章）</strong></p></li><li><p><strong>段:偏移 数据搬运 + 栈管理（第6章）</strong></p><p>如：从数据段读字符串，压栈→子程序处理→弹栈</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">assume cs:codesg</span><br><span class="line">codesg segment</span><br><span class="line">dw 0123H,0456H,0789H,0ABCH,0DEFH,0FEDH,0CBAH,0987H</span><br><span class="line">start:mov ax,<span class="number">0</span></span><br><span class="line">mov ds,ax              ; DS → <span class="number">0</span>，即访问 <span class="number">0</span>:<span class="number">0</span>~<span class="number">0</span>:F</span><br><span class="line">mov bx,<span class="number">0</span></span><br><span class="line">mov cx,<span class="number">8</span></span><br><span class="line">s:mov ax,[bx]            ; 从内存 <span class="number">0000</span>:BX 处读两个字节到 AX</span><br><span class="line">mov cs:[bx],ax         ; 把 AX 写入代码段 CS:BX 位置的数据</span><br><span class="line">add bx,<span class="number">2</span></span><br><span class="line">loop s</span><br><span class="line">mov ax,4C00H</span><br><span class="line"><span class="type">int</span> 21H</span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>数据从<strong>0:0 ~ 0:F</strong>（16 字节，8 个字）依次读取，<strong>覆盖 CS 段中的初始数据区</strong></p><p>原始数据如 <code>0123H,0456H...</code> 将被替换为内存中读取的新数据</p><p>效果：<strong>程序数据区被外部数据动态更新</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">assume cs:codesg</span><br><span class="line">codesg segment</span><br><span class="line">dw 0123H,0456H,0789H,0ABCH,0DEFH,0FEDH,0CBAH,0987H</span><br><span class="line">dw <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>   ; 共<span class="number">16</span>字节空间，用作栈区</span><br><span class="line">start:mov ax,cs             ; 设定 SS = CS，栈在代码段中</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,<span class="number">36</span>             ; SP = <span class="number">36</span> → 栈顶指向代码段偏移 24h</span><br><span class="line">mov ax,<span class="number">0</span></span><br><span class="line">mov ds,ax</span><br><span class="line">mov bx,<span class="number">0</span></span><br><span class="line">mov cx,<span class="number">8</span></span><br><span class="line">s:push [bx]            ; 从 DS:BX（即 <span class="number">0</span>:<span class="number">0</span> 开始）压栈</span><br><span class="line">pop cs:[bx]          ; 从栈中弹出数据写入 CS:BX（覆盖初始数据）</span><br><span class="line">add bx,<span class="number">2</span></span><br><span class="line">loop s</span><br><span class="line">mov ax,4C00H</span><br><span class="line"><span class="type">int</span> 21H</span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用 <code>stack</code> 完成数据搬运，相当于：<br><code>ax ← ds:[bx] → push → 栈 → pop → cs:[bx]</code></p><p>使用 <code>push/pop</code> 方式达到 <strong>数据传送效果</strong></p><p>栈顶设为 24h（即 36 十进制）→ 从 <code>cs:0024h</code> 处开始使用栈</p><p>栈段的起始位置由 <code>ss = cs</code> 指定，即栈放在当前代码段末尾的空区域</p><ol><li><p><strong>大小写转换（第7章）</strong></p><ul><li>利用 <code>AL</code>/<code>AH</code> 与 ASCII 区别</li><li>不同寻址方式：立即、直接、寄存器间接</li></ul></li></ol><p><strong>将 <code>datasg</code> 段中每个字符串的前 4 个字母转换为大写字母</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">assume cs:codesg, ds:datasg, ss:stacksg</span><br><span class="line"></span><br><span class="line">stacksg segment</span><br><span class="line">    dw <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">stacksg ends</span><br><span class="line"></span><br><span class="line">datasg segment</span><br><span class="line">    db <span class="string">&#x27;1. display&#x27;</span></span><br><span class="line">    db <span class="string">&#x27;2. brows&#x27;</span></span><br><span class="line">    db <span class="string">&#x27;3. replace&#x27;</span></span><br><span class="line">    db <span class="string">&#x27;4. modify&#x27;</span></span><br><span class="line">datasg ends</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line">start:</span><br><span class="line">    mov ax, datasg</span><br><span class="line">    mov ds, ax</span><br><span class="line"></span><br><span class="line">    mov bx, <span class="number">3</span>      ; 第<span class="number">1</span>行，跳过 <span class="string">&#x27;1. &#x27;</span></span><br><span class="line">    call upper4</span><br><span class="line">    mov bx, <span class="number">13</span>     ; 第<span class="number">2</span>行，跳过 <span class="string">&#x27;2. &#x27;</span></span><br><span class="line">    call upper4</span><br><span class="line">    mov bx, <span class="number">21</span>     ; 第<span class="number">3</span>行，跳过 <span class="string">&#x27;3. &#x27;</span></span><br><span class="line">    call upper4</span><br><span class="line">    mov bx, <span class="number">31</span>     ; 第<span class="number">4</span>行，跳过 <span class="string">&#x27;4. &#x27;</span></span><br><span class="line">    call upper4</span><br><span class="line"></span><br><span class="line">    mov ax, 4C00h</span><br><span class="line">    <span class="type">int</span> 21h</span><br><span class="line"></span><br><span class="line">; 子程序：将 [bx] 开始的<span class="number">4</span>个字母改为大写</span><br><span class="line">upper4:</span><br><span class="line">    mov cx, <span class="number">4</span></span><br><span class="line">next:</span><br><span class="line">    mov al, [bx]</span><br><span class="line">    cmp al, <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    jb skip</span><br><span class="line">    cmp al, <span class="string">&#x27;z&#x27;</span></span><br><span class="line">    ja skip</span><br><span class="line">    sub al, 20h</span><br><span class="line">    mov [bx], al</span><br><span class="line">skip:</span><br><span class="line">    inc bx</span><br><span class="line">    loop next</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>每条字符串偏移</strong>分别是：3、13、21、31（跳过编号和点空格）。</p><p><strong>upper4 子程序</strong>：处理从 <code>[bx]</code> 开始的 4 个字符。</p><p>利用了 <code>cmp</code> 和 <code>sub</code> 判断是否是小写字母。</p><ol><li><p><strong>字符串操作指令综合（第8章）</strong></p><ul><li><code>MOVS</code>/<code>LODS</code>/<code>STOS</code>/<code>CMPS</code>/<code>SCAS</code> 实现功能</li></ul></li></ol><p>编写程序，将 <code>data</code> 段中：</p><ul><li>21个年份（每个4字节字符串）</li><li>21个年收入（每个4字节 dword）</li><li>21个雇员数（每个2字节 word）</li></ul><p>分别搬运进 <code>table</code> 段中（每行16字节），<strong>并计算人均收入（dword / word → word，单位：千美元）</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">assume cs:codesg, ds:dataseg, es:tablesg</span><br><span class="line"></span><br><span class="line">dataseg segment</span><br><span class="line">years db <span class="string">&#x27;1975&#x27;</span>,<span class="string">&#x27;1976&#x27;</span>,<span class="string">&#x27;1977&#x27;</span>,<span class="string">&#x27;1978&#x27;</span>,<span class="string">&#x27;1979&#x27;</span>,<span class="string">&#x27;1980&#x27;</span>,<span class="string">&#x27;1981&#x27;</span>,<span class="string">&#x27;1982&#x27;</span>,<span class="string">&#x27;1983&#x27;</span></span><br><span class="line">      db <span class="string">&#x27;1984&#x27;</span>,<span class="string">&#x27;1985&#x27;</span>,<span class="string">&#x27;1986&#x27;</span>,<span class="string">&#x27;1987&#x27;</span>,<span class="string">&#x27;1988&#x27;</span>,<span class="string">&#x27;1989&#x27;</span>,<span class="string">&#x27;1990&#x27;</span>,<span class="string">&#x27;1991&#x27;</span>,<span class="string">&#x27;1992&#x27;</span></span><br><span class="line">      db <span class="string">&#x27;1993&#x27;</span>,<span class="string">&#x27;1994&#x27;</span>,<span class="string">&#x27;1995&#x27;</span></span><br><span class="line">sums  dd <span class="number">16</span>,<span class="number">22</span>,<span class="number">382</span>,<span class="number">1356</span>,<span class="number">2390</span>,<span class="number">8000</span>,<span class="number">16000</span>,<span class="number">24486</span>,<span class="number">50065</span>,<span class="number">97479</span></span><br><span class="line">      dd <span class="number">140417</span>,<span class="number">197514</span>,<span class="number">345980</span>,<span class="number">590827</span>,<span class="number">803530</span>,<span class="number">1183000</span>,<span class="number">1843000</span></span><br><span class="line">      dd <span class="number">2759000</span>,<span class="number">3753000</span>,<span class="number">4649000</span>,<span class="number">5937000</span></span><br><span class="line">nums  dw <span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">28</span>,<span class="number">38</span>,<span class="number">130</span>,<span class="number">220</span>,<span class="number">476</span>,<span class="number">778</span></span><br><span class="line">      dw <span class="number">1001</span>,<span class="number">1442</span>,<span class="number">2258</span>,<span class="number">2793</span>,<span class="number">4037</span>,<span class="number">5635</span>,<span class="number">8226</span>,<span class="number">11542</span>,<span class="number">14430</span>,<span class="number">15257</span>,<span class="number">17800</span></span><br><span class="line">dataseg ends</span><br><span class="line"></span><br><span class="line">tablesg segment</span><br><span class="line">table db <span class="number">21</span> dup (<span class="number">16</span> dup (<span class="number">0</span>))  ; <span class="number">21</span>个结构，每个<span class="number">16</span>字节清零初始化</span><br><span class="line">tablesg ends</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line">start:</span><br><span class="line">    mov ax, dataseg</span><br><span class="line">    mov ds, ax         ; 数据段 → DS</span><br><span class="line"></span><br><span class="line">    mov ax, tablesg</span><br><span class="line">    mov es, ax         ; 表格段 → ES</span><br><span class="line"></span><br><span class="line">    xor si, si         ; si 用于索引年份</span><br><span class="line">    xor di, di         ; di = 结构偏移 = ES:table[i * <span class="number">16</span>]</span><br><span class="line">    xor bx, bx         ; bx 用于访问 sums 和 nums</span><br><span class="line">    mov cx, <span class="number">21</span>         ; 共 <span class="number">21</span> 年数据</span><br><span class="line"></span><br><span class="line">write_loop:</span><br><span class="line">    ; 拷贝年份 (<span class="number">4</span> 字节)</span><br><span class="line">    mov al, [years + si]</span><br><span class="line">    mov es:[di], al</span><br><span class="line">    mov al, [years + si + <span class="number">1</span>]</span><br><span class="line">    mov es:[di + <span class="number">1</span>], al</span><br><span class="line">    mov al, [years + si + <span class="number">2</span>]</span><br><span class="line">    mov es:[di + <span class="number">2</span>], al</span><br><span class="line">    mov al, [years + si + <span class="number">3</span>]</span><br><span class="line">    mov es:[di + <span class="number">3</span>], al</span><br><span class="line"></span><br><span class="line">    ; 拷贝收入 (dword, <span class="number">4</span> 字节)</span><br><span class="line">    mov ax, word ptr [sums + bx]</span><br><span class="line">    mov es:[di + <span class="number">4</span>], ax</span><br><span class="line">    mov ax, word ptr [sums + bx + <span class="number">2</span>]</span><br><span class="line">    mov es:[di + <span class="number">6</span>], ax</span><br><span class="line"></span><br><span class="line">    ; 拷贝雇员数 (word, <span class="number">2</span> 字节)</span><br><span class="line">    mov ax, word ptr [nums + bx]</span><br><span class="line">    mov es:[di + <span class="number">8</span>], ax</span><br><span class="line"></span><br><span class="line">    ; 计算人均收入 = dword / word</span><br><span class="line">    ; dx:ax = 总收入</span><br><span class="line">    ; cx = 雇员数</span><br><span class="line">    mov ax, word ptr [sums + bx]</span><br><span class="line">    mov dx, word ptr [sums + bx + <span class="number">2</span>]  ; dx:ax = dword</span><br><span class="line">    mov cx, word ptr [nums + bx]</span><br><span class="line">    cmp cx, <span class="number">0</span></span><br><span class="line">    je skip_div                       ; 避免除 <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    div cx                            ; AX = 商（人均收入），DX = 余数</span><br><span class="line"></span><br><span class="line">    mov es:[di + <span class="number">10</span>], ax             ; 写入人均收入（word）</span><br><span class="line"></span><br><span class="line">skip_div:</span><br><span class="line">    add si, <span class="number">4</span>       ; 下一年年份字符串偏移</span><br><span class="line">    add di, <span class="number">16</span>      ; 下一结构偏移</span><br><span class="line">    add bx, <span class="number">4</span>       ; sums + nums 的索引前进</span><br><span class="line">    loop write_loop</span><br><span class="line"></span><br><span class="line">    ; 退出程序</span><br><span class="line">    mov ax, 4C00h</span><br><span class="line">    <span class="type">int</span> 21h</span><br><span class="line">codesg ends</span><br><span class="line"></span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/">期末考试</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/">汇编语言</category>
      
      
      <comments>https://blog.tokenlen.top/2025/06/21/lastteam/huibian/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>计算方法期末复习</title>
      <link>https://blog.tokenlen.top/2025/06/18/lastteam/jisuanfangfa/</link>
      <guid>https://blog.tokenlen.top/2025/06/18/lastteam/jisuanfangfa/</guid>
      <pubDate>Tue, 17 Jun 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;hr&gt;
&lt;h1&gt;计算方法——公式汇总&lt;/h1&gt;
&lt;h2 id=&quot;第一章：误差分析&quot;&gt;第一章：误差分析&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;绝对误差&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Δ=∣x∗−x∣&#92;Delta = &#92;bigl|x^* -</description>
          
        
      
      
      
      <content:encoded><![CDATA[<hr><h1>计算方法——公式汇总</h1><h2 id="第一章：误差分析">第一章：误差分析</h2><ol><li><p><strong>绝对误差</strong></p><p>Δ=∣x∗−x∣\Delta = \bigl|x^* - x\bigr|</p></li><li><p><strong>相对误差</strong></p><p>δ=∣x∗−x∣∣x∗∣\delta = \frac{\bigl|x^* - x\bigr|}{\lvert x^*\rvert}</p></li><li><p><strong>四舍五入误差限</strong>（保留到第 nn 位有效数字）</p><p>Δmax⁡=12×10−n,δmax⁡=Δmax⁡∣x∣\Delta_{\max} = \tfrac12 \times 10^{-n}, \quad \delta_{\max} = \frac{\Delta_{\max}}{\lvert x\rvert}</p></li><li><p><strong>有效数字与相对误差关系</strong><br>若已知相对误差 ε\varepsilon，则有效数字位数 nn 满足</p><p>12 10−(n−1)  ≤  ε  &lt;  12 10−(n−2).\frac12 ,10^{-(n-1)} ;\le; \varepsilon ;&lt;; \frac12 ,10^{-(n-2)}.</p></li><li><p><strong>误差传播</strong></p><ul><li><p>乘除法：</p><p>δ(f(x1,…,xk))≈∑i=1kδ(xi).\delta\bigl(f(x_1,\dots,x_k)\bigr) \approx \sum_{i=1}^k \delta(x_i).</p></li><li><p>加减法：</p><p>Δ(f(x1,…,xk))≈∑i=1kΔ(xi).\Delta\bigl(f(x_1,\dots,x_k)\bigr) \approx \sum_{i=1}^k \Delta(x_i).</p></li><li><p>例：若 A=LWA = L W，则</p><p>Δ(A)  ≤  ∣W∣ Δ(L)+∣L∣ Δ(W),δ(A)≈δ(L)+δ(W).\Delta(A) ;\le; |W|,\Delta(L) + |L|,\Delta(W), \quad \delta(A)\approx\delta(L)+\delta(W).</p></li></ul></li></ol><hr><h2 id="第二章：非线性方程求解">第二章：非线性方程求解</h2><ol><li><p><strong>根存在性</strong><br>若 ff 在 [a,b][a,b] 连续且</p><p>f(a) f(b)&lt;0,f(a),f(b) &lt; 0,</p><p>则 (a,b)(a,b) 内至少有一实根。</p></li><li><p><strong>二分法误差界</strong></p><p>∣xn−x∗∣≤b−a2n,n≥⌈log⁡2b−aε⌉.\bigl|x_n - x^*\bigr| \le \frac{b-a}{2^n}, \quad n \ge \bigl\lceil \log_2\tfrac{b-a}{\varepsilon}\bigr\rceil.</p></li><li><p><strong>不动点迭代</strong><br>写成 x=g(x)x = g(x)，迭代</p><p>xn+1=g(xn),x_{n+1} = g(x_n),</p><p>收敛条件：∣g′(x)∣&lt;1\lvert g’(x)\rvert &lt; 1（根附近）。</p></li><li><p><strong>牛顿法</strong></p><p>xn+1=xn−f(xn)f′(xn).x_{n+1} = x_n - \frac{f(x_n)}{f’(x_n)}.</p><p>如为重根 mm，可修正为</p><p>xn+1=xn−m f(xn)f′(xn).x_{n+1} = x_n - m,\frac{f(x_n)}{f’(x_n)}.</p></li><li><p><strong>割线法</strong></p><p>xn+1=xn−f(xn) xn−xn−1f(xn)−f(xn−1).x_{n+1} = x_n - f(x_n), \frac{x_n - x_{n-1}}{f(x_n) - f(x_{n-1})}.</p></li></ol><hr><h2 id="第三章：线性方程组数值解法">第三章：线性方程组数值解法</h2><ol><li><p><strong>高斯消去法</strong><br>增广矩阵 [A∣b][A\mid b] → 逐列消元 → 回代求解。</p></li><li><p><strong>列主元策略</strong><br>每列选绝对值最大的元素作为主元，交换后再消元。</p></li><li><p><strong>Jacobi 迭代</strong><br>令 A=D+L+UA=D+L+U，则</p><p>xi(k+1)=1aii(bi−∑j≠iaij xj(k)).x_i^{(k+1)} = \frac{1}{a_{ii}} \Bigl(b_i - \sum_{j\ne i} a_{ij},x_j^{(k)}\Bigr).</p></li><li><p><strong>Gauss–Seidel 迭代</strong></p><p>xi(k+1)=1aii(bi−∑j&lt;iaij xj(k+1)−∑j&gt;iaij xj(k)).x_i^{(k+1)} = \frac{1}{a_{ii}} \Bigl( b_i - \sum_{j&lt;i} a_{ij},x_j^{(k+1)} - \sum_{j&gt;i} a_{ij},x_j^{(k)} \Bigr).</p></li><li><p><strong>SOR（超松弛方法）</strong></p><p>xi(k+1)=(1−ω) xi(k)+ωaii(bi−∑j&lt;iaij xj(k+1)−∑j&gt;iaij xj(k)),x_i^{(k+1)} = (1-\omega),x_i^{(k)} + \frac{\omega}{a_{ii}} \Bigl( b_i - \sum_{j&lt;i} a_{ij},x_j^{(k+1)} - \sum_{j&gt;i} a_{ij},x_j^{(k)} \Bigr),</p><p>其中 1&lt;ω&lt;21&lt;\omega&lt;2。</p></li></ol><hr><h2 id="第四章：插值与拟合">第四章：插值与拟合</h2><ol><li><p><strong>拉格朗日插值</strong><br>给定 (x0,y0),…,(xn,yn)(x_0,y_0),\dots,(x_n,y_n)，</p><p>L(x)=∑j=0nyj ℓj(x),ℓj(x)=∏i=0, i≠jnx−xixj−xi.L(x) = \sum_{j=0}^n y_j,\ell_j(x), \quad \ell_j(x) = \prod_{i=0,,i\ne j}^n \frac{x - x_i}{x_j - x_i}.</p></li><li><p><strong>牛顿插值</strong><br>利用差商，</p><p>Pn(x)=f[x0]+f[x0,x1] (x−x0)+⋯+f[x0,…,xn] ∏i=0n−1(x−xi).P_n(x) = f[x_0] + f[x_0,x_1],(x-x_0) + \cdots + f[x_0,\dots,x_n],\prod_{i=0}^{n-1}(x-x_i).</p></li><li><p><strong>插值余项</strong></p><p>Rn+1(x)=f(x)−Pn(x)=f(n+1)(ξ)(n+1)!∏i=0n(x−xi),ξ∈[a,b].R_{n+1}(x) = f(x) - P_n(x) = \frac{f^{(n+1)}(\xi)}{(n+1)!} \prod_{i=0}^n (x - x_i),\quad \xi\in[a,b].</p></li></ol><hr><h2 id="第五章：最小二乘拟合">第五章：最小二乘拟合</h2><ol><li><p><strong>一元线性拟合（直线）</strong><br>设 y=ax+by = a x + b，构造正则方程：</p><p>{a∑xi2+b∑xi=∑xiyi,a∑xi+nb=∑yi.\begin{cases} a\sum x_i^2 + b\sum x_i = \sum x_i y_i,\ a\sum x_i + nb = \sum y_i. \end{cases}</p></li><li><p><strong>二次多项式拟合</strong><br>设 y=a0+a1x+a2x2y = a_0 + a_1 x + a_2 x^2，正则方程：</p><p>{na0+(∑xi)a1+(∑xi2)a2=∑yi,(∑xi)a0+(∑xi2)a1+(∑xi3)a2=∑xiyi,(∑xi2)a0+(∑xi3)a1+(∑xi4)a2=∑xi2yi.\begin{cases} n a_0 + (\sum x_i)a_1 + (\sum x_i^2)a_2 = \sum y_i,\ (\sum x_i)a_0 + (\sum x_i^2)a_1 + (\sum x_i^3)a_2 = \sum x_i y_i,\ (\sum x_i^2)a_0 + (\sum x_i^3)a_1 + (\sum x_i^4)a_2 = \sum x_i^2 y_i. \end{cases}</p></li><li><p><strong>加权最小二乘</strong><br>使加权残差平方和最小：</p><p>min⁡∑iwi(yi−P(xi))2.\min \sum_{i} w_i \bigl(y_i - P(x_i)\bigr)^2.</p></li></ol><hr><p>以上公式皆为 <strong>LaTeX</strong> 标准形式，复制到支持 MathJax 或 LaTeX 渲染的 Markdown 编辑器中即可正确显示。</p>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/C/">C</category>
      
      <category domain="https://blog.tokenlen.top/categories/C/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/">期末考试</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/java/">java</category>
      
      
      <comments>https://blog.tokenlen.top/2025/06/18/lastteam/jisuanfangfa/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Mydb自定义数据库八股</title>
      <link>https://blog.tokenlen.top/2025/06/12/workmenu/mydb2/</link>
      <guid>https://blog.tokenlen.top/2025/06/12/workmenu/mydb2/</guid>
      <pubDate>Wed, 11 Jun 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1&gt;项目问题&lt;/h1&gt;
&lt;h2 id=&quot;1-在-Mydb-数据库中，日志模块是如何实现崩溃恢复的？请详细说明日志格式、校验机制、写入流程和恢复逻辑，并分析可能存在的性能瓶颈及优化方案。&quot;&gt;1.在 Mydb</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1>项目问题</h1><h2 id="1-在-Mydb-数据库中，日志模块是如何实现崩溃恢复的？请详细说明日志格式、校验机制、写入流程和恢复逻辑，并分析可能存在的性能瓶颈及优化方案。">1.在 Mydb 数据库中，日志模块是如何实现崩溃恢复的？请详细说明日志格式、校验机制、写入流程和恢复逻辑，并分析可能存在的性能瓶颈及优化方案。</h2><h3 id="日志设计">日志设计</h3><p>redo log:记录事务提交后的数据修改，用于崩溃后重做已提交事务（如数据页修改记录）；</p><p>undo log:记录事务提交前的原始状态，用于回滚未提交事务（如行版本号、旧值）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[全局校验码(4B)][日志条目1][日志条目2]...  </span><br><span class="line">日志条目格式：[条目长度(4B)][校验码(4B)][数据内容(N字节)]  </span><br></pre></td></tr></table></figure><p>日志文件头部 4 字节为全局校验码，每条日志以<code>[4字节长度+4字节校验码+数据]</code>组成。启动时会从头部开始校验每条日志的 checksum，若全局校验码不一致则截断文件尾部。”</p><h3 id="崩溃恢复">崩溃恢复</h3><p>校验</p><ul><li>从文件头部开始读取每条日志，校验单条日志的 checksum；</li><li>累计计算全局校验码，与文件头部校验码比对，不一致则截断文件尾部。</li></ul><p>redo</p><ul><li>扫描日志，提取所有状态为<code>COMMITTED</code>的事务记录；</li><li>按日志顺序重新执行数据修改操作（如更新数据页）。</li></ul><p>undo</p><ul><li>扫描日志，找到状态为<code>ACTIVE</code>或<code>ABORTED</code>的事务；</li><li>根据 Undo 日志恢复数据原始状态（如行版本号回退）。</li></ul><h3 id="日志写入和刷盘">日志写入和刷盘</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 日志写入伪代码  </span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">appendLog</span><span class="params">(<span class="type">byte</span>[] data)</span> &#123;  </span><br><span class="line">    <span class="type">byte</span>[] entry = wrapLog(data); <span class="comment">// 封装[长度+校验码+数据]  </span></span><br><span class="line">    fileChannel.position(fileChannel.size());  </span><br><span class="line">    fileChannel.write(ByteBuffer.wrap(entry));  </span><br><span class="line">    updateGlobalChecksum(entry); <span class="comment">// 更新全局校验码  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>刷盘策略：</p><ul><li><strong>同步刷盘（SYNC）</strong>：每条日志写入后立即调用<code>force()</code>刷盘，可靠性高但性能低；</li><li><strong>异步刷盘（ASYNC）</strong>：使用双阈值策略（时间阈值 + 大小阈值）：</li></ul><p>使用一个异步的线程池来实现，满足任一条件即可刷盘，提升灵活性与性能保障</p><p>多次 <code>flush()</code> 只设置标志，合并后统一刷盘</p><p>使用原子变量 + <code>synchronized</code> 保证数据一致性</p><p>可通过 <code>shutdown()</code> 停止任务，或动态调整周期</p><p>可通过参数设定周期，如每 100ms 刷一次</p><p>最长可能延迟 <code>flushIntervalMillis</code>，适合非关键日志</p><p>异步刷盘使用<code>ScheduledThreadPoolExecutor</code>定时检查，当日志缓冲区大小超过 1MB 或距上次刷盘超过 2 秒时，加锁批量刷盘，避免多线程同时操作文件导致的一致性问题。”</p><ul><li><strong>不刷盘（NO_FLUSH）</strong>：仅用于测试，数据可能丢失。</li></ul><h3 id="性能问题">性能问题</h3><p><strong>同步刷盘导致的 IO 阻塞</strong></p><p>高并发下刷盘成为瓶颈，TPS 下降（如单线程同步刷盘时 TPS≤1000）。</p><ul><li>采用<strong>组提交（Group Commit）</strong>：将多个日志条目批量刷盘（如每 100 条刷一次）；</li><li>引入<strong>内存映射文件（MappedByteBuffer）</strong>，减少用户态到内核态的拷贝。</li></ul><p><strong>异步刷盘的数据一致性风险</strong></p><ul><li>实现<strong>WAL（Write-Ahead Logging）</strong> 机制：事务提交前强制刷盘 Redo 日志；</li><li>增加<strong>刷盘回调机制</strong>：刷盘完成后通知事务提交。</li></ul><p><strong>日志校验的 CPU 开销</strong></p><ul><li>用<strong>CRC32C 算法</strong>替代自定义校验（JDK1.8 <code>java.util.zip.CRC32C</code>，性能提升 3 倍）；</li><li>对热数据日志启用<strong>校验缓存</strong>，避免重复计算。</li></ul><p>日志缓存可将<code>HashMap+ReentrantLock</code>改为<code>ConcurrentHashMap</code>，利用分段锁减少并发竞争。例如，缓存热点日志的校验结果时，读操作无需加锁，写操作仅锁定对应分段。”</p><p><strong>日志分段与归档</strong></p><ul><li>按时间或大小分割日志文件（如每 1GB 一个文件），避免单文件过大；</li><li>归档旧日志文件，定期清理无效日志（如已完成事务的 Undo 日志）。</li></ul><p><strong>异步刷盘策略下，系统崩溃导致 10 秒内的日志丢失（约 5000 条）。</strong></p><ul><li>调整双阈值为<code>大小阈值=1MB</code>+<code>时间阈值=2秒</code>，平衡性能与可靠性；</li><li>关键业务场景强制使用同步刷盘（如资金交易）。</li></ul><h2 id="2-在-Mydb-数据库中，B-树索引是如何实现高效查询和插入的？请详细说明节点结构、查询算法、插入分裂策略，并分析高并发场景下的性能瓶颈及优化方案。">2.在 Mydb 数据库中，B + 树索引是如何实现高效查询和插入的？请详细说明节点结构、查询算法、插入分裂策略，并分析高并发场景下的性能瓶颈及优化方案。</h2><h3 id="B-树核心结构设计">B + 树核心结构设计</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[叶子标志(1B)][键数量(2B)][兄弟节点UID(8B)][子节点UID/键值对]  </span><br><span class="line">叶子节点：[键<span class="number">1</span>][值<span class="number">1</span>][键<span class="number">2</span>][值<span class="number">2</span>]...[键n][值n]  </span><br><span class="line">非叶子节点：[子节点UID1][键<span class="number">1</span>][子节点UID2][键<span class="number">2</span>]...[子节点UIDn][键n]  </span><br></pre></td></tr></table></figure><ul><li><strong>叶子节点</strong>：存储实际键值对，通过双向链表连接（便于范围查询）；</li><li><strong>非叶子节点</strong>：仅存储键和子节点引用，加速检索。</li><li><strong>扇出（Fan-Out）</strong>：单个节点可容纳的子节点数，由键长和页大小决定（如 8KB 页 + 8B 键 + 8B 引用，扇出≈512）；</li><li><strong>阶数（Order）</strong>：节点的最小子节点数（通常为扇出的 1/2），保证树的平衡。</li></ul><p>B + 树节点包含叶子标志位（1 字节）、键数量（2 字节）、兄弟节点 UID（8 字节），叶子节点存储键值对，非叶子节点存储子节点 UID 和分隔键，通过页结构（如 4KB）组织数据。”</p><h3 id="查找">查找</h3><p><strong>非叶子节点</strong>：用二分查找确定子节点方向；</p><p><strong>叶子节点</strong>：顺序遍历键值对（因叶子节点有序，可快速定位）。</p><p><strong>IO 次数</strong>：3 层 B + 树可存储约 1000 万条数据，查询仅需 3 次 IO（页大小 16KB，扇出 1000）；</p><p><strong>内存效率</strong>：非叶子节点仅存储键和引用，内存占用比二叉搜索树低 80%。</p><p>查询时非叶子节点用二分查找确定子节点方向，叶子节点因有序可快速定位，范围查询时通过叶子节点的双向链表遍历，避免全树扫描。</p><h3 id="插入与分裂">插入与分裂</h3><p>插入</p><ul><li>定位到目标叶子节点，若空间足够则直接插入；</li><li>若空间不足，触发节点分裂。</li></ul><p>分裂逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">splitLeafNode</span><span class="params">(LeafNode node)</span> &#123;  </span><br><span class="line">    <span class="type">LeafNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LeafNode</span>();  </span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> node.keyCount / <span class="number">2</span>;  </span><br><span class="line">    <span class="comment">// 复制后半部分键值对到新节点  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mid; i &lt; node.keyCount; i++) &#123;  </span><br><span class="line">        newNode.insert(node.keys[i], node.values[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    node.keyCount = mid;  </span><br><span class="line">    <span class="comment">// 连接兄弟节点  </span></span><br><span class="line">    newNode.sibling = node.sibling;  </span><br><span class="line">    node.sibling = newNode.uid;  </span><br><span class="line">    <span class="comment">// 向父节点插入新节点引用  </span></span><br><span class="line">    insertIntoParent(node, newNode.smallestKey, newNode.uid);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><ul><li><strong>分裂点</strong>：取节点中键的中间位置，前半部分保留，后半部分放入新节点；</li><li><strong>父节点更新</strong>：父节点插入新节点的最小键和 UID，若父节点也满则递归分裂。</li></ul><p>分裂时将节点后半部分数据移至新节点，新节点的兄弟<strong>指针指向原节点的兄弟</strong>，<strong>原节点的兄弟指针指向新节点</strong>，并向父节点插入新节点的最小键和 UID，若父节点已满则递归分裂。</p><p>插入 / 分裂时仅锁定目标节点,ReentrantLock.</p><h3 id="性能问题-2">性能问题</h3><p><strong>节点锁竞争</strong></p><p>高并发插入时，多个线程争夺同一节点锁，导致吞吐量下降（如 1000TPS 时下降至 300TPS）</p><ul><li><p>分层锁（Locking Hierarchy）：</p><ul><li>非叶子节点用<code>ReadWriteLock</code>，读操作共享锁，写操作排他锁；</li><li>叶子节点用<code>ReentrantLock</code>，支持可重入和公平锁模式。</li></ul></li><li><p>使用乐观锁：</p></li><li><pre><code class="language-java">boolean casInsert(Node node, long expectedVersion) &#123;      if (node.version != expectedVersion) return false;      // 插入操作...      node.version++;      return true;  &#125;  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**缓存失效与 IO 风暴**</span><br><span class="line"></span><br><span class="line">大量随机插入导致 B + 树重组，缓存命中率下降（如从 90% 降至 50%）。</span><br><span class="line"></span><br><span class="line">- **节点预读（Read-Ahead）**：查询时预判下一层节点，提前加载到缓存；</span><br><span class="line">- **冷热数据分离**：用`LRU缓存`存储热点节点，冷节点定期淘汰（如最近 10 分钟未访问的节点）。LRU可以使用hashmap+reentrantlock或者使用更加精细的concurrenthashmap+readwritrlock</span><br><span class="line"></span><br><span class="line">**范围查询性能衰减**</span><br><span class="line"></span><br><span class="line">大范围查询时遍历叶子链表，导致 CPU 占用过高（如查询 10 万条记录时 CPU 占比 100%）。</span><br><span class="line"></span><br><span class="line">- **批量读取（Batch Read）**：一次读取多个页（如 16 个页），减少 IO 次数；</span><br><span class="line">- **异步查询（Async Query）**：将大范围查询放入单独线程池，避免阻塞业务线程：</span><br><span class="line"></span><br><span class="line">### 优化</span><br><span class="line"></span><br><span class="line">**写入优化：批量插入与合并分裂**</span><br><span class="line"></span><br><span class="line">- **批量插入**：将多个插入操作合并为一批，减少分裂次数（如每 1000 条插入后统一分裂）；</span><br><span class="line">- **分裂合并**：当相邻节点利用率低于 50% 时，合并节点以减少树高。</span><br><span class="line"></span><br><span class="line">**索引覆盖与前缀索引**</span><br><span class="line"></span><br><span class="line">- **索引覆盖**：设计索引时包含查询所需全部字段，避免回表（如`SELECT id,name FROM table WHERE id&gt;100`）；</span><br><span class="line">- **前缀索引**：对长字符串取前缀建立索引（如取 URL 前 100 字节），减少索引体积。</span><br><span class="line"></span><br><span class="line">**监控与调优指标**</span><br><span class="line"></span><br><span class="line">节点锁等待时间（理想≤1ms）；</span><br><span class="line"></span><br><span class="line">缓存命中率（理想≥95%）；</span><br><span class="line"></span><br><span class="line">平均 IO 次数（理想≤3 次 / 查询）。</span><br><span class="line"></span><br><span class="line">调优工具：</span><br><span class="line"></span><br><span class="line">- 用`JProfiler`监控索引操作热点方法；</span><br><span class="line">- 用`BTrace`追踪节点锁竞争场景。</span><br><span class="line"></span><br><span class="line">**电商大促时，商品索引插入性能骤降，导致订单创建延迟从 50ms 升至 500ms。**</span><br><span class="line"></span><br><span class="line">高并发插入导致 B + 树频繁分裂，节点锁竞争激烈。</span><br><span class="line"></span><br><span class="line">- 启用**写入限流**（如每秒最多 1 万次插入），超出则返回 “系统繁忙”；</span><br><span class="line">- 采用**分段 B + 树**：按商品 ID 哈希分为 16 段，每段独立索引，减少锁冲突；</span><br><span class="line">- 大促前预扩容索引，预留 30% 空间（如初始扇出 512，大促时调整为 358）。</span><br><span class="line">- 高并发插入时，可采用写入分组（如按 UID 哈希分 16 组，每组独立索引），配合令牌桶限流（如每组每秒 1000 次插入），减少节点锁竞争；同时用乐观锁（CAS）避免频繁加锁。</span><br><span class="line"></span><br><span class="line">## 3.在 Mydb 数据库中，如何实现事务的 ACID 特性？请详细说明事务日志（Redo/Undo）、锁机制、MVCC 的作用，并分析高并发场景下的脏读、不可重复读、幻读解决方案。</span><br><span class="line"></span><br><span class="line">### ACID</span><br><span class="line"></span><br><span class="line">- **原子性（Atomicity）**：通过 Undo 日志记录事务前状态，回滚时恢复；</span><br><span class="line">- **一致性（Consistency）**：通过 Redo+Undo 共同保证（Redo 重做已提交事务，Undo 回滚未提交事务）；</span><br><span class="line">- **持久性（Durability）**：Redo 日志刷盘后，即使崩溃也能恢复数据；</span><br><span class="line">- **隔离性（Isolation）**：通过 MVCC + 锁机制实现不同隔离级别。</span><br><span class="line"></span><br><span class="line">事务提交时，先写 Undo 日志记录旧值，再写 Redo 日志记录新值，最后刷盘 Redo 日志（WAL 原则），确保崩溃后 Redo 已提交事务，Undo 回滚未提交事务。</span><br><span class="line"></span><br><span class="line">### MVCC</span><br><span class="line"></span><br><span class="line">“MVCC 通过版本号（或时间戳）实现快照读：</span><br><span class="line"></span><br><span class="line">1. 事务启动时记录当前最大活跃事务 ID（max_trx_id）；</span><br><span class="line">2. 读取数据时，若数据版本号 &lt; 当前事务 ID 且不在活跃事务列表中，可读；</span><br><span class="line">3. 若数据版本号 &gt;= max_trx_id，不可见</span><br><span class="line">3. 数据版本号在活跃事务id里面，不可见</span><br><span class="line">4. MVCC 通过快照读避免锁竞争，适合读多写少场景（如报表查询）；锁机制适合写多场景（如订单扣款），需根据业务场景选择。”</span><br><span class="line"></span><br><span class="line">隔离级别：</span><br><span class="line"></span><br><span class="line">- **读已提交（RC）**：每次查询加行级锁，读完释放，避免脏读；</span><br><span class="line">- **可重复读（RR）**：查询加快照读（MVCC），更新加行级锁 + 间隙锁，避免不可重复读和幻读；</span><br><span class="line">- **串行化（Serializable）**：全表加锁，串行执行。</span><br><span class="line"></span><br><span class="line">## 4.在 “MinaDB - 自研轻量级数据库系统” 项目里，你实现了基于 Java NIO 的数据页读写管理模块，提升了 3 倍访问效率，讲讲 Java NIO 是咋在这个模块里发挥作用的，和传统 I/O 相比，具体优化点在哪呀？</span><br><span class="line"></span><br><span class="line">BIO 与 NIO 的区别：</span><br><span class="line"></span><br><span class="line">**BIO（Blocking I/O）**：每个请求需要一个线程处理，线程阻塞在 I/O 操作上，连接数一多就容易造成线程资源耗尽，系统响应慢。</span><br><span class="line"></span><br><span class="line">**NIO（Non-blocking I/O）**：通过 **Selector + Channel + Buffer** 实现多路复用，单线程可监听多个 Channel，避免大量线程阻塞等待，提高了资源利用率。</span><br><span class="line"></span><br><span class="line">NIO 工作机制：</span><br><span class="line"></span><br><span class="line">- 客户端连接通过 `ServerSocketChannel` 接收；</span><br><span class="line">- 每个 `Channel` 注册到 `Selector` 上，监听感兴趣的事件（如 `READ`、`WRITE`）；</span><br><span class="line">- Selector 使用 `select()` **非阻塞轮询**就绪事件；</span><br><span class="line">- 当某个 Channel 有事件到达，就通过 `Buffer` 读写数据，由工作线程处理请求。</span><br><span class="line"></span><br><span class="line">这种模型的优势是：**少量线程可处理高并发请求**，适合 I/O 密集型场景。</span><br><span class="line"></span><br><span class="line">数据库应用：</span><br><span class="line"></span><br><span class="line">数据库系统天然是多并发场景，传统 BIO 每个连接对应一个线程，会造成线程浪费甚至上下文切换频繁；</span><br><span class="line"></span><br><span class="line">使用 NIO 模型后，我们**采用 Reactor 模式**，用**一个主线程监听所有连接事件**，用线程池异步处理真正的读写请求；</span><br><span class="line"></span><br><span class="line">每个客户端连接通过 Channel 注册到 Selector 上，提升了连接并发处理能力；</span><br><span class="line"></span><br><span class="line">底层页式读写通过 Buffer 显著减少了系统调用次数和数据拷贝成本，提高了磁盘 I/O 效率。</span><br><span class="line"></span><br><span class="line">并发控制说明：</span><br><span class="line"></span><br><span class="line">因为是数据库系统，多用户可能同时对同一数据页进行访问；</span><br><span class="line"></span><br><span class="line">在读写路径上，我们结合了**读写锁**机制和自实现的**MVCC（多版本并发控制）**，确保事务隔离的一致性；</span><br><span class="line"></span><br><span class="line">NIO 负责连接层的高效事件处理，MVCC 负责数据访问层的并发安全。</span><br><span class="line"></span><br><span class="line">## 5.在 “MinaDB” 项目中，你提到实现了基于 B + 树的索引结构，说说 B + 树相比 B 树在索引场景下的优势？如果数据库中某个表的查询频繁出现 “索引失效”，你会从哪些方面排查原因？</span><br><span class="line"></span><br><span class="line">B 树的非叶子节点同时存储索引键和数据行指针，而 B + 树非叶子节点仅存储索引键，相同空间可存储更多索引项，查询时 IO 次数更少。此外，B 树查询到数据后直接返回，而 B + 树需遍历到叶子节点，看似多一层，但 B + 树叶子节点数据更紧凑，且磁盘预读特性下，连续的叶子节点访问效率反而更高。</span><br><span class="line"></span><br><span class="line">索引失效一般都是不满足联合索引未满足最左前缀原则，</span><br><span class="line"></span><br><span class="line">比如，使用or前面的有索引，后面的没索引。</span><br><span class="line"></span><br><span class="line">使用了like模糊匹配，在查询的使用了函数或者运算</span><br><span class="line"></span><br><span class="line">没有遵守联合查询的最左匹配</span><br><span class="line"></span><br><span class="line">进行了索引跳跃</span><br><span class="line"></span><br><span class="line">还有**数据类型不匹配**：如索引列是`varchar`，查询时未加引号导致隐式转换</span><br><span class="line"></span><br><span class="line">**统计信息过时**：表数据大量更新后未重建索引或 analyze 表，优化器误判索引效率</span><br><span class="line"></span><br><span class="line">## 6.在 “MinaDB” 项目中，你实现了 SQL 解析器模块，将 SQL 语句转换为执行计划。如果遇到复杂查询（如多表 JOIN、子查询），解析器是如何处理语法树构建和优化的？有没有遇到过解析错误的场景，是如何调试和解决的？</span><br><span class="line"></span><br><span class="line">普通分析：</span><br><span class="line"></span><br><span class="line">整个sql解析过程分为三个阶段：</span><br><span class="line"></span><br><span class="line">词法分析：：：：</span><br><span class="line"></span><br><span class="line">我们使用正则表达式 + 手写有限状态机（手写有限状态机就是用代码明确写出“当前状态 + 输入 → 转移 + 处理”的逻辑流程）实现了一个轻量级的词法分析器，将输入 SQL 拆分成 Token 序列（如关键字、标识符、常量、运算符等）。每个 Token 类型都有枚举定义，便于后续语法分析器使用。</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li></ul><p>[SELECT] [IDENT(name)] [FROM] [IDENT(users)] [WHERE] [IDENT(age)] [&gt;] [NUMBER(18)]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">语法分析：：：：</span><br><span class="line"></span><br><span class="line">我们基于递归下降（Recursive Descent）实现了手写语法分析器，根据文法规则（Backus-Naur Form）构建**抽象语法树**（AST）。</span><br><span class="line"></span><br><span class="line">例如 `SELECT-FROM-WHERE` 子句会被解析为如下结构：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SelectNode<br>├── Projection: [name]<br>├── From: TableNode(“users”)<br>└── Filter: BinaryExpr(age &gt; 18)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">逻辑执行计划生成：：：：</span><br><span class="line"></span><br><span class="line">AST 会被转化为内部统一表示的 **LogicalPlan**，包括 `Scan`, `Filter`, `Project`, `Join`, `Aggregate` 等操作节点。这个计划结构便于后续执行器调度和优化器优化。</span><br><span class="line"></span><br><span class="line">多表查询：</span><br><span class="line"></span><br><span class="line">**JOIN 查询**</span><br><span class="line"></span><br><span class="line">当语法分析器检测到 `JOIN` 或 `LEFT JOIN` 等关键字时，会构建一个 `JoinNode`，将左右子表作为子节点，同时捕获 `ON` 条件表达式作为连接条件。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SELECT * FROM A JOIN B ON <a href="http://A.id">A.id</a> = B.a_id</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">构建的AST为</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JoinNode<br>├── Left: TableScan(“A”)<br>├── Right: TableScan(“B”)<br>└── Condition: <a href="http://A.id">A.id</a> = B.a_id</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">此结构可以支持后续优化器决定使用嵌套循环连接（Nested Loop Join）还是哈希连接（Hash Join）。</span><br><span class="line"></span><br><span class="line">**子循环嵌套**</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SELECT name FROM users WHERE id IN (SELECT user_id FROM orders)</p><pre><code>这种情况，解析器会递归调用自身处理内部子 SELECT，并将其嵌套成 `SubqueryExpr`，插入到父语句的 WHERE 条件表达式树中。异常处理:如关键字拼写错误、括号不匹配、非法表达式等，解析器通过异常机制抛出带位置信息的错误，并记录 Token 序列以便定位。调试方式：- 打印词法 Token 序列- 可视化 AST 结构（使用简易 tree dump 工具）- 增加行列号定位信息曾遇到过解析器处理 SQL 文件时出现乱码，调查后发现部分文件编码为 GBK，解析器默认以 UTF-8 解读导致失败。解决方法是在读取输入流时统一使用 UTF-8 编码，并在 SQL 入口统一处理 BOM 头和非法字符替换。错误恢复机制在早期版本中，解析器一旦遇错就直接中断，影响批量 SQL 执行。后来加入了简单的错误恢复机制，例如：- 跳过非法 Token，尝试恢复到下一个合法语句起点（如分号 `;`）- 将错误信息记录而不立即终止，提高系统健壮性## 7.你如何实现 MVCC 和 2PL，两者如何配合确保事务隔离性？我们结合了**MVCC** 和 **两阶段锁协议（2PL）** 来实现并发控制和事务隔离。- **MVCC：\**为每条记录维护多个版本（写入时间戳 + 删除时间戳），读操作基于事务启动时的快照时间戳进行\**可见性判断**，避免读写冲突。- **2PL：**所有写操作必须获得写锁，锁管理器基于图结构维护加锁顺序，确保无冲突的串行调度。- **两者配合：**  - **读操作走 MVCC，非阻塞（Snapshot Read）**  - **写操作基于 2PL 上锁（Exclusive Lock）**  - 事务提交前统一写日志 + 写入版本链  - 可配置事务隔离级别（Read Committed, Repeatable Read）这种设计兼顾了**高并发读性能（通过 MVCC）\**与\**写入一致性保证（通过 2PL）**，可以支持 SQL 标准的事务隔离模型。## 8.你实现的是哪种死锁检测方式？如何中止事务？我们实现的是基于**等待图（Wait-For Graph）**的死锁检测机制：- 每次事务申请锁失败时，记录依赖关系 T1 → T2- 定期运行死锁检测器，对等待图进行**有向环检测**- 一旦发现环，选择**最小代价事务（如等待时间短、操作数少）回滚中止**- 通知锁管理器释放锁资源，唤醒相关等待事务这种方式可以有效防止系统进入**长时间互相等待状态**，尤其在高并发写场景下非常关键。</code></pre>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/java/">java</category>
      
      <category domain="https://blog.tokenlen.top/categories/java/%E9%A1%B9%E7%9B%AE/">项目</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/spring-boot/">spring boot</category>
      
      <category domain="https://blog.tokenlen.top/tags/java/">java</category>
      
      
      <comments>https://blog.tokenlen.top/2025/06/12/workmenu/mydb2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Mydb自定义数据库</title>
      <link>https://blog.tokenlen.top/2025/06/12/workmenu/mydb1/</link>
      <guid>https://blog.tokenlen.top/2025/06/12/workmenu/mydb1/</guid>
      <pubDate>Wed, 11 Jun 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1&gt;架构&lt;/h1&gt;
&lt;p&gt;项目分为四个主要模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;backend：数据库核心功能实现&lt;/li&gt;
&lt;li&gt;client：客户端实现&lt;/li&gt;
&lt;li&gt;transport：网络传输层&lt;/li&gt;
&lt;li&gt;common：公共工具和异常处理&lt;/li&gt;
&lt;/ul</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1>架构</h1><p>项目分为四个主要模块：</p><ul><li>backend：数据库核心功能实现</li><li>client：客户端实现</li><li>transport：网络传输层</li><li>common：公共工具和异常处理</li></ul><h2 id="后端">后端</h2><p>dm/数据管理：实现数据页面的管理和持久化</p><ul><li>DataManager.java：数据管理器接口</li><li>DataManagerImpl.java：数据管理器实现</li><li>PageOne.java：特殊页面，存储元数据</li><li>PageX.java：数据页面</li><li>Logger.java：日志管理</li></ul><p>im/索引管理：实现B+树索引</p><ul><li>BPlusTree.java：B+树实现</li><li>Node.java：B+树节点</li><li>LeafNode.java：叶子节点</li><li>InternalNode.java：内部节点</li></ul><p>tbm/表管理：实现表的创建、删除和管理</p><ul><li>Table.java：表的抽象</li><li>TableManager.java：表管理器接口</li><li>TableManagerImpl.java：表管理器实现</li><li>Field.java：字段定义和管理</li></ul><p>tm/事务管理：实现事务的ACID特性</p><ul><li>ransactionManager.java：事务管理器接口</li><li>TransactionManagerImpl.java：事务管理器实现</li></ul><p>vm/MVCC管理：</p><ul><li>VersionManager.java：版本管理器接口</li><li>VersionManagerImpl.java：版本管理器实现</li><li>Entry.java：数据项</li><li>Transaction.java：事务实现</li></ul><p>parser/sql语句的解析：</p><ul><li>Parser.java：SQL解析器</li><li>Tokenizer.java：词法分析器</li><li>statement/*.java：各类SQL语句的数据结构</li></ul><p>server/服务器功能：</p><ul><li>erver.java：服务器实现</li><li>Executor.java：SQL执行器</li></ul><h2 id="客户端">客户端</h2><ul><li>Client.java：客户端实现</li><li>Shell.java：命令行交互</li><li>Launcher.java：启动器</li></ul><h2 id="传输">传输</h2><ul><li>Package.java：通信包</li><li>Packager.java：包处理器</li><li>Transporter.java：传输器</li></ul><h2 id="公共模块">公共模块</h2><ul><li>Error.java：错误定义</li><li>Config.java：配置管理</li></ul><h1>解析</h1><h2 id="Logger模块">Logger模块</h2><p>实现<strong>日志的持久化、校验、读取、校正和截断非法数据</strong>，确保数据库的<strong>崩溃恢复能力（crash recovery）</strong></p><p>日志的文件格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Size(4字节)][Checksum(4字节)][Data(N字节)]</span><br></pre></td></tr></table></figure><p>文件头部还有一个全局 <code>xChecksum</code>（4字节）作为整个日志序列的校验值，存储在文件开头，用于<strong>崩溃恢复期间检查文件是否完整</strong>。</p><table><thead><tr><th>位置</th><th>字节数</th><th>含义</th></tr></thead><tbody><tr><td>0-3</td><td>4B</td><td><code>xChecksum</code> 全局校验</td></tr><tr><td>4+</td><td>多条日志</td><td>每条日志如下结构：<code>[Size][Checksum][Data]</code></td></tr></tbody></table><p><code>LoggerImpl</code>：核心实现类</p><p><code>Logger</code>：接口 + 工厂方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LogEntry`：封装完整日志条目 `[fullBytes, data]</span><br></pre></td></tr></table></figure><p><strong>init方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">headerBuf</span> <span class="operator">=</span> ByteBuffer.allocate(HEADER_SIZE);</span><br><span class="line">fc.position(<span class="number">0</span>);</span><br><span class="line">fc.read(headerBuf);</span><br><span class="line"><span class="built_in">this</span>.xChecksum = Parser.parseInt(headerBuf.array());</span><br><span class="line">validateAndTruncateTail();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先读取 <code>xChecksum</code>，然后进入日志校验逻辑 <code>validateAndTruncateTail()</code>。</p><p><strong>日志校验：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">rewind();</span><br><span class="line"><span class="type">int</span> <span class="variable">calcXCheck</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">validEnd</span> <span class="operator">=</span> HEADER_SIZE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="type">LogEntry</span> <span class="variable">entry</span> <span class="operator">=</span> readNextLog();</span><br><span class="line">    <span class="keyword">if</span> (entry == <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">    calcXCheck = calChecksum(calcXCheck, entry.fullBytes);</span><br><span class="line">    validEnd += entry.fullBytes.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (calcXCheck != xChecksum) &#123;</span><br><span class="line">    Panic.panic(Error.BadLogFileException);</span><br><span class="line">&#125;</span><br><span class="line">truncate(validEnd);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>文件头部开始读取每条日志。</p><p>校验每条日志的 <code>checksum</code> 是否匹配。</p><p>若都匹配，则将尾部位置 <code>validEnd</code> 更新为新的合法文件末尾</p><p>如果算出的 <code>calcXCheck</code> 不一致，说明日志文件可能被破坏，抛出异常。否则，<strong>截断非法尾部</strong>。</p><p><strong>log写入：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] logEntry = wrapLog(data);</span><br><span class="line">fc.position(fc.size());</span><br><span class="line">fc.write(ByteBuffer.wrap(logEntry));</span><br><span class="line">updateXChecksum(logEntry);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先计算 data 的 <code>checksum</code></p><p>用 <code>size + checksum + data</code> 拼接为一条日志</p><p>将新的 <code>xChecksum</code> 写入文件头部，用于下次校验。</p><p>读取逻辑：</p><p>先读 <code>[size][checksum]</code> 共 8 字节</p><p>再根据 <code>size</code> 读取 <code>data</code>，并进行校验</p><p>如果不匹配说明日志损坏，返回 null。</p><p><strong>update校验日志：</strong></p><p>设置文件取到文件头，然后写入新的校验和，调用策略接口，执行具体的策略，增加了提示，累计写入数据</p><p>实现了刷盘，采用策略类，实现了同步刷盘，定时异步刷盘，和不刷盘。根据不同的情况进行选择</p><p>用来处理不同的情况。</p><p>定时大小双阈值异步刷盘：</p><p>满足任一条件即可刷盘，提升灵活性与性能保障</p><p>多次 <code>flush()</code> 只设置标志，合并后统一刷盘</p><p>使用原子变量 + <code>synchronized</code> 保证数据一致性</p><p>可通过 <code>shutdown()</code> 停止任务，或动态调整周期</p><p>可通过参数设定周期，如每 100ms 刷一次</p><p>最长可能延迟 <code>flushIntervalMillis</code>，适合非关键日志</p><h2 id="索引模块">索引模块</h2><p>node节点类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// B+树节点结构</span></span><br><span class="line"><span class="comment">// [LeafFlag][KeyNumber][SiblingUid] 是头部信息</span></span><br><span class="line"><span class="comment">// 后面是 [Son0][Key0][Son1][Key1]...[SonN][KeyN]</span></span><br><span class="line"><span class="comment">// 每个 son 是一个子节点 UID；key 是关键字。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">IS_LEAF_OFFSET</span> <span class="operator">=</span> <span class="number">0</span>;           <span class="comment">// 是否为叶子节点（1字节）</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NO_KEYS_OFFSET</span> <span class="operator">=</span> IS_LEAF_OFFSET+<span class="number">1</span>;   <span class="comment">// 当前 key 数量（2字节）</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SIBLING_OFFSET</span> <span class="operator">=</span> NO_KEYS_OFFSET+<span class="number">2</span>;   <span class="comment">// 兄弟节点 UID（8字节）</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NODE_HEADER_SIZE</span> <span class="operator">=</span> SIBLING_OFFSET+<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BALANCE_NUMBER</span> <span class="operator">=</span> <span class="number">32</span>;          <span class="comment">// 节点最多存储 64 个 key</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NODE_SIZE</span> <span class="operator">=</span> NODE_HEADER_SIZE + (<span class="number">2</span>*<span class="number">8</span>)*(BALANCE_NUMBER*<span class="number">2</span>+<span class="number">2</span>); <span class="comment">// 最大容量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>setRawIsLeaf()</code> / <code>getRawIfLeaf()</code>: 设置/获取是否为叶子节点</li><li><code>setRawNoKeys()</code> / <code>getRawNoKeys()</code>: 设置/获取 key 数</li><li><code>setRawSibling()</code> / <code>getRawSibling()</code>: 设置/获取兄弟节点 UID</li><li><code>setRawKthSon()</code> / <code>getRawKthSon()</code>: 设置/获取第 k 个子节点 UID</li><li><code>setRawKthKey()</code> / <code>getRawKthKey()</code>: 设置/获取第 k 个 key</li><li><code>shiftRawKth()</code>: 从第 k 位右移 key/son，为插入腾位置</li><li><code>copyRawFromKth()</code>: 将后半部分节点数据拷贝出来，用于分裂</li><li><code>newRootRaw()</code>：构造新根节点（中间节点）</li><li><code>newNilRootRaw()</code>：构造空的叶子节点</li></ul><p>读取逻辑：</p><p>boolean isLeaf(): 判断是否为叶子节点</p><p>SearchNextRes searchNext(long key): 在中间节点中<strong>查找适合 key 所在的子节点 UID，如果 key 超过最大 key，则返回 sibling 节点 UID。</strong></p><p>LeafSearchRangeRes leafSearchRange(long leftKey, long rightKey):</p><ul><li>仅在叶子节点中执行，从 leftKey 找到 rightKey 范围内的所有 UID。</li><li>如果未覆盖完全，返回 siblingUid 供上层继续搜索。</li></ul><p>插入分裂逻辑：</p><p>InsertAndSplitRes insertAndSplit(long uid, long key):</p><ul><li>调用 insert() 插入一个键值对 [key, uid]</li><li>若插入后 key 数超限，调用 split() 分裂节点</li></ul><p>内部插入逻辑，根据是叶子节点或内部节点采取不同插入策略：</p><ul><li>叶子节点插入：直接插入 [key, uid]</li><li>中间节点插入：先保存原 key，覆盖当前 key，再右移一位插入 [uid, oldKey]</li></ul><p>节点分裂操作：</p><ul><li>创建新节点并复制后半部分 key/son</li><li>新节点插入 DM 中生成新 UID</li><li>当前节点更新 siblingUid 指向新节点</li><li>返回分裂后新节点和新 key（新 key 是新节点的最小 key</li></ul><p>缓存：</p><p>实现了LRU缓存策略，简单的hashmap+sychronized实现</p><p>和concurrenthashmap+readwirtelock实现</p><p>B+tree索引实现：</p><p>新增 <code>NodeCache</code> 来缓存热点节点，减少频繁磁盘读。</p><p><code>BPlusTree</code> 里新增 <code>loadNode</code> 方法，用缓存优先加载节点。</p><p>联合索引：</p><h1>问题文档</h1><h2 id="1-“bug”-sql解释器-：修复了sql语句会有-的问题">1.“bug”(sql解释器)：修复了sql语句会有&lt;&lt;的问题</h2><p>运行代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mvn exec:java --% -Dexec.mainClass=com.mengnankk.mydatabase.backend.Launcher -Dexec.args=&quot;-create ./data&quot;</span><br><span class="line">mvn exec:java --% -Dexec.mainClass=com.mengnankk.mydatabase.backend.Launcher -Dexec.args=&quot;-open ./data&quot;</span><br><span class="line">mvn exec:java --% -Dexec.mainClass=com.mengnankk.mydatabase.client.Launcher -Dexec.args=&quot;./data&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> ikeife    MYDB   master ≡  ~1     1.602s⠀   mvn exec:java --% -Dexec.mainClass=top.guoziyang.mydb.client.Launcher -Dexec.args=&quot;./data&quot;</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] -------------------------&lt; top.guoziyang:MyDB &gt;-------------------------</span><br><span class="line">[INFO] Building MyDB 1.0-SNAPSHOT</span><br><span class="line">[INFO]   from pom.xml</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- exec:3.5.1:java (default-cli) @ MyDB ---</span><br><span class="line">:&gt; create table test1</span><br><span class="line">Invalid command!</span><br><span class="line">:&gt; create table test1;</span><br><span class="line">Invalid statement: create table test1&lt;&lt; ;</span><br><span class="line">:&gt; create table test1 (id int, name varchar);</span><br><span class="line">Invalid statement: create table test1 (id &lt;&lt; int, name varchar);</span><br><span class="line">:&gt; create table test1 (id int);</span><br><span class="line">Invalid statement: create table test1 (id &lt;&lt; int);</span><br><span class="line">:&gt; show tables;</span><br><span class="line">Invalid statement: show tables&lt;&lt; ;</span><br><span class="line">:&gt;</span><br></pre></td></tr></table></figure><p>运行之后这个发现总是多了个&lt;&lt;感觉应该是命令行接收输入或者读取输入流的方式出现了问题。</p><p>第一步：修复SQL解析器（Parser.java）</p><ul><li><p>修改了isType方法，使其能识别标准SQL类型</p></li><li><p>新增了combineType方法，用于处理带括号的类型声明（如varchar(20)）</p></li><li><p>修改了parseCreate方法，改进了类型声明的处理逻辑</p></li><li><p>使索引定义成为可选项，不再强制要求必须有索引</p></li></ul><p>第二步：改进字段类型处理（Field.java）</p><ul><li><p>添加了convertType方法，实现SQL类型到内部类型的映射：</p></li><li><p>改进了typeCheck方法，增加了类型转换步骤</p></li><li><p>修改了Field构造函数，在构造时就进行类型转换</p></li></ul><p>主要解决的问题</p><ul><li><p>支持了标准SQL语法</p></li><li><p>处理了带长度的类型声明（如varchar(20)）</p></li><li><p>实现了SQL类型到内部类型的自动转换</p></li><li><p>修复了索引相关的语法解析</p></li></ul><p>最终效果</p><p>现在可以使用标准SQL语句创建表，也可以不带索引的创建sql语句</p><h2 id="2-“feat”-Server-替换成了NIO，单线程实现IO多路复用">2.“feat”(Server): 替换成了NIO，单线程实现IO多路复用</h2><p>问题在于客户端的Socket创建方式。在NIO模式下，我们需要使用SocketChannel来创建非阻塞的套接字。让我修改客户端的Launcher类：</p><ol><li><p>使用SocketChannel替代Socket</p></li><li><p>配置SocketChannel为非阻塞模式</p></li><li><p>使用connect和finishConnect方法来建立连接</p></li><li><p>添加了连接等待逻辑，因为非阻塞模式下连接可能不会立即完成</p></li><li><p>更新了错误处理逻辑</p></li></ol><h2 id="3-“feat”-Encoder-使用中文的话，使用UTF-8编码">3.“feat”(Encoder):使用中文的话，使用UTF-8编码</h2><ol><li>字符串编码问题</li></ol><ul><li><p>问题表现：中文字符显示为乱码（“锟斤拷”）</p></li><li><p>原因：数据库在处理字符串时没有统一使用UTF-8编码</p></li></ul><p>解决方案：</p><p>在Parser类中修改字符串处理：</p><ul><li><p>使用StandardCharsets.UTF_8进行字符串编码和解码</p></li><li><p>修改string2Byte和parseString方法，确保正确处理UTF-8编码</p></li></ul><p>在DataManagerImpl类中修改数据存储：</p><ul><li><p>在insert方法中确保数据使用UTF-8编码</p></li><li><p>在存储前将数据转换为UTF-8编码的字符串</p></li></ul><p>在Table类中修改数据读取和显示：</p><ul><li><p>在parseEntry方法中确保字符串使用UTF-8编码</p></li><li><p>在entry2Raw方法中确保字符串使用UTF-8编码</p></li><li><p>在printEntry方法中确保字符串使用UTF-8编码</p></li></ul><p>Tokenizer访问权限问题</p><ul><li><p>问题表现：Parser类无法访问Tokenizer类的方法</p></li><li><p>原因：Tokenizer类中的方法访问权限设置不正确</p></li></ul><p>解决方案：</p><ul><li><p>将Tokenizer类中的peek和pop方法改为public</p></li><li><p>添加了isAlphaBeta和isDigit静态方法</p></li><li><p>修复了字符串解析中的边界条件问题</p></li></ul><p>数据存储问题</p><ul><li><p>问题表现：数据存储后读取出现异常</p></li><li><p>原因：数据存储和读取的编码不一致</p></li><li><p>解决方案：</p></li><li><p>统一使用UTF-8编码进行数据存储和读取</p></li><li><p>在数据转换过程中保持编码一致性</p></li><li><p>确保数据在存储前进行正确的编码转换</p></li></ul><p>主要修改点</p><ul><li><p>添加了StandardCharsets.UTF_8的导入</p></li><li><p>在所有涉及字符串操作的地方统一使用UTF-8编码</p></li><li><p>在数据存储、读取和显示三个环节都进行了编码处理</p></li><li><p>确保字符串在转换过程中不会丢失编码信息</p></li><li><p>修改了类的访问权限，确保正确的封装性</p></li><li><p>修复了字符串解析的边界条件问题</p></li></ul><p>经验教训</p><ul><li><p>在处理多语言（特别是中文）时，必须统一使用UTF-8编码</p></li><li><p>需要在数据处理的各个环节（存储、读取、显示）都进行编码处理</p></li><li><p>字符串编码问题往往表现为乱码，需要从数据流转的各个环节排查</p></li><li><p>在数据库系统中，编码问题需要从底层（存储）到上层（显示）都进行统一处理</p></li><li><p>类的访问权限设计需要仔细考虑，确保正确的封装性</p></li><li><p>字符串处理时需要注意边界条件</p></li></ul><h2 id="4-“feat”-bug-异常：">4.“feat”(bug):异常：</h2><p>1.空指针：</p><p><code>AbstractCache.release(uid)</code> 里从某个 <code>Map</code> 结构中 <code>get(uid)</code> 后没有判空，直接 <code>.intValue()</code> 了。</p><p>加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">ref</span> <span class="operator">=</span> references.get(uid);</span><br><span class="line"><span class="keyword">if</span>(ref == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Release called on unknown UID: &quot;</span> + uid);</span><br><span class="line">&#125;</span><br><span class="line">ref = ref - <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用 <code>Map.computeIfPresent()</code> 来减少并发风险，或者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">references.compute(uid, (k, v) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (v == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Release called on unknown UID: &quot;</span> + uid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v - <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.NegativeArraySizeException: -16</p><p>说明你尝试创建一个长度为 <strong>负数</strong> 的数组</p><p><strong>数据文件未完整写入或写入错位</strong></p><ul><li>日志校验失败后仍尝试加载，导致读取偏移错误。</li></ul><p><strong>日志恢复不完整或逻辑错误</strong></p><ul><li>如果你的日志采用 <code>[Size][Checksum][Data]</code> 格式，可能在读取 <code>Size</code> 时读取了非法值（如内存残留数据）。</li></ul><p><strong><code>Parser.parseSize(raw)</code> 实现错误</strong></p><ul><li>可能字节序错、偏移错、字段解码逻辑错。</li></ul><p>添加 <code>size</code> 合法性检查</p><p>那么 <code>Size</code> 是前 4 个字节，你恢复时必须按顺序读</p><p>检查磁盘是否已被写入错位内容，加了边界校验代码。</p><p>3.数据库文件未正确关闭，导致恢复后残留了无效 Entry</p>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/java/">java</category>
      
      <category domain="https://blog.tokenlen.top/categories/java/%E9%A1%B9%E7%9B%AE/">项目</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/java/">java</category>
      
      
      <comments>https://blog.tokenlen.top/2025/06/12/workmenu/mydb1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>数字逻辑期末复习</title>
      <link>https://blog.tokenlen.top/2025/06/11/lastteam/shuziluoji/</link>
      <guid>https://blog.tokenlen.top/2025/06/11/lastteam/shuziluoji/</guid>
      <pubDate>Tue, 10 Jun 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1&gt;知识点分布&lt;/h1&gt;
&lt;p&gt;计算：&lt;/p&gt;
&lt;p&gt;1.进制转换&lt;/p&gt;
&lt;p&gt;10进制，8进制，16进制，20进制&lt;/p&gt;
&lt;p&gt;2.源码反码补码&lt;/p&gt;
&lt;p&gt;3.余三码&lt;/p&gt;
&lt;p&gt;4.公式运用转换&lt;/p&gt;
&lt;p&gt;化简，卡诺图，公式&lt;/p&gt;
&lt;p&gt;数字逻辑&lt;/p&gt;
</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1>知识点分布</h1><p>计算：</p><p>1.进制转换</p><p>10进制，8进制，16进制，20进制</p><p>2.源码反码补码</p><p>3.余三码</p><p>4.公式运用转换</p><p>化简，卡诺图，公式</p><p>数字逻辑</p><p>两个简答，三个计算二进制转8 10 16饭吗不拿 雨伞吗</p><p>化简</p><p>函数化简，标准语或表达式</p><p>卡诺图化简</p><p>组合逻辑电路分析</p><p>函数逻辑表达，nc图，功能</p><p>隐含表</p><p>状态化简</p><p>时序逻辑电路，什么型的</p><p>死胎针指标</p><p>状态相应队列</p><h1>简答题</h1><p><strong>与非门/或非门型R-S触发器差异</strong></p><p><strong>同步与异步时序电路对比</strong></p><p><strong>组合与时序逻辑区别</strong></p><p><strong>逻辑函数三种描述方式（真值表、代数表达式、卡诺图）</strong></p><p><strong>卡诺图化简步骤与规则</strong></p><h2 id="1-根据所采用的半导体器件不同，集成电路可分为哪两大类？各自的主要优缺点是什么。">1.根据所采用的半导体器件不同，集成电路可分为哪两大类？各自的主要优缺点是什么。</h2><p>根据所采用的半导体器件不同，集成电路可分为两大类：一类是采用双极型半导体器件作为元件的<strong>双极型集成电路</strong>；双极型集成电路的主要特点是<strong>速度快、负载能力强，但功耗较大，集成度较低；</strong></p><p>另一类是采用金属-氧化物-半导体场效应管作为元件的单极型集成电路，又称MOS集成电路。MOS集成电路的特点是<strong>结构简单、制造方便、集成度高、功耗低，但速度较慢。</strong></p><h2 id="2-简述晶体二极管的静态特性">2.简述晶体二极管的静态特性</h2><p>1.<strong>正向特性</strong> ：</p><p>正向电压 UF ≤ UTH ：管子截止，电阻很大、正向电流IF 接近于 0， 二极管类似于开关的断开状态 ；正向电压 UF= UTH ：管子开始导通，正向电流IF开始上<br>升；正向电压 UF ＞ UTH (一般锗管为0.3V，硅管为0.7V) ：管子充分导通，电阻很小，正向电流IF急剧增加，二极管类似于开关的接通状态。<br>2． <strong>反向特性</strong>：<br>二极管在反向电压UR作用下，处于截止状态，反向电阻很大，反向电流IR很小（将其称为反向饱和电流，用IS表示，通常可忽略不计），二极管的状态类似于开关断开。而且反向电压在一定范围内变化基本不引起反向电流的变化。</p><h2 id="3-晶体二极管的开关速度主要取决于什么？">3.晶体二极管的开关速度主要取决于什么？</h2><p>晶体二极管的动态特性是指二极管在<strong>导通与截至</strong>两种状态转换过程中的特性，它表现在完成两种状态之间的转换需要一定的时间。通常把二极管从**正向导通到反向截至所需要的时间称为反向恢复时间，而把二极管从反向截至到正向导通的时间称为开通时间。**相比之下，<strong>开通时间很短</strong>，一般可以忽略不计。因此，晶体二极管的开关速度主要取决于反向恢复时间。</p><h2 id="4-数字电路中，晶体三极管一般工作在什么状态-？">4.数字电路中，晶体三极管一般工作在什么状态 ？</h2><p>在数字电路中，晶体三极管被作为开关元件一般工作在<strong>饱和与截至</strong>两种状态，相当于一个由基极信号控制的无触点开关，其作用对应于触点开关的“闭合”与“断开”</p><h2 id="5-晶体三极管的开关速度取决于哪些因素？为什么MOS管的开关速度比晶体三极管慢-？">5.晶体三极管的开关速度取决于哪些因素？为什么MOS管的开关速度比晶体三极管慢 ？</h2><p>开通时间ton和关闭时间toff是影响电路工作速度的主要因素。由于MOS管导通时的漏源电阻rDS比晶体三极管的饱和电阻rCES要大得多，漏极外接电阻RD也比晶体管集电极电阻RC大，所以，MOS管的充、放电时间较长，使MOS管的开关速度比晶体三极管的开关速度低。</p><h2 id="6-TTL与非门有哪些主要性能参数？">6.TTL与非门有哪些主要性能参数？</h2><p>(1) 输出高电平VOH<br>(2) 输出低电平VOL<br>(3)开门电平VON 开门电平的大小反映了高电平抗干扰能力，VON 愈小，<br>在输入高电平时的抗干扰能力愈强。<br>(4)关门电平VOFF ：关门电平的大小反映了低电平抗干扰能力，VOFF越大，<br>在输入低电平时的抗干扰能力越强。<br>(5) 扇入系数Ni<br>(6) 扇出系数No<br>(7) 输入短路电流Iis<br>(8) 高电平输入电流Iih<br>(9) 平均传输延迟时间tpd<br>(10) 空载功耗P</p><h2 id="7-OC门和TS门的结构与一般TTL与非门有何不同？各有何主要应用-？">7.OC门和TS门的结构与一般TTL与非门有何不同？各有何主要应用 ？</h2><p>集电极开路门(Open Collector Gate)是一种输出端可以直接相互连接的特殊逻辑门，简称OC门。OC门电路将一般TTL与非门电路的推拉式输出级改为三极管集电极开路输出。集电极开路与非门在计算机中应用很广泛，可以用它实现&quot;线与&quot;逻辑、电平转换以及直接驱动发光二极管、干簧继电器等。三态输出门有三种输出状态：输出高电平、输出低电平和高阻状态，前两种状态为工作状态，后一种状态为禁止状态三态与非门主要应用于总线传送，它既可用于单向数据送，也可用于双向数据传送。</p><h2 id="8-简述时序逻辑电路与组合逻辑电路的区别（重点）">8.简述时序逻辑电路与组合逻辑电路的区别（重点）</h2><p>时序逻辑电路在<strong>任何时刻产生的稳定输出信号不仅与该时刻电路的输入信号有关，而且与电路过去的输入信号有关</strong>；而组合逻辑电路仅仅与<strong>该时刻电路的输入信号</strong>有关。</p><h2 id="9-有两个相同型号的TTL与非门，对它们进行测试的结果如下：">9.有两个相同型号的TTL与非门，对它们进行测试的结果如下：</h2><p>（1）甲的开门电平为1.4V，乙的开门电平为1.5V ；<br>（2）甲的关门电平为1.0V，乙的开门电平为0.9V ；</p><p>试问在输入相同的高电平时，哪个抗干扰能力强？在输入相同低电平时，哪个抗干扰能力强？</p><p>对于TTL与非门来说，<strong>开门电平愈小，输入高电平时的抗干扰能力愈强</strong>；关<strong>门电平愈大，在输入低电平时抗干扰能力愈强</strong>。因此，在两种情况下，均是甲的抗干扰能力强。</p><h2 id="10-用与非门组成的基本R-S触发器和用或非门组成的基本R-S触发器在逻辑功能上有什么区别？（重点）">10.用与非门组成的基本R-S触发器和用或非门组成的基本R-S触发器在逻辑功能上有什么区别？（重点）</h2><table><thead><tr><th>项目</th><th>用 NAND（与非门）实现</th><th>用 NOR（或非门）实现</th></tr></thead><tbody><tr><td>构成门电路</td><td>与非门（NAND）</td><td>或非门（NOR）</td></tr><tr><td>电路图形态</td><td>输入为低电平触发</td><td>输入为高电平触发</td></tr></tbody></table><p>或与门:</p><p>看的是S的置位</p><table><thead><tr><th>R</th><th>S</th><th>Q(n+1)</th><th>功能说明</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>Q</td><td>保持</td></tr><tr><td>0</td><td>1</td><td>1</td><td>置 1（Set）</td></tr><tr><td>1</td><td>0</td><td>0</td><td>置 0（Reset）</td></tr><tr><td>1</td><td>1</td><td>不定</td><td>无效（禁止）</td></tr></tbody></table><p>与非门：</p><p>看的是R置位</p><table><thead><tr><th>R</th><th>S</th><th>Q(n+1)</th><th>功能说明</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>不定</td><td>无效（禁止）</td></tr><tr><td>0</td><td>1</td><td>0</td><td>置 0（Reset）</td></tr><tr><td>1</td><td>0</td><td>1</td><td>置 1（Set）</td></tr><tr><td>1</td><td>1</td><td>Q</td><td>保持</td></tr></tbody></table><p><strong>或非门 NOR 高电平有效”，“与非门 NAND 低电平有效</strong></p><h1>计算</h1><h2 id="1-进制转换">1.进制转换</h2><p>十进制 123 转为八进制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">123 ÷ 8 = 15 余 3  </span><br><span class="line">15 ÷ 8 = 1 余 7  </span><br><span class="line">1 ÷ 8 = 0 余 1  </span><br><span class="line"></span><br><span class="line">倒序结果：173（八进制）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>十进制 123 转为十六进制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">123 ÷ 16 = 7 余 11 → B  </span><br><span class="line">7 ÷ 16 = 0 余 7  </span><br><span class="line"></span><br><span class="line">倒序结果：7B（十六进制）</span><br></pre></td></tr></table></figure><p>就是除，然后倒叙的写余数。</p><p>然后小数部分，就是乘然后取整数部分</p><p>0.27 转八进制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0.27 × 8 = 2.16      → 取整 2  </span><br><span class="line">0.16 × 8 = 1.28      → 取整 1  </span><br><span class="line">0.28 × 8 = 2.24      → 取整 2  </span><br><span class="line">0.24 × 8 = 1.92      → 取整 1  </span><br><span class="line">0.92 × 8 = 7.36      → 取整 7  </span><br><span class="line">0.36 × 8 = 2.88      → 取整 2  </span><br><span class="line">0.88 × 8 = 7.04      → 取整 7  </span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>0.27≈0.2121727</p><h2 id="2-源码反码补码">2.源码反码补码</h2><table><thead><tr><th>表示形式</th><th>正数</th><th>负数</th></tr></thead><tbody><tr><td>原码</td><td>符号位为0，数值位正常</td><td>符号位为1，数值位绝对值</td></tr><tr><td>反码</td><td>同原码</td><td>符号位为1，数值位按位取反</td></tr><tr><td>补码</td><td>同原码</td><td>反码 + 1</td></tr></tbody></table><p>十进制 -5 的表示（8位）</p><p>原码：<code>10000101</code></p><p>反码：<code>11111010</code>（符号位不变，数值部分取反）</p><p>补码：<code>11111011</code>（反码 +1）</p><p>0.1011 的源码反码补码：</p><p>0.1011都一样</p><p>－10110的源码反码补码：</p><p>110110</p><p>101001</p><p>101010</p><h2 id="3-各种编码">3.各种编码</h2><p>BCD码：将十进制的<strong>每位分别转换为4位二进制</strong>（例如 9 → 1001）</p><p>余三码：= BCD码 + 0011</p><table><thead><tr><th>十进制</th><th>BCD (8421)</th><th>余三码</th></tr></thead><tbody><tr><td>0</td><td>0000</td><td>0011</td></tr><tr><td>5</td><td>0101</td><td>1000</td></tr><tr><td>9</td><td>1001</td><td>1100</td></tr></tbody></table><p>余三码 → 减去 0011 → BCD → 十进制</p><p>2421码：<strong>十进制数字 0~9</strong> 编码为 4 位二进制</p><table><thead><tr><th>十进制</th><th>2421码（权值分别为 2-4-2-1）</th></tr></thead><tbody><tr><td>0</td><td>0000</td></tr><tr><td>1</td><td>0001</td></tr><tr><td>2</td><td>0010</td></tr><tr><td>3</td><td>0011</td></tr><tr><td>4</td><td>0100</td></tr><tr><td>5</td><td>1011</td></tr><tr><td>6</td><td>1100</td></tr><tr><td>7</td><td>1101</td></tr><tr><td>8</td><td>1110</td></tr><tr><td>9</td><td>1111</td></tr></tbody></table><p>Gray码：</p><p><strong>相邻两个数的编码只有一位不同</strong>，这也叫做 <strong>最小汉明距离编码</strong>。</p><p>十进制 <code>7</code> → 二进制：<code>0111</code></p><p>G0 = B0 （最高位相同）首位不变，其异或<br>Gi = Bi XOR B(i−1)（从第1位开始，每一位 = 当前位 XOR 前一位）</p><p>Gray 码计算：</p><ul><li>G0 = B0 = 0</li><li>G1 = B1 ⊕ B0 = 1 ⊕ 0 = 1</li><li>G2 = B2 ⊕ B1 = 1 ⊕ 1 = 0</li><li>G3 = B3 ⊕ B2 = 1 ⊕ 1 = 0</li></ul><p>Gray码为0100</p><h2 id="4-二进制运算">4.二进制运算</h2><p>加法：<strong>规则</strong>（逢二进一）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 + 0 = 0  </span><br><span class="line">0 + 1 = 1  </span><br><span class="line">1 + 0 = 1  </span><br><span class="line">1 + 1 = 0 （进位1）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>减法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 - 0 = 0  </span><br><span class="line">1 - 0 = 1  </span><br><span class="line">1 - 1 = 0  </span><br><span class="line">0 - 1 = 1（向高位借1）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>乘法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   101   (5)</span><br><span class="line">×   11   (3)</span><br><span class="line">-------</span><br><span class="line">   101</span><br><span class="line">+ 1010</span><br><span class="line">-------</span><br><span class="line">  1111  (15)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>除法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1010 ÷ 10 = 101 (10 ÷ 2 = 5)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>与或非</p><table><thead><tr><th>运算符</th><th>含义</th><th>示例（1010 和 1100）</th><th>结果</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>与</td><td>1010 &amp; 1100</td><td>1000</td></tr><tr><td>`</td><td>`</td><td>或 只要一个为1就为1</td><td>1010</td></tr><tr><td><code>^</code></td><td>异或</td><td>1010 ^ 1100 两个二进制位相同则为0，不同则为1。</td><td>0110</td></tr><tr><td><code>~</code></td><td>非</td><td>~1010</td><td>0101（取反，视字长而定）</td></tr></tbody></table><h2 id="5-逻辑代数的运算">5.逻辑代数的运算</h2><p><strong>运算：</strong></p><p>比较重要的：</p><p>A + ¬A · B = A + B</p><p>A · (¬A + B) = A · B</p><p><strong>A + A · B = A</strong></p><p>A · (A + B) = A</p><p>A · ¬A · B = 0</p><p><strong>A + B · C = (A + B) · (A + C)</strong></p><p>吸收律：A + AB = A</p><p>分配律：A(B + C) = AB + AC</p><p>对偶律：与或互换、0和1互换</p><p>结合律、德摩根定律等</p><p><strong>反函数</strong></p><p>反函数是对逻辑表达式整体进行<strong>逻辑取反（¬）</strong>，常借助<strong>德摩根定律</strong>进行变换。</p><p>对偶函数：</p><p>所有的 <code>·</code>（AND）换成 <code>+</code>（OR）</p><p>所有的 <code>+</code>（OR）换成 <code>·</code>（AND）</p><p>所有的常量 <code>1</code> 与 <code>0</code> 互换</p><p><strong>变量和非变量（A, ¬A）不变</strong></p><h2 id="6-最小项之和（Sum-of-Minterms）和最大项之积（x）卡诺图化简">6.最小项之和（Sum of Minterms）和最大项之积（x）卡诺图化简</h2><p>最小项（minterm）：在某一组输入下，<strong>输出为 1</strong> 的项 求和符号</p><p>最大项（maxterm）：在某一组输入下，<strong>输出为 0</strong> 的项。 最大符号</p><p>这个真值表的编号从0开始</p><p><strong>卡诺图</strong>编号：</p><table><thead><tr><th>CD\AB</th><th>00</th><th>01</th><th>11</th><th>10</th></tr></thead><tbody><tr><td>00 C非D非</td><td>0000 (0)</td><td>0001 (1)</td><td>0011 (3)</td><td>0010 (2)</td></tr><tr><td>01 C非D</td><td>0100 (4)</td><td>0101 (5)</td><td>0111 (7)</td><td>0110 (6)</td></tr><tr><td>11 cd</td><td>1100 (12)</td><td>1101 (13)</td><td>1111 (15)</td><td>1110 (14)</td></tr><tr><td>10 cD非</td><td>1000 (8)</td><td>1001 (9)</td><td>1011 (11)</td><td>1010 (10)</td></tr></tbody></table><p>2^n来圈，圈的越大越好</p><p>然后找公共的地方，把这些圈给加（or）起来</p><p>与－或”表达式（SOP）：最后每项用或连接 F = AB + A’C + BC ∑m</p><p>或－与”表达式：F = (A + B)(A’ + C)(B + C) ∏M</p>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/%E7%94%B5%E8%B7%AF/">电路</category>
      
      <category domain="https://blog.tokenlen.top/categories/%E7%94%B5%E8%B7%AF/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/">期末考试</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/">数字逻辑</category>
      
      
      <comments>https://blog.tokenlen.top/2025/06/11/lastteam/shuziluoji/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>面试模拟-1</title>
      <link>https://blog.tokenlen.top/2025/06/11/towork/working1/</link>
      <guid>https://blog.tokenlen.top/2025/06/11/towork/working1/</guid>
      <pubDate>Tue, 10 Jun 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1&gt;6.11模拟面试&lt;/h1&gt;
&lt;h2 id=&quot;1-什么是-Java-的面向对象编程？它的核心特性有哪些？&quot;&gt;1.什么是 Java</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1>6.11模拟面试</h1><h2 id="1-什么是-Java-的面向对象编程？它的核心特性有哪些？">1.什么是 Java 的面向对象编程？它的核心特性有哪些？</h2><p>面向对象编程是OOP是说就是<strong>用“对象”来组织代码</strong>，java就是一门面向对象编程的语言。</p><p>java的面向对象的三大特征是封装继承多态</p><p>封装：反射，修饰符</p><p>继承：构造方法调用，final</p><p>多态：方法重载，方法重写</p><p>抽象：抽象和接口</p><p>静态：</p><h2 id="2-说说-Java-中-ArrayList-和-LinkedList-的区别，以及各自的适用场景">2.说说 Java 中 ArrayList 和 LinkedList 的区别，以及各自的适用场景</h2><p>底层：</p><p>遍历和插入：</p><p>arrayList扩容：1.5，数组的复制</p><p>内存占比：</p><p>使用场景：</p><p>线程安全：</p><h2 id="3-HashMap-的底层原理">3.HashMap 的底层原理</h2><p>特点：</p><p>底层实现，1.7/1.7之后，头插和尾插</p><p>put过程</p><p>转换红黑树/扩容：当链表长度≥8 且数组容量≥64 时转红黑树 为什么用红黑树</p><p>线程安全：</p><p>concurrenthashmap，底层，put过程</p><h2 id="4-Spring-框架中，Bean-的作用域有哪些？请分别说明它们的生命周期和应用场景">4.Spring 框架中，Bean 的作用域有哪些？请分别说明它们的生命周期和应用场景</h2><p><strong>5 大标准作用域</strong>：</p><ul><li><strong>Singleton</strong>：全局唯一实例，Spring 容器加载时创建，适用于无状态服务；</li><li><strong>Prototype</strong>：每次获取新实例，适用于有状态对象（如 DAO 层）；</li><li><strong>Request</strong>：每次 HTTP 请求一个实例，需 Web 环境，适用于请求上下文数据；</li><li><strong>Session</strong>：每个用户会话一个实例，需 Web 环境，适用于会话级数据；</li><li><strong>Application</strong>：全局 ServletContext 共享实例，需 Web 环境。</li></ul><p>生命周期：实例化→属性注入→@PostConstruct→初始化完成→使用→@PreDestroy→销毁。</p><p>循环依赖：setter单例注入，三级缓存，</p><ul><li>一级缓存（singletonObjects）：存储完全初始化的单例 Bean；</li><li>二级缓存（earlySingletonObjects）：存储早期曝光的 Bean（解决 A→B→A 的循环依赖）；</li><li>三级缓存（singletonFactories）：存储 Bean 的工厂，用于生成代理对象（解决 A→B（代理）→A 的循环依赖）。</li></ul><h2 id="5-AOP-的实现原理">5.AOP 的实现原理</h2><p>概念：适用场景</p><p>作用点：</p><ul><li><strong>切面（Aspect）</strong>：封装横切逻辑的类，用<code>@Aspect</code>注解标识；</li><li><strong>切点（Pointcut）</strong>：定义横切逻辑作用的目标方法（如<code>@Pointcut(&quot;execution(* com.service.*.*(..))&quot;)</code>）；</li><li><strong>通知（Advice）</strong>：横切逻辑的具体实现，包括 5 种类型</li><li><strong>连接点（Joinpoint）</strong>：程序执行中的具体点（如方法调用、字段修改），AOP 中主要指<strong>方法调用</strong></li></ul><p>动态代理：</p><ul><li><strong>JDK 动态代理</strong>：基于接口实现，生成<code>InvocationHandler</code>的代理对象，适用于目标类有接口的情况；</li><li><strong>CGLIB 代理</strong>：基于子类继承，生成目标类的子类代理对象，适用于无接口的类（需引入<code>cglib</code>依赖）；</li><li><strong>Spring 默认策略</strong>：有接口用 JDK 代理，无接口用 CGLIB 代理（可通过<code>proxy-target-class</code>属性强制使用 CGLIB）。</li><li>流程：</li><li>Spring 容器扫描到<code>@Aspect</code>注解的切面类，解析切点表达式和通知类型；</li><li>对目标类判断是否适用 JDK/CGLIB 代理，生成代理对象；</li><li>当调用代理对象的方法时，实际执行的是<strong>通知逻辑 + 目标方法</strong>的组合逻辑。</li></ul><p>细节：</p><ol><li><p><strong>开启 AOP 支持</strong>：在配置类中添加<code>@EnableAspectJAutoProxy</code>注解，或在 XML 中配置<code>&lt;aop:aspectj-autoproxy/&gt;</code>；</p></li><li><p>代理模式选择</p><p>：</p><ul><li>默认<code>proxyTargetClass=false</code>（优先 JDK 代理）；</li><li>若需强制 CGLIB 代理，设置<code>proxyTargetClass=true</code>或<code>@EnableAspectJAutoProxy(proxyTargetClass = true)</code>；</li></ul></li><li><p><strong>循环依赖与 AOP</strong>：若目标类被代理，注入的是代理对象，需注意<code>this.方法()</code>调用不会触发 AOP（因<code>this</code>指向原始对象）。</p></li></ol><p>场景：</p><ul><li><p><strong>日志记录</strong>：在方法执行前后记录入参 / 结果，避免业务代码污染；</p></li><li><p><strong>事务管理</strong>：<code>@Transactional</code>本质是 AOP 实现，在方法调用时开启 / 提交 / 回滚事务；</p></li><li><p><strong>权限校验</strong>：在接口调用前校验用户权限，拒绝非法请求；</p></li><li><p><strong>性能监控</strong>：统计方法执行耗时，用于性能优化。</p></li></ul><p>流程：</p><ol><li><strong>调用代理方法</strong>：客户端调用代理对象的方法（如<code>userService.save()</code>）；</li><li><strong>匹配切点</strong>：Spring 判断该方法是否匹配切面的切点表达式；</li><li>执行通知逻辑<ul><li><code>@Around</code>中先执行前置逻辑（如日志记录开始）；</li><li>调用<code>proceed()</code>触发目标方法执行；</li><li>执行后置逻辑（如日志记录结束、统计耗时）；</li></ul></li><li><strong>返回结果</strong>：通知逻辑执行完毕后，将结果返回给客户端。</li></ol><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定义切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 定义切点（匹配所有Service方法）</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.service..*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">servicePointcut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 环绕通知实现耗时统计</span></span><br><span class="line">    <span class="meta">@Around(&quot;servicePointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">logExecutionTime</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 调用目标方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 记录日志</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法 &quot;</span> + methodName + <span class="string">&quot; 执行耗时：&quot;</span> + (end - start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-MySQL-中，索引是什么？常见的索引类型有哪些？请说明它们的适用场景和优缺点。">6.MySQL 中，索引是什么？常见的索引类型有哪些？请说明它们的适用场景和优缺点。</h2><p>数据库中用于<strong>加快数据查询速度的一种数据结构</strong>，可以类比为书本的目录。通过索引，数据库可以更快地定位到目标数据，而无需全表扫描。</p><p>为什么使用b+树，层高，叶子节点/非叶子节点</p><p>聚簇索引，非聚簇索引，索引下推</p><p>联合索引，覆盖索引</p><p>普通索引，唯一索引，前缀索引，全文索引。</p><p>索引失效：</p><p>explain:</p><h2 id="7-MyBatis-的一级缓存和二级缓存机制？如何禁用缓存？">7.<strong>MyBatis 的一级缓存和二级缓存机制？如何禁用缓存？</strong></h2><p>sqlsession:</p><p>在一次 SqlSession 生命周期内，相同的查询语句（SQL + 参数）会被缓存，第二次执行时直接从缓存中取值，不会发起数据库请求。当前会话有效，执行 <code>insert/update/delete</code>：任何更新操作会清空缓存。执行<code>sqlSession.clearCache()</code>。不同参数的时候也会失效</p><p>mapper：</p><p>二级缓存是 <strong>Mapper 级别</strong>（namespace）共享缓存。</p><p>多个 SqlSession 之间共享该 Mapper 的缓存数据。</p><p>启用条件：</p><p>在 MyBatis 配置中启用全局缓存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">  &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><p>在对应 Mapper 文件中配置 <code>&lt;cache&gt;</code> 标签：</p><p>查询的 POJO 实体类必须实现 <code>Serializable</code>。</p><p>查询语句不能使用 <code>flushCache=&quot;true&quot;</code>（默认查询是 false，更新是 true）。</p><p>SqlSession 必须关闭后，一级缓存的数据才会被写入二级缓存。</p><p>默认缓存实现是 <code>PerpetualCache + LRU</code>。</p><p>可自定义缓存策略（如 EhCache、Redis）。</p><h2 id="8-MyBatis-Plus-的-Wrapper-和原生-XML-写-SQL-的区别？什么时候该用-Wrapper？"><strong>8.MyBatis Plus 的 Wrapper 和原生 XML 写 SQL 的区别？什么时候该用 Wrapper？</strong></h2><p>Wrapper 是 MyBatis Plus 提供的条件构造器，用于构建 SQL 的 WHERE、ORDER BY 等子句，简化代码书写。</p><p><code>QueryWrapper</code>：用于普通查询。</p><p><code>LambdaQueryWrapper</code>：使用 lambda 表达式避免写字段名字符串。</p><p><code>UpdateWrapper</code> / <code>LambdaUpdateWrapper</code>：用于更新条件构造。</p><p>XML 方式是传统 MyBatis 写 SQL 的方式，通过 Mapper.xml 文件自定义 SQL 语句，更加灵活和强大，支持复杂的多表连接、子查询等。</p><table><thead><tr><th>对比项</th><th>Wrapper（构造器）</th><th>XML 原生 SQL</th></tr></thead><tbody><tr><td>语法风格</td><td>Java 代码风格，链式调用</td><td>SQL 语法，放在 XML 中</td></tr><tr><td>可读性</td><td>简洁、类型安全（特别是 Lambda）</td><td>接近原生 SQL，清晰直观</td></tr><tr><td>编写速度</td><td>快速开发，尤其适合单表 CRUD</td><td>编写略慢，需额外维护 Mapper.xml 文件</td></tr><tr><td>SQL 灵活性</td><td>支持简单查询（单表、分页、排序）</td><td>支持复杂 SQL（多表连接、子查询、聚合）</td></tr><tr><td>维护性</td><td>逻辑分散在代码中，不易集中查看</td><td>逻辑集中在 XML，更适合团队协作维护</td></tr><tr><td>运行效率</td><td>两者本质上都由 MyBatis 执行，性能差异不大</td><td>性能主要看 SQL 写得是否合理</td></tr><tr><td>调试与日志</td><td>SQL 日志可查看</td><td>也可通过日志查看</td></tr></tbody></table><p>✅ 使用 Wrapper 的场景：</p><ul><li>快速开发、原型项目。</li><li>简单的单表查询、分页、筛选。</li><li>Controller/Service 中构造简单业务逻辑。</li><li>需要链式调用构造条件，代码更加优雅。</li><li>使用 Lambda 避免字段拼写错误风险。</li></ul><blockquote><p><strong>推荐：日常开发中能用 Wrapper 就用 Wrapper，提高开发效率。</strong></p></blockquote><hr><p>✅ 使用 XML 写 SQL 的场景：</p><ul><li>涉及复杂 SQL（多表关联、聚合函数、子查询、动态 SQL）。</li><li>查询语句过长、不适合写在 Java 代码中。</li><li>项目追求清晰的逻辑分层、SQL 可维护性。</li><li>性能调优场景，需要手写精细 SQL。</li><li>团队需要 DBA 审查 SQL。</li></ul><blockquote><p><strong>推荐：复杂业务、线上稳定项目，用 XML 更清晰、更可控。</strong></p></blockquote><h1>6.12模拟面试</h1><h2 id="1-单例模式有哪些实现方式？各自的优缺点是什么？（比如饿汉式、懒汉式、双重检查锁，还有静态内部类和枚举方式，有没有线程安全的坑呀？）">1.<strong>单例模式有哪些实现方式？各自的优缺点是什么？（比如饿汉式、懒汉式、双重检查锁，还有静态内部类和枚举方式，有没有线程安全的坑呀？）</strong></h2><p>饿汉式：</p><p>同步模式</p><p>volatile+synchronized</p><p>静态内部类</p><p>枚举</p><h2 id="2-说下Spring-的ApplicationContext是单例模式”“策略模式在排序算法中的应用”">2.说下Spring 的ApplicationContext是单例模式”“策略模式在排序算法中的应用”</h2><p><code>ApplicationContext</code> 本质上采用了<strong>单例模式</strong>来保证 Spring 容器中 <strong>Bean 的唯一性和全局访问能力</strong>。</p><p>Spring Boot 启动时会初始化一个 <code>ApplicationContext</code>（如 <code>AnnotationConfigApplicationContext</code>），作为<strong>IoC 容器的核心上下文</strong>。</p><p>这个容器对象在整个应用中<strong>只创建一次（单例）</strong>，所有组件（Controller、Service、Repository）都从这个容器中获取 Bean 实例。</p><p><strong>避免了重复初始化 Bean 的性能开销</strong>，也方便了依赖管理、统一配置、事件发布等功能的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(MyApp.class, args);</span><br><span class="line"><span class="type">MyService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(MyService.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>开发中我们只需注入一次上下文或通过 <code>@Autowired</code> 注解获取 Bean，即可全局复用。</p><p>Spring 默认的 Bean 是单例的（<code>@Scope(&quot;singleton&quot;)</code>），这与 <code>ApplicationContext</code> 单例模型相辅相成，进一步保证了资源一致性与管理效率。</p><p>策略模式允许在运行时选择算法逻辑，在排序算法中可用于根据用户选择动态切换不同排序策略。</p><p><strong>定义统一的排序接口（策略抽象）</strong>，不同的排序方式（快排、归并、冒泡等）实现这个接口。</p><p><strong>运行时根据条件动态切换策略</strong>，无需修改原有代码（遵循开闭原则）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SortStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> <span class="keyword">implements</span> <span class="title class_">SortStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">// 快速排序实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> <span class="keyword">implements</span> <span class="title class_">SortStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">// 冒泡排序实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SortStrategy strategy;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SortContext</span><span class="params">(SortStrategy strategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        strategy.sort(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SortContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SortContext</span>(<span class="keyword">new</span> <span class="title class_">QuickSort</span>());</span><br><span class="line">ctx.executeSort(myArray); <span class="comment">// 快速排序执行</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>电商平台商品排序（按价格、销量、上架时间）</li><li>数据可视化工具的排序规则切换</li></ul><h2 id="3-Java-线程池的核心参数有哪些？各自的作用是什么？比如corePoolSize和maximumPoolSize，如何根据业务场景设置这些参数呀？">3.<strong>Java 线程池的核心参数有哪些？各自的作用是什么？比如<code>corePoolSize</code>和<code>maximumPoolSize</code>，如何根据业务场景设置这些参数呀？</strong></h2><p>核心线程</p><p>最大线程</p><p>最大线程存活事件</p><p>单位</p><p>阻塞队列</p><p>拒绝策略</p><p>工厂</p><h2 id="4-你项目里用了JWT加双-Token，具体是怎么设计的？两个-Token-各自的作用是什么？拦截器又分别处理什么逻辑？比如有没有考虑过-Token-过期、刷新机制，或者防重放攻击的问题？">4.你项目里用了JWT加双 Token，具体是怎么设计的？两个 Token 各自的作用是什么？拦截器又分别处理什么逻辑？比如有没有考虑过 Token 过期、刷新机制，或者防重放攻击的问题？</h2><p>token:</p><ul><li><strong>access token</strong>（7 天有效期）：放在请求头，用于日常接口认证，用 HS256 加密（密钥服务端持有）；放在前端的localStorage/jwt</li><li><strong>refresh token</strong>（15 天有效期）：存在 Redis，值是随机字符串，且绑定用户 ID ，防止盗用。放在redis中</li></ul><table><thead><tr><th>安全措施</th><th>说明</th></tr></thead><tbody><tr><td>使用 HTTPS</td><td>防止中间人劫持 token</td></tr><tr><td>access token 只读</td><td>JWT 使用 HS256 加密，防篡改</td></tr><tr><td>refresh token 存 Redis</td><td>结合用户 ID 存储，支持设置 TTL，有效控制生命周期</td></tr><tr><td>黑名单机制（登出）</td><td>用户退出登录时可删除 Redis 中 refresh token，立即失效</td></tr><tr><td>防止多端同时登录</td><td>Redis 可使用 userId 为 key，限制 refresh token 单个登录会话</td></tr><tr><td>Token 刷新接口限流</td><td>防止 refresh token 被滥用（加防重放、限频）</td></tr><tr><td>Token 刷新重发保护</td><td>Redis 设置短期 refresh token 使用标记，防止并发重复刷新</td></tr></tbody></table><p>退出策略：</p><p>用户点击退出：</p><ul><li>删除 Redis 中的 refresh token（或设置为无效标记）；</li><li>access token 因为是 JWT，不可被撤销，可考虑实现<strong>黑名单机制</strong>（例如 Redis 中维护一张 token 黑名单）；</li></ul><p>黑名单适用于<strong>高安全场景</strong>（如后台管理系统），但会略增加接口访问时的 Redis 查询压力。</p><p>jwt拦截器：</p><ol><li><strong>认证拦截器</strong>：先检查请求头是否有 access token，没有就返回 401；有则解析 token，校验用户信息是否存在。</li></ol><ul><li>第一个拦截器先校验请求头是否有 access token，没有的话直接返回 401；第二个拦截器在 access token 有效时，额外检查是否快过期（比如剩余时间 &lt; 10 分钟），如果是就用 refresh token 去 Redis 换全新的 access token 和 refresh token（这里要注意刷新时的原子性，避免并发问题）。</li></ul><ol><li>刷新拦截器：如果 access token 剩余有效期 &lt; 10 分钟，就用请求头中的 refresh token 去 Redis 校验：<ul><li>校验通过的话，生成新的 access token 和 refresh token（新 refresh token 会覆盖 Redis 中的旧值，保证单设备登录）；</li><li>校验失败的话，直接让用户重新登录。</li></ul></li></ol><p>危险：</p><p>前端或攻击者<strong>拿到密钥（如部署泄露、浏览器调试泄露）</strong>，就可以伪造合法 token。</p><p>token 内容是可解密的，攻击者可<strong>猜测或修改 payload</strong>，然后重新签名。</p><p>如果服务端<strong>未验证签名</strong>（有些误用场景会只解析不校验），更容易被利用。</p><p>但还是sh256更快，计算算开销低；对称密钥管理更简单，适用于内部系统或中小型项目；</p><p>开发成本更低，不涉及证书管理、公私钥分发；</p><table><thead><tr><th>措施</th><th>说明</th></tr></thead><tbody><tr><td>✅ 使用强密钥</td><td>至少 256 bit 的复杂密钥，不可硬编码进前端或代码中</td></tr><tr><td>✅ 启用 HTTPS</td><td>防止 token 被中间人劫持</td></tr><tr><td>✅ token 签名校验</td><td>每次都校验 JWT 的签名，防止伪造</td></tr><tr><td>✅ 缩短 access token 有效期</td><td>缩小攻击窗口</td></tr><tr><td>✅ refresh token 存 Redis</td><td>结合用户 ID 防重放、防伪造</td></tr><tr><td>✅ 黑名单机制 + 登出清除</td><td>登出时使 refresh token 无效</td></tr><tr><td>✅ 检查 UA/IP 等指纹</td><td>防止 token 被别人拿去复用</td></tr></tbody></table><h2 id="5-看你在优惠劵的发放的时候使用限流，怎么设计的">5.看你在优惠劵的发放的时候使用限流，怎么设计的</h2><p>我们在优惠券领取接口中用 AOP + 令牌桶实现限流</p><ul><li><strong>注解定义</strong>：<code>@RateLimit</code> 注解标注需要限流的方法，参数包括 <code>limitCount=5</code>（每分钟 5 次）、<code>time=1</code>（时间单位分钟）、<code>keyType=&quot;USER_IP&quot;</code>（按用户 IP+ID 限流）。</li><li><strong>切面实现</strong>：通过 <code>@Around</code> 切面拦截注解方法，获取参数后生成唯一限流 key（例如 <code>rate_limit:user_123:192.168.1.1</code>），然后调用 Redis 令牌桶服务校验。</li><li><strong>Redis 令牌桶</strong>：用 Lua 脚本实现原子性校验，核心是根据时间戳计算可生成的新令牌数，不足时拒绝请求。比如用户抢优惠券时，同一 IP+ID 每分钟最多 5 次请求，防止恶意刷接口。</li></ul><ol><li><strong>防重复领取</strong>：避免用户短时间内多次点击接口，导致优惠券<strong>超发</strong>；</li><li><strong>保护服务端</strong>：峰值流量时限制请求频率，防止 Redis 或数据库被击穿。线上遇到过同一 WiFi 下多个用户被误限的情况，后来把 key 改为`IP+用户ID，减少了误判率。”</li></ol><p>切面类如何获取注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimitAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.example.RateLimit)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rateLimitPointcut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;rateLimitPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 获取方法上的注解</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ((MethodSignature) joinPoint.getSignature()).getMethod();</span><br><span class="line">        <span class="type">RateLimit</span> <span class="variable">rateLimit</span> <span class="operator">=</span> method.getAnnotation(RateLimit.class);</span><br><span class="line">        <span class="type">int</span> <span class="variable">limitCount</span> <span class="operator">=</span> rateLimit.limitCount();</span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> rateLimit.time();</span><br><span class="line">        <span class="type">String</span> <span class="variable">keyType</span> <span class="operator">=</span> rateLimit.keyType();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 生成限流key（IP+用户ID）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> generateKey(joinPoint, keyType);</span><br><span class="line">        <span class="comment">// 调用Redis令牌桶校验</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">allow</span> <span class="operator">=</span> redisBucketService.tryAcquire(key, limitCount, time, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">if</span> (!allow) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;请求频繁，请稍后再试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么选令牌桶而不是漏桶？</p><p>令牌桶适合突发流量，漏桶适合平滑流量</p><p>使用redis+lua原子的存储令牌桶，使用时间戳来校验。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-- 令牌桶Lua脚本（简化版）</span><br><span class="line"><span class="type">local</span> <span class="variable">key</span> <span class="operator">=</span> KEYS[<span class="number">1</span>]  -- 限流key</span><br><span class="line"><span class="type">local</span> <span class="variable">capacity</span> <span class="operator">=</span> tonumber(ARGV[<span class="number">1</span>])  -- 桶容量</span><br><span class="line"><span class="type">local</span> <span class="variable">rate</span> <span class="operator">=</span> tonumber(ARGV[<span class="number">2</span>])  -- 令牌生成速率（个/秒）</span><br><span class="line"><span class="type">local</span> <span class="variable">now</span> <span class="operator">=</span> tonumber(ARGV[<span class="number">3</span>])  -- 当前时间戳</span><br><span class="line"><span class="type">local</span> <span class="variable">requested</span> <span class="operator">=</span> tonumber(ARGV[<span class="number">4</span>])  -- 请求令牌数</span><br><span class="line"></span><br><span class="line">-- 读取上次更新时间和剩余令牌数</span><br><span class="line"><span class="type">local</span> <span class="variable">last</span> <span class="operator">=</span> redis.call(<span class="string">&#x27;hget&#x27;</span>, key, <span class="string">&#x27;last&#x27;</span>)</span><br><span class="line"><span class="type">local</span> <span class="variable">tokens</span> <span class="operator">=</span> tonumber(redis.call(<span class="string">&#x27;hget&#x27;</span>, key, <span class="string">&#x27;tokens&#x27;</span>) or <span class="number">0</span>)</span><br><span class="line">last = last or now</span><br><span class="line"></span><br><span class="line">-- 计算可生成的新令牌数</span><br><span class="line"><span class="type">local</span> <span class="variable">delta</span> <span class="operator">=</span> now - last</span><br><span class="line"><span class="type">local</span> <span class="variable">newTokens</span> <span class="operator">=</span> math.min(capacity, tokens + delta * rate)</span><br><span class="line"><span class="keyword">if</span> newTokens &gt;= requested then</span><br><span class="line">    -- 够发令牌，更新状态</span><br><span class="line">    redis.call(<span class="string">&#x27;hset&#x27;</span>, key, <span class="string">&#x27;last&#x27;</span>, now)</span><br><span class="line">    redis.call(<span class="string">&#x27;hset&#x27;</span>, key, <span class="string">&#x27;tokens&#x27;</span>, newTokens - requested)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>  -- 允许访问</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>  -- 拒绝访问</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="6-那么优惠劵的发放呢？一些列的问题呢">6.那么优惠劵的发放呢？一些列的问题呢</h2><p>✅ 一、关于优惠券类型的常见问题</p><p>❓1. 如何区分和应用不同类型的优惠券逻辑？</p><p><strong>面试点</strong>：策略模式、优惠金额计算方式。</p><p><strong>答法</strong>：</p><blockquote><p>我们用策略模式来封装每种优惠券的优惠逻辑（如满减、折扣、无门槛）。每种类型对应一个策略类，实现统一的接口方法 <code>calculateDiscount(OrderInfo order)</code>，这样能在运行时动态选择策略，便于扩展和维护。</p></blockquote><hr><p>✅ 二、关于接口设计的追问</p><p>❓2. 为什么接口是这样的？有没有考虑幂等性和安全性？</p><ul><li><code>POST /use</code> 接口可能会被重复调用，是否<strong>幂等</strong>？</li><li>有没有做权限控制，防止其他用户伪造请求？</li></ul><p><strong>答法</strong>：</p><blockquote><p>在使用优惠券时，为防止重复使用，我们使用 Redis + Lua 实现原子操作，同时标记优惠券为“已使用”。此外接口采用登录态校验，验证当前操作用户是否拥有该优惠券。敏感操作都要求用户登录，并记录操作日志。</p></blockquote><hr><p>✅ 三、关于并发处理和限领逻辑</p><p>❓3. 如果多用户并发领取优惠券，如何防止超发？</p><p><strong>答法</strong>：</p><blockquote><p>发放流程中，我们使用 Redis 的 <code>DECR</code> 或 Lua 脚本实现优惠券库存的原子扣减，保证不会发放超过设定数量。同时加锁防止并发条件下库存扣减不一致。</p></blockquote><hr><p>❓4. 如何限制每个用户只能领取一次？</p><p><strong>答法</strong>：</p><blockquote><p>Redis 中设置一个标识键：<code>user:coupon:received:&#123;couponId&#125;:&#123;userId&#125;</code>，发放前先判断这个键是否存在，避免重复发放。也可以结合布隆过滤器提前过滤无效请求。</p></blockquote><hr><p>✅ 四、关于时间与状态校验</p><p>❓5. 限时券怎么判断是否有效？服务端怎么处理时间逻辑？</p><p><strong>答法</strong>：</p><blockquote><p>每张优惠券记录中保存有效时间范围。使用时，服务端比对当前时间是否在有效期内。同时定时任务每天扫描过期优惠券，标记为“已过期”。</p></blockquote><hr><p>✅ 五、关于优惠券使用过程的逻辑判断</p><p>❓6. 使用时如果有多个优惠券，怎么选最优？</p><p><strong>答法</strong>：</p><blockquote><p>前端可以请求一个“推荐最优券”的接口，我们在服务端遍历用户可用券，调用各个策略类计算预期优惠，返回最高优惠金额对应的券。</p></blockquote><hr><p>✅ 六、关于优惠券与订单系统结合问题</p><p>❓7. 如果下单失败了，优惠券是否要恢复？</p><p><strong>答法</strong>：</p><blockquote><p>下单失败（如支付失败、库存不足）时，我们会在事务回滚后将优惠券状态重置为“未使用”。为了避免并发问题，使用分布式事务（如消息队列、TCC）或 Redis 回滚标记。</p></blockquote><hr><p>✅ 七、进阶设计问题</p><p>❓8. 优惠券支持“异步发放”和“定时生效”吗？</p><p><strong>答法</strong>：</p><blockquote><p>是的，可以结合定时任务（如 Quartz 或 Spring Schedule）实现定时发放；发放时间和有效时间字段分离，发放时写入 Redis 延时队列，当生效时间到达时插入到用户优惠券表中。</p></blockquote><hr><p>✅ 八、可能让你设计代码结构的问题</p><p>❓9. 优惠券模块的结构划分是怎样的？</p><p><strong>答法</strong>（示意）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- entity（Coupon, UserCoupon）</span><br><span class="line">- controller（CouponController）</span><br><span class="line">- service（CouponService、UseStrategy接口及实现）</span><br><span class="line">- repository（MyBatis-Plus Mapper）</span><br><span class="line">- util（金额计算工具类）</span><br></pre></td></tr></table></figure><hr><p>✅ 九、安全性问题</p><p>❓10. 用户伪造优惠券 ID，试图套用别人的优惠券怎么办？</p><p><strong>答法</strong>：</p><blockquote><p>每次使用时不仅要校验优惠券 ID 是否存在，还要校验当前登录用户是否是该优惠券持有人，只有归属校验通过才能使用。</p></blockquote><h2 id="7-AOP记录日志">7.AOP记录日志</h2><p>“我们用 AOP 实现了登录日志和业务日志的分类记录，核心设计是：</p><ul><li><p><strong>注解与策略</strong>：定义<code>@Log</code>注解标注需要记录的方法，通过<code>type()</code>参数区分<code>LOGIN</code>和<code>BUSINESS</code>类型。</p></li><li><p><strong>切面逻辑</strong>：拦截方法执行前后，<strong>获取用户信息、操作参数、接口耗时等数据，封装成日志对象</strong>。例如登录日志会记录 IP、设备信息，业务日志会<strong>记录操作类型</strong>（如下单、领券）和参数（如商品 ID、优惠券 ID）。</p></li><li><p><strong>存储优化</strong>：用 Kafka 异步写入日志，避免影响接口性能，再通过 Logstash 同步到 Elasticsearch，方便用 Kibana 按时间、用户 ID 等维度检索。</p></li></ul><p>举个实际场景：用户领取优惠券时，业务日志会记录<code>&#123;user_id:123, operation:&quot;领取满100减20&quot;, params:&#123;coupon_id:567&#125;, cost:87ms&#125;</code>。有次线上发现某个接口耗时突然增加，通过 ELK 检索该接口的日志，很快定位到是参数校验逻辑异常导致的。</p><p>我们对敏感信息做了脱敏处理，比如用户手机号会存成<code>138****5678</code>，既满足日志追溯需求，又符合数据安全规范。”</p><p>存储的信息，使用json进行存储</p><ul><li>登录日志：用户 ID、登录 IP、设备信息、登录时间、状态（成功 / 失败）、失败原因（如密码错误）；</li><li>业务日志：用户 ID、操作类型（如 “领取优惠券”“下单”）、操作内容、操作时间、接口耗时、请求参数（脱敏处理）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Around(&quot;operationLogPointcut()&quot;)</span><span class="comment">//切入点就是注解</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">logOperation</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span>  <span class="operator">=</span> ((MethodSignature)joinPoint.getSignature()).getMethod();</span><br><span class="line">        <span class="type">OperationLog</span> <span class="variable">logAnno</span> <span class="operator">=</span> method.getAnnotation(OperationLog.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        <span class="type">long</span> <span class="variable">duration</span> <span class="operator">=</span>System.currentTimeMillis()-start;</span><br><span class="line"></span><br><span class="line">        <span class="type">LogDTO</span> <span class="variable">log</span> <span class="operator">=</span> buildLog(joinPoint,logAnno.type(),logAnno.action(),duration);</span><br><span class="line">        asyncLogUtils.record(log);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Method获取主机额上的方法，然后建立实体类，设置参数，然后利用DTO传参，然后执行service方法，然后返回，service就是调用log,info</p><p>DTO层负责service和controller直接传输数据</p><h1>6.14模拟面试</h1><h2 id="1-Spring-事务的实现原理是什么？-Transactional-注解在什么情况下会失效？">1.<strong>Spring 事务的实现原理是什么？@Transactional 注解在什么情况下会失效？</strong></h2><p>spring事务的实现原理是基于AOP的动态代理和TransacationInterceptorh还有底层依赖</p><p>AOP：Spring 通过 ProxyFactoryBean 生成代理对象，默认对接口用 JDK 动态代理，对类用 CGLIB 代理；是采用cglib继承目标类的方式去创建代理类，非pulic的方法不能能继承。</p><p>拦截器：核心拦截器，在方法调用前后开启 / 提交 / 回滚事务，基于 ThreadLocal 存储事务状态；基于运行时异常来回滚的，所以把运行时异常给catch或者返回没指定的异常</p><p>底层依赖：通过 PlatformTransactionManager 接口适配不同事务管理器（如 JDBC、JPA）。</p><p>使用ThreadLocal存储事务的状态，（如连接、隔离级别）通过<code>TransactionSynchronizationManager</code>存在线程本地变量，保证线程安全。</p><p>所以基于这个情况,spring事务失效的场景有：</p><p>1.吃掉运行时异常没抛出：</p><p>2.未配置回滚规则，要配置rollbackFor=Exception.class指定类型</p><p>3.调用this</p><p>4.非public方法</p><p>5.事务的传播属性设置为never,not_support这种不支持事务的</p><p>6.调用了不支持事务的数据库</p><p>7.事务嵌套：</p><p><code>REQUIRES_NEW</code> 会挂起外部事务，<strong>提前提交</strong></p><p>嵌套事务用 <code>NESTED</code> 会创建 savepoint，支持回滚子事务（但数据库需支持）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外部事务</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outer</span><span class="params">()</span> &#123;</span><br><span class="line">    inner(); <span class="comment">// REQUIRES_NEW</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(); <span class="comment">// 外部异常不会影响 inner 提交的事务</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inner</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 已提交</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Transactional 属性详解:</p><ul><li><code>propagation</code>：传播行为（如 REQUIRED：当前有事务则加入，无则新建）；</li><li><code>isolation</code>：隔离级别（如 READ_COMMITTED 避免脏读）；</li><li><code>timeout</code>：事务超时时间（如<code>timeout=30</code>秒）；</li><li><code>rollbackFor/rollbackForClassName</code>：指定回滚的异常类型；</li><li><code>noRollbackFor/noRollbackForClassName</code>：指定不回滚的异常类型。</li></ul><h2 id="2-Java-中-HashMap-在-JDK1-8-的底层实现是什么？相对于-JDK1-7-做了哪些优化？">2.<strong>Java 中 HashMap 在 JDK1.8 的底层实现是什么？相对于 JDK1.7 做了哪些优化？</strong></h2><p>1.8：数组+链表+红黑树，1.7数组+链表</p><p>尾插头插</p><p>转换条件，&lt;64先扩容</p><p>为什么不用平衡二叉树，</p><p>尾插解决环的问题（线程 A 和线程 B 同时扩容 HashMap，A 处理链表时被挂起，B 完成扩容后，A 继续处理时按头插法插入元素，导致链表成环；）。</p><p>扩容机制 &lt;64先扩容</p><p>哈希算法优化：</p><ul><li>1.7：通过<code>hashCode() ^ (hashCode() &gt;&gt;&gt; 16)</code>扰动函数打散高 16 位，避免低位冲突；</li><li>1.8：直接使用<code>hashCode()</code>，但计算下标时用<code>(n-1) &amp; hash</code>（n 为数组长度，需是 2 的幂），例：</li></ul><p>实战：</p><ul><li><strong>性能提升</strong>：存储 1000 个哈希冲突的键时，1.7 查询需遍历链表（O (1000)），1.8 用红黑树只需 O (log2 (1000))≈10 次查询；</li><li><strong>内存占用</strong>：红黑树节点比链表节点多存储父节点、左右子节点指针，但若哈希冲突少，链表长度 &lt;8 时仍用链表，节省内存。”</li></ul><p>红黑树特点：</p><ol><li>节点非红即黑；</li><li>根节点和叶节点（null）是黑色；</li><li>红色节点不能相邻；</li><li>任意节点到叶节点的路径上黑节点数相同；<br>插入时最多旋转 2 次即可平衡，适合 HashMap 的高频插入场景。</li></ol><p>场景：</p><p>“线上曾遇到 HashMap 性能问题，通过 JProfiler 发现某接口频繁操作哈希冲突严重的 Map，将 JDK1.7 升级到 1.8 后，接口响应时间从 500ms 降至 50ms，主要得益于红黑树对高冲突场景的优化。”</p><h2 id="3-Spring-Bean-的生命周期是怎样的？-PostConstruct-和-PreDestroy-的作用是什么？">3.<strong>Spring Bean 的生命周期是怎样的？@PostConstruct 和 @PreDestroy 的作用是什么？</strong></h2><p>实例化-&gt;初始化-&gt;使用-&gt;销毁</p><p><strong>实例化</strong>：通过构造器创建 Bean 实例（无参构造或工厂方法）；</p><p><strong>属性赋值</strong>：依赖注入（@Autowired、setter 方法等）；</p><p><strong>初始化前</strong>：执行 BeanPostProcessor 的<code>postProcessBeforeInitialization</code>；</p><p>初始化：</p><ol><li>执行 @PostConstruct 标注的方法；</li><li>实现 InitializingBean 接口的<code>afterPropertiesSet</code>；</li><li>自定义 init-method（XML 配置或 @Bean 的 initMethod 属性）；</li></ol><p><strong>初始化后</strong>：执行 BeanPostProcessor 的<code>postProcessAfterInitialization</code>；</p><p><strong>使用</strong>：Bean 放入容器，供应用获取使用；</p><p><strong>销毁前</strong>：执行 @PreDestroy 标注的方法；</p><p>销毁：</p><ol><li>实现 DisposableBean 接口的<code>destroy</code>；</li><li>自定义 destroy-method。</li></ol><p>三级缓存解决循环依赖：</p><p><strong>@PostConstruct 和 @PreDestroy 的执行时机</strong>：</p><p><strong>@PostConstruct</strong>：在依赖注入完成后，初始化方法（如 init-method）之前执行；</p><p><strong>@PreDestroy</strong>：在 Bean 销毁前执行，先于 destroy-method；</p><p>应用场景：</p><ul><li>初始化：数据库连接池初始化、缓存预热；</li><li>销毁：释放资源（关闭文件流、释放锁）。</li></ul><p>关键点：</p><ul><li><strong>BeanPostProcessor</strong>：初始化前后的拦截器（如 AOP 代理在此阶段创建）；</li><li><strong>InstantiationAwareBeanPostProcessor</strong>：属性赋值前的拦截器（可修改属性值）；</li><li><strong>SmartInitializingSingleton</strong>：所有单例 Bean 初始化完成后执行（适合初始化需要依赖其他 Bean 的场景）。</li></ul><p>问题解决：</p><ul><li>问题：ServiceA 依赖 ServiceB，ServiceB 的 @PostConstruct 方法未完成时，ServiceA 已使用 ServiceB；</li><li>解决：通过<code>@DependsOn(&quot;serviceB&quot;)</code>强制 ServiceA 在 ServiceB 之后初始化，或实现<code>Ordered</code>接口指定初始化顺序。”或者是使用懒加载加载一个，或者是重新构建方法</li></ul><h2 id="4-Java-中-synchronized-和-volatile-的区别是什么？各自的应用场景有哪些？">4.<strong>Java 中 synchronized 和 volatile 的区别是什么？各自的应用场景有哪些？</strong></h2><ul><li><p>synchronized：</p><ul><li><strong>原子性</strong>：通过 <strong>Monitor 锁</strong>确保代码块同一时间只能被一个线程执行；</li><li><strong>可见性</strong>：解锁时将工作内存变量刷新到主内存；</li><li><strong>有序性</strong>：通过 happens-before 原则，禁止指令重排（锁的获取 / 释放形成 happens-before 关系）。</li></ul></li><li><p>volatile：</p><ul><li><strong>可见性</strong>：写操作时强制刷新主内存，读操作时强制从主内存读取；</li><li><strong>有序性</strong>：通过内存屏障（Memory Barrier）禁止指令重排，确保 happens-before 关系；</li><li><strong>不保证原子性</strong>：仅保证单次读 / 写操作的原子性，如<code>i++</code>（实际是读 - 改 - 写三步，非原子）。</li></ul></li></ul><p>内存屏障使用的时间：读写屏障，写写屏障，写读屏障</p><p>使用场景：</p><p>s:原子操作，线程安全比如hashtable</p><p>v:状态标记,interput</p><p>联合使用：单例的DCL模式，concurrenthashmap,</p><p>问题：</p><ul><li><strong>问题</strong>：多线程读取配置开关不生效；</li><li><strong>原因</strong>：配置开关未用 volatile 修饰，线程读取的是本地缓存值；</li><li><strong>解决</strong>：<code>volatile boolean configSwitch = false;</code>，修改后立即通知所有线程。</li></ul><h2 id="5-Java-中为什么要使用线程池？线程池如何处理异常？">5.<strong>Java 中为什么要使用线程池？线程池如何处理异常？</strong></h2><p><strong>线程池的核心优势系统化梳理</strong>：</p><ul><li><strong>资源复用</strong>：避免频繁创建销毁线程（创建线程耗时约 3ms，复用可降低开销）；</li><li><strong>控制并发数</strong>：防止并发过高导致的 OOM（如秒杀场景限制线程数保护数据库）；</li><li><strong>统一管理</strong>：统一设置线程名称、优先级，方便日志追踪和故障排查；</li><li><strong>异步处理</strong>：将耗时任务放入线程池，避免主线程阻塞（如日志异步写入）。</li></ul><p>比较单线程，多线程，和线程池</p><p>异常处理：</p><p>使用<code>try-catch</code>包裹任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">executor.execute(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        doTask();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;任务异常&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过<code>Future</code>获取异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;?&gt; future = executor.submit(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;任务异常&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    future.get(); <span class="comment">// 阻塞获取结果，抛出异常</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;任务异常&quot;</span>, e.getCause());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拒绝策略<code>AbortPolicy</code>会抛出<code>RejectedExecutionException</code>，需在提交任务时捕获：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    executor.execute(task);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RejectedExecutionException e) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;任务被拒绝&quot;</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>场景：</p><ul><li><strong>电商下单场景</strong>：<br>用线程池异步处理库存扣减、积分计算等耗时任务，主线程快速返回订单创建结果，提升用户体验；</li><li><strong>日志系统</strong>：<br>用线程池异步写入日志到 Kafka，避免 IO 阻塞影响业务接口响应时间。</li></ul><h1>6.19模拟面试</h1><h2 id="1-在-“校园餐饮系统”-项目里，你提到用了-Redis-存储-token-缓解压力，能讲讲具体怎么设计-key-的结构，以及如何保障-token-存储和读取的高效性与安全性不？">1.在 “校园餐饮系统” 项目里，你提到用了 Redis 存储 token 缓解压力，能讲讲具体怎么设计 key 的结构，以及如何保障 token 存储和读取的高效性与安全性不？</h2><p>我们使用 Redis 存储用户的 <code>refresh token</code>，以提升系统性能并减少数据库压力，整体设计分为三部分：<strong>Key 设计、存储结构、安全机制</strong>。</p><p>结构设计：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">token:refresh:&#123;userId&#125;</span><br></pre></td></tr></table></figure><p>这种格式能明确标识 token 类型和所属用户，保证唯一性和可读性，避免 key 冲突。</p><p>Value 的存储结构：</p><p>我们使用 Redis 的 <strong>字符串结构（String）</strong> 或 <strong>哈希结构（Hash）</strong> 存储 refresh token，取决于业务是否需要额外附加字段（如生成时间、IP、设备信息）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HSET token:refresh:123 userId 123 token abc123 createdAt 2025-06-19</span><br></pre></td></tr></table></figure><p>设置合理的过期时间（如 7 天），使用 <code>EXPIRE</code> 或 <code>SETEX</code> 命令控制 token 生命周期。</p><p>Token 的生成与安全性保障：</p><p>Token 使用 JWT 生成，签名采用 <strong>HS256 算法</strong>（HMAC + SHA256），密钥保存在服务端配置中心或安全的 KMS（Key Management Service）中。</p><p>JWT 本身包含用户信息、过期时间等，生成后只将 <code>access token</code> 下发到前端，<code>refresh token</code> 则存于 Redis 中服务端管理，防止伪造。</p><p>认证流程：</p><p>登录时生成 access + refresh token：</p><ul><li>access token 返回给前端；</li><li>refresh token 存入 Redis，key 为 <code>token:refresh:&#123;userId&#125;</code>。</li></ul><p>前端 token 过期后，<strong>携带 refresh token 请求刷新接口</strong>；</p><p>后端校验 Redis 中的 refresh token，校验通过后重新生成新 token 对。</p><p>提前防止问题：</p><p><strong>防缓存穿透</strong>：使用 <strong>布隆过滤器</strong> 记录<strong>有效用户 ID 或常见请求 Key</strong>，防止恶意请求频繁查询 Redis 失败并打爆数据库。</p><p><strong>防击穿</strong>：为热点用户的 token <strong>设置合理 TTL</strong>，避免同一时间大批用户同时失效。</p><p><strong>防雪崩</strong>：TTL 设置加入随机因子，避免大批 key 同时过期。</p><p><strong>权限校验</strong>：请求时验证 token 是否属于当前 userId，防止越权操作。</p><h2 id="2-在-“MinaDB-自研轻量级数据库系统”-项目里，你实现了基于-Java-NIO-的数据页读写管理模块，提升了-3-倍访问效率，讲讲-Java-NIO-是咋在这个模块里发挥作用的，和传统-I-O-相比，具体优化点在哪呀？">2.在 “MinaDB - 自研轻量级数据库系统” 项目里，你实现了基于 Java NIO 的数据页读写管理模块，提升了 3 倍访问效率，讲讲 Java NIO 是咋在这个模块里发挥作用的，和传统 I/O 相比，具体优化点在哪呀？</h2><p>BIO 与 NIO 的区别：</p><p><strong>BIO（Blocking I/O）</strong>：每个请求需要一个线程处理，线程阻塞在 I/O 操作上，连接数一多就容易造成线程资源耗尽，系统响应慢。</p><p><strong>NIO（Non-blocking I/O）</strong>：通过 <strong>Selector + Channel + Buffer</strong> 实现多路复用，单线程可监听多个 Channel，避免大量线程阻塞等待，提高了资源利用率。</p><p>NIO 工作机制：</p><ul><li>客户端连接通过 <code>ServerSocketChannel</code> 接收；</li><li>每个 <code>Channel</code> 注册到 <code>Selector</code> 上，监听感兴趣的事件（如 <code>READ</code>、<code>WRITE</code>）；</li><li>Selector 使用 <code>select()</code> <strong>非阻塞轮询</strong>就绪事件；</li><li>当某个 Channel 有事件到达，就通过 <code>Buffer</code> 读写数据，由工作线程处理请求。</li></ul><p>这种模型的优势是：<strong>少量线程可处理高并发请求</strong>，适合 I/O 密集型场景。</p><p>数据库应用：</p><p>数据库系统天然是多并发场景，传统 BIO 每个连接对应一个线程，会造成线程浪费甚至上下文切换频繁；</p><p>使用 NIO 模型后，我们<strong>采用 Reactor 模式</strong>，用一个主线程监听所有连接事件，用线程池异步处理真正的读写请求；</p><p>每个客户端连接通过 Channel 注册到 Selector 上，提升了连接并发处理能力；</p><p>底层页式读写通过 Buffer 显著减少了系统调用次数和数据拷贝成本，提高了磁盘 I/O 效率。</p><p>并发控制说明：</p><p>因为是数据库系统，多用户可能同时对同一数据页进行访问；</p><p>在读写路径上，我们结合了<strong>读写锁</strong>机制和自实现的<strong>MVCC（多版本并发控制）</strong>，确保事务隔离的一致性；</p><p>NIO 负责连接层的高效事件处理，MVCC 负责数据访问层的并发安全。</p><h2 id="3-在-“校园餐饮系统”-项目里，你用-AOP-实现了操作日志自动记录，讲讲-AOP-切点是怎么定义的，怎么确保只拦截到需要记录日志的关键业务方法，又不会过度拦截影响系统性能呀？">3.在 “校园餐饮系统” 项目里，你用 AOP 实现了操作日志自动记录，讲讲 AOP 切点是怎么定义的，怎么确保只拦截到需要记录日志的关键业务方法，又不会过度拦截影响系统性能呀？</h2><p>我们系统中使用了 Spring AOP 来统一记录用户的操作日志，包括登录日志和业务行为日志。整体设计思路是基于 <strong>自定义注解 + 切面编程 + 策略模式</strong> 来实现灵活、可扩展的日志记录体系。</p><p>我们定义了一个自定义注解 <code>@LogRecord</code>，用于标记需要记录的操作方法，注解中可以配置以下元信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LogRecord &#123;</span><br><span class="line">    LogType <span class="title function_">type</span><span class="params">()</span>; <span class="comment">// 登录日志 or 业务日志</span></span><br><span class="line">    String <span class="title function_">action</span><span class="params">()</span>; <span class="comment">// 操作行为描述，如 &quot;删除用户&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>切面实现日志拦截逻辑:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(logRecord)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">recordLog</span><span class="params">(ProceedingJoinPoint pjp, LogRecord logRecord)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 1. 获取方法签名与参数</span></span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) pjp.getSignature();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 根据注解元信息决定日志类型</span></span><br><span class="line">        <span class="type">LogType</span> <span class="variable">type</span> <span class="operator">=</span> logRecord.type();</span><br><span class="line">        <span class="type">String</span> <span class="variable">action</span> <span class="operator">=</span> logRecord.action();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 执行方法并记录执行结果</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 将日志对象封装后交由策略类处理</span></span><br><span class="line">        <span class="type">LogContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LogContext</span>(...);</span><br><span class="line">        logStrategyFactory.getStrategy(type).record(context);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>日志记录策略设计（策略模式）:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">record</span><span class="params">(LogContext context)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginLogStrategy</span> <span class="keyword">implements</span> <span class="title class_">LogStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">record</span><span class="params">(LogContext context)</span> &#123;</span><br><span class="line">        <span class="comment">// 记录用户登录成功/失败，IP、时间等</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BizLogStrategy</span> <span class="keyword">implements</span> <span class="title class_">LogStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">record</span><span class="params">(LogContext context)</span> &#123;</span><br><span class="line">        <span class="comment">// 记录用户执行的业务操作，如“删除用户”</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>策略选择通过 <code>LogStrategyFactory</code> 实现，支持按日志类型动态扩展。</p><p>如何保证只拦截关键方法、避免性能问题：</p><p>只对使用 <code>@LogRecord</code> 注解的方法进行拦截，确保业务无关方法不被扫描，避免性能浪费；</p><p><strong>切面逻辑尽量精简</strong>，只做元信息解析和日志上下文构建，真正的日志落盘交给异步任务处理或消息队列；</p><p>对不需要记录的查询类接口，不加注解，完全绕过切面执行，保障系统整体响应效率。</p><p>日志可选择输出到文件（使用 SLF4J + Logback），或存入数据库 / Elasticsearch，供后期审计；</p><p>特殊场景下（如操作异常），支持记录异常栈与执行耗时。</p><p>追问：：：</p><ul><li><strong>问</strong>：@Around 和 @Before 有什么区别，为什么你选用 Around？</li><li><strong>答</strong>：Around 能拿到方法执行前后的控制权，包括返回值和异常，更适合记录执行结果和耗时。</li><li><strong>问</strong>：怎么处理日志失败、落盘慢的问题？</li><li><strong>答</strong>：日志落盘可异步执行或通过 MQ 异步解耦，避免阻塞主流程。</li></ul><h2 id="4-Mysql的两段提交的三个步骤">4.Mysql的两段提交的三个步骤</h2><p>1.prepare</p><p>InnoDB 写入 redo log 的 prepare 状态并刷盘:</p><p>InnoDB 引擎将事务修改的数据写入内存（Buffer Pool）；</p><p>然后生成一条 redo log，标记为 <code>&quot;prepare&quot;</code> 状态；</p><p>调用 <code>fsync</code> 将 redo log 刷入磁盘，保证崩溃后能恢复；</p><p>2.binlogcommit:</p><p>Server 层将整个事务的逻辑操作记录为一条 binlog；</p><p>将 binlog 持久化刷盘，<code>fsync()</code> 确保落地。</p><p>3.redocommit:</p><p>Server 层写 binlog 成功后，通知 InnoDB；</p><p>InnoDB 将之前 prepare 状态的 redo log 更新为 <code>&quot;commit&quot;</code> 状态；</p><p>这一步是关键确认步骤，表示事务已完全提交。</p><p>如果 <strong>先写 binlog 再写 redo log</strong>：InnoDB 崩溃了但 binlog 有记录，主从同步出错；</p><p>如果 <strong>只写 redo log，不写 binlog</strong>：主库恢复没问题，但从库根本不会同步这条事务，数据不一致；</p><p>所以必须保证 <strong>redo log 与 binlog 一致性落盘</strong>，2PC 正是为了解决这一问题。</p><h2 id="5-springboot启动类注解">5.springboot启动类注解</h2><p>@SpringBootApplication</p><p>这个注解是 Spring Boot 应用的入口，<strong>是一个组合注解</strong>，等价于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan</span><br></pre></td></tr></table></figure><p><code>@Configuration</code></p><ul><li>表示这是一个配置类，等同于传统的 <code>applicationContext.xml</code>；</li><li>可在该类中使用 <code>@Bean</code> 定义 Bean。</li></ul><p><code>@EnableAutoConfiguration</code></p><ul><li>开启 Spring Boot 的<strong>自动配置机制</strong>；</li><li>会根据项目依赖的 jar 自动配置 Spring Bean（例如依赖了 spring-boot-starter-web，就会自动配置 Tomcat、Spring MVC 等）；</li><li>可通过 <code>exclude</code> 属性排除某些自动配置类：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableAutoConfiguration(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span><br></pre></td></tr></table></figure><p>它通过 <strong><code>SpringFactoriesLoader</code> + SPI机制 + 条件注解</strong>，在启动时动态加载并生效配置类。</p><blockquote><p>@Import(AutoConfigurationImportSelector.class)<br>这个 Import 会触发 Spring 的自动导入机制；</p><p>AutoConfigurationImportSelector 会加载所有自动配置类</p><p>内部使用 <code>SpringFactoriesLoader</code> 加载 <code>spring.factories</code> 文件中所有自动配置类</p><p>每个自动配置类都配合有 <code>@ConditionalOn...</code> 注解，例如：</p><p>Spring 会根据当前 <strong>classpath</strong>、<strong>已有 Bean</strong>、<strong>配置文件内容</strong>等条件判断是否真正加载配置类；</p><p>从而实现了“<strong>按需加载</strong>”的自动配置。</p></blockquote><p>在springboot中约定大于配置，</p><p>约定大于配置是Spring Boot的核心设计理念，它通过<strong>预设合理的默认行为和项目规范</strong>，大幅减少开发者需要手动配置的步骤，从而提升开发效率和项目标准化程度。</p><p>理解 Spring Boot 中的“约定大于配置”原则，可以从以下几个方面来解释：</p><ul><li><strong>自动化配置</strong>：Spring Boot 提供了<strong>大量的自动化配置</strong>，通过分析项目的依赖和环境，自动配置应用程序的行为。开发者无需显式地配置每个细节，大部分常用的配置都已经预设好了。例如，引入<code>spring-boot-starter-web</code>后，Spring Boot会自动配置内嵌Tomcat和Spring MVC，无需手动编写XML。</li><li><strong>默认配置</strong>：Spring Boot 为诸多方面提供<strong>大量默认配置</strong>，如连接数据库、设置 Web 服务器、处理日志等。开发人员无需手动配置这些常见内容，框架已做好决策。例如，默认的日志配置可让应用程序快速输出日志信息，<strong>无需开发者额外繁琐配置日志级别、输出格式与位置等。</strong></li><li><strong>约定的项目结构</strong>：Spring Boot 提倡<strong>特定项目结</strong>构，通常主应用程序类（含 main 方法）置于根包，控制器类、服务类、数据访问类等分别放在相应子包，如<code>com.example.demo.controller</code>放控制器类，<code>com.example.demo.service</code>放服务类等。<strong>此约定使团队成员更易理解项目结构与组织，新成员加入项目时能快速定位各功能代码位置，提升协作效率。</strong></li></ul><p><code>@ComponentScan</code></p><ul><li>扫描当前类所在包及其子包下的所有类，识别注解如 <code>@Component</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code> 并注册到 Spring 容器；</li><li>可指定自定义扫描路径：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ComponentScan(basePackages = &#123;&quot;com.example.service&quot;, &quot;com.example.controller&quot;&#125;)</span><br></pre></td></tr></table></figure><p>扫描这个下面的包和他的子类</p><p>常见注解：</p><p><code>@EnableScheduling</code></p><ul><li>开启定时任务支持（配合 <code>@Scheduled</code> 使用）</li></ul><p><code>@EnableAsync</code></p><ul><li>开启异步任务支持（配合 <code>@Async</code> 使用）</li></ul><p><code>@EnableTransactionManagement</code></p><ul><li>开启事务注解支持（如 <code>@Transactional</code>）</li></ul><h2 id="6-BeanFactory-和-FactoryBean-的区别">6.<code>BeanFactory</code> 和 <code>FactoryBean</code> 的区别</h2><p><code>BeanFactory</code> 是 Spring 容器本身，负责管理所有 Bean；<br><code>FactoryBean</code> 是你自己定义的 Bean，用来创建其他 Bean。</p><table><thead><tr><th>对比点</th><th><code>BeanFactory</code></th><th><code>FactoryBean</code></th></tr></thead><tbody><tr><td>类型</td><td>接口（Spring 顶层 IOC 容器）</td><td>接口（自定义 Bean 的工厂）</td></tr><tr><td>位置</td><td>Spring 框架提供</td><td>用户自定义实现</td></tr><tr><td>作用</td><td>提供获取 Bean 的基础功能，如 <code>getBean()</code></td><td>用于控制某个复杂 Bean 的创建逻辑</td></tr><tr><td>返回对象</td><td>返回注册的原始 Bean 实例</td><td>返回由 <code>getObject()</code> 方法创建的对象</td></tr><tr><td>示例用途</td><td>XML 加载、懒加载场景用到</td><td>MyBatis 中用于创建 Mapper 接口代理</td></tr><tr><td>典型实现类</td><td><code>DefaultListableBeanFactory</code></td><td>用户自定义，如 <code>MyCarFactoryBean</code></td></tr></tbody></table><p>1️⃣ <code>BeanFactory</code> 示例（Spring 提供）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BeanFactory factory = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">UserService userService = factory.getBean(&quot;userService&quot;, UserService.class);</span><br></pre></td></tr></table></figure><ul><li><code>BeanFactory</code> 就是容器，负责“拿 Bean”。</li><li>常用于早期的 XML 配置方式。</li></ul><p><code>FactoryBean</code> 示例（用户自定义）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCarFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Car&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 返回一个自定义创建的对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;BMW&quot;</span>, <span class="number">2025</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Car.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Car car; <span class="comment">// 实际注入的是 MyCarFactoryBean.getObject() 返回的 Car 实例</span></span><br></pre></td></tr></table></figure><ul><li>Spring 启动时会识别 <code>MyCarFactoryBean</code>，但注入时拿的是 <code>getObject()</code> 的返回值；</li><li>如果你想拿到 <code>FactoryBean</code> 本身，可以用：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CarFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> (CarFactoryBean) context.getBean(<span class="string">&quot;&amp;carFactoryBean&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>beanFactory</code> 是 Spring 的底层 IOC 容器接口，提供了 Bean 的获取、懒加载等功能。<br><code>FactoryBean</code> 是一个用于创建 Bean 的“工厂类”，由我们<strong>自定义创建逻辑</strong>，它本身是一个 Bean，但它返回的对象是 <code>getObject()</code> 产生的。<br>例如：MyBatis 就是通过 FactoryBean 动态创建 Mapper 接口代理对象。</p><h2 id="7-MyBatis-Mapper-注册过程">7.MyBatis Mapper 注册过程</h2><p><strong>动态代理、FactoryBean、Configuration 注册流程</strong>的理解</p><p>MyBatis 使用 <code>MapperFactoryBean</code> 将<strong>接口注册为代理对象</strong>，启动时会把接口方法解析成 <code>MappedStatement</code> 存入 Configuration 中，运行时由 <code>MapperProxy</code> 通过反射动态执行 SQL。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">       XML or <span class="meta">@MapperScan</span></span><br><span class="line">              ↓</span><br><span class="line">  【Mapper接口注册】 → 注册到 Configuration.mapperRegistry</span><br><span class="line">              ↓</span><br><span class="line">  【创建代理类】 MapperProxyFactory → MapperProxy</span><br><span class="line">              ↓</span><br><span class="line">【执行 SQL】 通过 SqlSession 执行对应 MappedStatement</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.@MapperScan 启动时扫描 Mapper 接口</p><p><code>@MapperScan</code> 会注册 <code>MapperScannerConfigurer</code> 或 <code>MapperScannerRegistrar</code>；</p><p>它们会扫描包下所有接口，<strong>对每个接口注册一个 <code>MapperFactoryBean</code> 到 Spring 容器中</strong>。</p><p>2.<strong>每个 Mapper 接口注册成一个 MapperFactoryBean</strong></p><p><strong>MapperFactoryBean</strong> 实现了 Spring 的 <code>FactoryBean</code> 接口；</p><p>它不会直接注入自身，而是调用 <code>getObject()</code> 返回 Mapper 接口的代理类。</p><p>3.MapperProxyFactory 创建代理类</p><p>返回的是一个 <strong>MapperProxy 的动态代理对象</strong>，底层通过 <code>Proxy.newProxyInstance(...)</code> 实现；</p><p>所以你注入的 <code>UserMapper</code> 实际是 MapperProxy 代理类。</p><p>4.代理对象调用方法时执行 SQL</p><p><code>MapperMethod</code> 会查找 <code>Configuration</code> 中注册的 <code>MappedStatement</code>；</p><p>调用 <code>sqlSession.selectOne(...)</code> 或 <code>insert(...)</code> 等执行 SQL；</p><p>SQL 语句和参数映射都来源于 XML 或注解注册的 MappedStatement。</p><p>5.在 <code>SqlSessionFactoryBuilder.build()</code> 构建过程中，MyBatis 会：</p><ul><li>加载 XML 映射文件或注解 Mapper；</li><li>把每个 <code>&lt;mapper&gt;</code> 里的 SQL 语句解析为 <code>MappedStatement</code>；</li><li>调用 <code>Configuration.addMappedStatement()</code> 注册到全局配置里；</li><li>最终保存在 <code>configuration.getMappedStatements()</code> 的 Map 中。</li></ul>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/%E9%9D%A2%E7%BB%8F/">面经</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/%E9%9D%A2%E8%AF%95/">面试</category>
      
      
      <comments>https://blog.tokenlen.top/2025/06/11/towork/working1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>瑞吉外卖逻辑分析</title>
      <link>https://blog.tokenlen.top/2025/06/10/workmenu/reggie2/</link>
      <guid>https://blog.tokenlen.top/2025/06/10/workmenu/reggie2/</guid>
      <pubDate>Mon, 09 Jun 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1&gt;业务&lt;/h1&gt;
&lt;h2</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1>业务</h1><h2 id="service">service</h2><p><strong>ShopServiceImpl：</strong></p><p>使用redis设置和查询店铺的状态。redistemplate.opsforvalue.set/get(key)</p><p><strong>AddressBookServiceImpl:</strong></p><p>新增地址，实体类设置字段的值，然后调用mapper的insert方法。</p><p>修改地址，调用updata调用主键去更新方法更新</p><p>设置默认地址，设置默认地址，然后获取当前用户的id，然后在sql中set用于默认地址,where userid。然后更新默认字段 return</p><p>使用LambdaUpdateWrapper去写一个查询条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 将该用户的所有地址设为非默认</span></span><br><span class="line">LambdaUpdateWrapper&lt;AddressBook&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">wrapper.eq(AddressBook::getUserId, userId).set(AddressBook::getIsDefault, <span class="number">0</span>);</span><br><span class="line">addressBookMapper.update(<span class="literal">null</span>, wrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 将当前地址设为默认</span></span><br><span class="line">addressBook.setIsDefault(<span class="number">1</span>);</span><br><span class="line">addressBookMapper.updateById(addressBook);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>CategoryServiceImpl：</strong></p><p>新增菜品，新建菜品的实体类，使用beanuntil，拷贝DTO层数据，然后set状态，然后insert</p><p>分类查询，使用pagehelper插件，=.startpage(num,size);</p><p>然后使用Page&lt;&gt;保证菜品类，然后根据模糊匹配进行搜索，然后mapper调用，然后新建一个分页包装的reseponse返回这个数量和结果。</p><p>根据id删除菜品，先mapper查，然后看dishcount字段是不是关联了菜品，关联套餐不能删除，抛出异常。没有的话，就del删除。</p><p>ReportServiceImpl：</p><p>查询，使用一个map来装这个数据，然后返回数据，传入到mapper中的where/if标签里面一般是。</p><p>Mapper XML 中使用 <code>&lt;if test=&quot;xxx != null&quot;&gt;</code> 拼接 where 条件。</p><p>TOPk,还是使用map，但是加上了连表查询。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT d.name, SUM(od.number) as total_sales</span><br><span class="line">FROM order_detail od</span><br><span class="line">JOIN dish d ON od.dish_id = d.id</span><br><span class="line">GROUP BY d.id</span><br><span class="line">ORDER BY total_sales DESC</span><br><span class="line">LIMIT #&#123;topK&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>SetmealServiceImpl：</strong></p><p>新增套餐，先新建套餐实体类，拷贝dto数据，插入条数据，获取外键，然后获取关联的菜品，设置外键，然后保存。然后mapper里面使用foreach来遍历填写数据</p><p>分页插件查询。</p><p>批量删除套餐，使用foreach,lamda表达式，通过id查找数据，如果套餐的stuse为1.说明在售卖，不能删除，抛出异常。然后通过id删除套餐表中的数据。删除菜品关系表中的数据。</p><p>套餐的启用和停售，判断套餐内是否有停售菜品，有停售菜品的时候不能启用套餐，</p><p>如果是起售状态的话，直接更新为停售</p><p>修改套餐：</p><p>获取实体类对象，然后拷贝dto，然后更新数据。获取外键，删除套餐和菜品的关联关系。设置新的关系。然后重新插入</p><h2 id="controller">controller</h2><p>DishController:</p><p>查询的时候，先从redis中根据key来拿数据，查到缓存的话，就直接返回缓存。没有的话，就从数据库中拿，然后存入redis中。</p><p>查询缓存：注解 <code>@Cacheable</code>，用于 <strong>将方法的返回值缓存起来</strong>，提高查询效率，避免重复查数据库。你这段代码的意思是：<strong>按分类 ID 查询套餐，并将结果缓存</strong>，条件是结果不为空。</p>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/java/">java</category>
      
      <category domain="https://blog.tokenlen.top/categories/java/%E9%A1%B9%E7%9B%AE/">项目</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/spring-boot/">spring boot</category>
      
      <category domain="https://blog.tokenlen.top/tags/java/">java</category>
      
      
      <comments>https://blog.tokenlen.top/2025/06/10/workmenu/reggie2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Mysql练习3</title>
      <link>https://blog.tokenlen.top/2025/06/09/mysql/sqltest3/</link>
      <guid>https://blog.tokenlen.top/2025/06/09/mysql/sqltest3/</guid>
      <pubDate>Sun, 08 Jun 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1&gt;基础语法回顾&lt;/h1&gt;
&lt;h2 id=&quot;1-SQL110-插入记录（一）&quot;&gt;1.&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1>基础语法回顾</h1><h2 id="1-SQL110-插入记录（一）">1.<a href="https://www.nowcoder.com/practice/5d2a42bfaa134479afb9fffd9eee970c?tpId=240&amp;tqId=2221797&amp;ru=/exam/oj&amp;qru=/ta/sql-advanced/question-ranking&amp;sourceUrl=%2Fexam%2Foj%3FquestionJobId%3D10%26subTabName%3Donline_coding_page"><strong>SQL110</strong> <strong>插入记录（一）</strong></a></h2><p>牛客后台会记录每个用户的试卷作答记录到exam_record表，现在有两个用户的作答记录详情如下：</p><ul><li>用户1001在2021年9月1日晚上10点11分12秒开始作答试卷9001，并在50分钟后提交，得了90分；</li><li>用户1002在2021年9月4日上午7点1分2秒开始作答试卷9002，并在10分钟后退出了平台。</li></ul><p>试卷作答记录表exam_record中，表已建好，其结构如下，请用一条语句将这两条记录插入表中。</p><table><thead><tr><th>Filed</th><th>Type</th><th>Null</th><th>Key</th><th>Extra</th><th>Default</th><th>Comment</th></tr></thead><tbody><tr><td>id</td><td>int(11)</td><td>NO</td><td>PRI</td><td>auto_increment</td><td>(NULL)</td><td>自增ID</td></tr><tr><td>uid</td><td>int(11)</td><td>NO</td><td></td><td></td><td>(NULL)</td><td>用户ID</td></tr><tr><td>exam_id</td><td>int(11)</td><td>NO</td><td></td><td></td><td>(NULL)</td><td>试卷ID</td></tr><tr><td>start_time</td><td>datetime</td><td>NO</td><td></td><td></td><td>(NULL)</td><td>开始时间</td></tr><tr><td>submit_time</td><td>datetime</td><td>YES</td><td></td><td></td><td>(NULL)</td><td>提交时间</td></tr><tr><td>score</td><td>tinyint(4)</td><td>YES</td><td></td><td></td><td>(NULL)</td><td>得分</td></tr></tbody></table><p>该题最后会通过执行SELECT uid, exam_id, start_time, submit_time, score FROM exam_record;来对比结果</p><p>题解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into exam_record(uid,exam_id,start_time,submit_time,score) </span><br><span class="line">VALUES (1001,9001,&#x27;2021-09-01 22:11:12&#x27;,&#x27;2021-09-01 23:01:12&#x27; ,90),</span><br><span class="line">(1002,9002,&#x27;2021-09-04 07:01:02&#x27;,null,NULL);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>按照顺序插入即可，注意一一对应</p><ol start="2"><li></li></ol><p>牛客的运营同学想要查看大家在SQL类别中高难度试卷的得分情况。</p><p>请你帮她从exam_record数据表中计算所有用户完成SQL类别高难度试卷得分的截断平均值（去掉一个最大值和一个最小值后的平均值）。</p><p>示例数据：examination_info（exam_id试卷ID, tag试卷类别, difficulty试卷难度, duration考试时长, release_time发布时间）</p><table><thead><tr><th>id</th><th>exam_id</th><th>tag</th><th>difficulty</th><th>duration</th><th>release_time</th></tr></thead><tbody><tr><td>1</td><td>9001</td><td>SQL</td><td>hard</td><td>60</td><td>2020-01-01 10:00:00</td></tr><tr><td>2</td><td>9002</td><td>算法</td><td>medium</td><td>80</td><td>2020-08-02 10:00:00</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">示例数据：exam_record（uid用户ID, exam_id试卷ID, start_time开始作答时间, submit_time交卷时间, score得分）iduidexam_idstart_timesubmit_time</span><br><span class="line">score1100190012020-01-02 09:01:012020-01-02 09:21:01</span><br><span class="line">8021001</span><br><span class="line">9001</span><br><span class="line">2021-05-02 10:01:012021-05-02 10:30:01</span><br><span class="line">81310019001</span><br><span class="line">2021-06-02 19:01:01</span><br><span class="line">2021-06-02 19:31:01</span><br><span class="line">84</span><br><span class="line">410019002</span><br><span class="line">2021-09-05 19:01:01</span><br><span class="line">2021-09-05 19:40:0189</span><br><span class="line">51001</span><br><span class="line">90012021-09-02 12:01:01</span><br><span class="line">(NULL)</span><br><span class="line">(NULL)</span><br><span class="line">61001</span><br><span class="line">9002</span><br><span class="line">2021-09-01 12:01:01</span><br><span class="line">(NULL)</span><br><span class="line">(NULL)</span><br><span class="line">710029002</span><br><span class="line">2021-02-02 19:01:01</span><br><span class="line">2021-02-02 19:30:01</span><br><span class="line">87810029001</span><br><span class="line">2021-05-05 18:01:01</span><br><span class="line">2021-05-05 18:59:02909</span><br><span class="line">10039001</span><br><span class="line">2021-09-07 12:01:01</span><br><span class="line">2021-09-07 10:31:01</span><br><span class="line">501010049001</span><br><span class="line">2021-09-06 10:01:01</span><br><span class="line">(NULL)</span><br><span class="line">(NULL)</span><br></pre></td></tr></table></figure><p>根据输入你的查询结果如下：</p><p>题解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT tag, difficulty,</span><br><span class="line">    ROUND((SUM(score) - MAX(score) - MIN(score)) / (COUNT(score) - 2), 1) AS clip_avg_score</span><br><span class="line">FROM exam_record</span><br><span class="line">JOIN examination_info USING(exam_id)</span><br><span class="line">WHERE tag = &#x27;SQL&#x27; AND difficulty = &#x27;hard&#x27;</span><br><span class="line">GROUP BY tag, difficulty;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据sql查询的分别出现的列，然后来根据这些列来写</p><p>主要是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROUND((SUM(score) - MAX(score) - MIN(score)) / (COUNT(score) - 2), 1) AS clip_avg_score</span><br></pre></td></tr></table></figure><p>这个保留一位小数，计算平均数</p><p>然后使用联合查询</p><p>将examination_info和exam_record连接起来，其主键是exam_id</p><p>然后where条件</p><p>最后可以来个按组排序</p><h2 id="2-SQL200-查找最晚入职员工的所有信息">2.<strong>SQL200</strong> <strong>查找最晚入职员工的所有信息</strong></h2><p>有一个员工employees表简况如下:</p><table><thead><tr><th>emp_no</th><th>birth_date</th><th>first_name</th><th>last_name</th><th>gender</th><th>hire_date</th></tr></thead><tbody><tr><td>10001</td><td>1953-09-02</td><td>Georgi</td><td>Facello</td><td>M</td><td>1986-06-26</td></tr><tr><td>10002</td><td>1964-06-02</td><td>Bezalel</td><td>Simmel</td><td>F</td><td>1985-11-21</td></tr><tr><td>10003</td><td>1959-12-03</td><td>Parto</td><td>Bamford</td><td>M</td><td>1986-08-28</td></tr><tr><td>10004</td><td>1954-05-01</td><td>Christian</td><td>Koblick</td><td>M</td><td>1986-12-01</td></tr><tr><td>10005</td><td>1955-01-21</td><td>Kyoichi</td><td>Maliniak</td><td>M</td><td>1989-09-12’</td></tr><tr><td>10006</td><td>1953-04-20</td><td>Anneke</td><td>Preusig</td><td>F</td><td>1989-06-02</td></tr><tr><td>10007</td><td>1957-05-23</td><td>Tzvetan</td><td>Zielinski</td><td>F</td><td>1989-02-10</td></tr><tr><td>10008</td><td>1958-02-19</td><td>Saniya</td><td>Kalloufi</td><td>M</td><td>1994-09-15</td></tr><tr><td>10009</td><td>1952-04-19</td><td>Sumant</td><td>Peac</td><td>F</td><td>1985-02-18</td></tr><tr><td>10010</td><td>1963-06-01</td><td>Duangkaew</td><td>Piveteau</td><td>F</td><td>1989-08-24</td></tr><tr><td>10011</td><td>1953-11-07</td><td>Mary</td><td>Sluis</td><td>F</td><td>1990-01-22</td></tr></tbody></table><p>请你查找employees里最晚入职员工的所有信息，以上例子输出如下:</p><table><thead><tr><th>emp_no</th><th>birth_date</th><th>first_name</th><th>last_name</th><th>gender</th><th>hire_date</th></tr></thead><tbody><tr><td>10008</td><td>1958-02-19</td><td>Saniya</td><td>Kalloufi</td><td>M</td><td>1994-09-15</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from employees order by hire_date desc limit 1;</span><br></pre></td></tr></table></figure><p>easy题目不必多说。</p><h2 id="3-SQL201-查找入职员工时间升序排名的情况下的倒数第三的员工所有信息">3.<strong>SQL201</strong> <strong>查找入职员工时间升序排名的情况下的倒数第三的员工所有信息</strong></h2><p>有一个员工employees表简况如下:</p><table><thead><tr><th>emp_no</th><th>birth_date</th><th>first_name</th><th>last_name</th><th>gender</th><th>hire_date</th></tr></thead><tbody><tr><td>10001</td><td>1953-09-02</td><td>Georgi</td><td>Facello</td><td>M</td><td>1986-06-26</td></tr><tr><td>10002</td><td>1964-06-02</td><td>Bezalel</td><td>Simmel</td><td>F</td><td>1985-11-21</td></tr><tr><td>10003</td><td>1959-12-03</td><td>Parto</td><td>Bamford</td><td>M</td><td>1986-08-28</td></tr><tr><td>10004</td><td>1954-05-01</td><td>Christian</td><td>Koblick</td><td>M</td><td>1986-12-01</td></tr></tbody></table><p>请你查找employees里入职员工时间升序排名的情况下倒数第三的员工所有信息，以上例子输出如下:</p><table><thead><tr><th>emp_no</th><th>birth_date</th><th>first_name</th><th>last_name</th><th>gender</th><th>hire_date</th></tr></thead><tbody><tr><td>10001</td><td>1953-09-02</td><td>Georgi</td><td>Facello</td><td>M</td><td>1986-06-26</td></tr></tbody></table><p>注意：可能会存在同一个日期入职的员工，所以入职员工时间排名倒数第三的员工可能不止一个,存在多个员工的情况按照emp_no升序排列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">where</span> hire_date <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">DISTINCT</span> hire_date</span><br><span class="line">    <span class="keyword">from</span> employees</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> hire_date <span class="keyword">desc</span></span><br><span class="line">    limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">2</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>使用子查询，然后去掉倒数第一第二</p><h2 id="4-SQL202-查找当前薪水详情以及部门编号dept-no">4.<strong>SQL202</strong> <strong>查找当前薪水详情以及部门编号dept_no</strong></h2><p>有一个全部员工的薪水表salaries简况如下:</p><table><thead><tr><th>emp_no</th><th>salary</th><th>from_date</th><th>to_date</th></tr></thead><tbody><tr><td>10001</td><td>88958</td><td>2002-06-22</td><td>9999-01-01</td></tr><tr><td>10002</td><td>72527</td><td>2001-08-02</td><td>9999-01-01</td></tr><tr><td>10003</td><td>43311</td><td>2001-12-01</td><td>9999-01-01</td></tr></tbody></table><p>有一个各个部门的领导表dept_manager简况如下:</p><table><thead><tr><th>dept_no</th><th>emp_no</th><th>to_date</th></tr></thead><tbody><tr><td>d001</td><td>10001</td><td>9999-01-01</td></tr><tr><td>d002</td><td>10003</td><td>9999-01-01</td></tr></tbody></table><p>请你查找各个部门当前领导的薪水详情以及其对应部门编号dept_no，输出结果以salaries.emp_no升序排序，并且请注意输出结果里面dept_no列是最后一列，以上例子输出如下:</p><table><thead><tr><th>emp_no</th><th>salary</th><th>from_date</th><th>to_date</th><th>dept_no</th></tr></thead><tbody><tr><td>10001</td><td>88958</td><td>2002-06-22</td><td>9999-01-01</td><td>d001</td></tr><tr><td>10003</td><td>43311</td><td>2001-12-01</td><td>9999-01-01</td><td>d002</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.emp_no,e.salary,e.from_date,e.to_date,d.dept_no</span><br><span class="line"><span class="keyword">from</span> salaries <span class="keyword">as</span> e,dept_manager <span class="keyword">as</span> d</span><br><span class="line"><span class="keyword">where</span> e.emp_no <span class="operator">=</span> d.emp_no</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> e.emp_no;</span><br></pre></td></tr></table></figure><p>easy的多表查询</p><h2 id="5-SQL42-分析客户逾期情况-middle">5.<strong>SQL42</strong> <strong>分析客户逾期情况</strong>(middle)</h2><p>有贷款信息表：<strong>loan_tb</strong>（agreement_id：合同id，customer_id：客户id，loan_amount：贷款金额，pay_amount：已还金额，overdue_days：逾期天数）</p><table><thead><tr><th>agreement_id</th><th>customer_id</th><th>loan_amount</th><th>pay_amount</th><th>overdue_days</th></tr></thead><tbody><tr><td>10111</td><td>1111</td><td>20000</td><td>18000</td><td>NULL</td></tr><tr><td>10112</td><td>1112</td><td>10000</td><td>10000</td><td>NULL</td></tr><tr><td>10113</td><td>1113</td><td>15000</td><td>10000</td><td>38</td></tr><tr><td>10114</td><td>1114</td><td>50000</td><td>30000</td><td>NULL</td></tr><tr><td>10115</td><td>1115</td><td>60000</td><td>50000</td><td>NULL</td></tr><tr><td>10116</td><td>1116</td><td>10000</td><td>8000</td><td>NULL</td></tr><tr><td>10117</td><td>1117</td><td>50000</td><td>50000</td><td>NULL</td></tr><tr><td>10118</td><td>1118</td><td>25000</td><td>10000</td><td>5</td></tr><tr><td>10119</td><td>1119</td><td>20000</td><td>1000</td><td>106</td></tr></tbody></table><p>客户信息表：<strong>customer_tb</strong>（customer_id：客户id，customer_age：客户年龄，pay_ability：还款能力级别）</p><table><thead><tr><th>customer_id</th><th>customer_age</th><th>pay_ability</th></tr></thead><tbody><tr><td>1111</td><td>28</td><td>B</td></tr><tr><td>1112</td><td>38</td><td>A</td></tr><tr><td>1113</td><td>20</td><td>C</td></tr><tr><td>1114</td><td>30</td><td>A</td></tr><tr><td>1115</td><td>29</td><td>B</td></tr><tr><td>1116</td><td>21</td><td>C</td></tr><tr><td>1117</td><td>35</td><td>B</td></tr><tr><td>1118</td><td>36</td><td>B</td></tr><tr><td>1119</td><td>25</td><td>C</td></tr></tbody></table><p>请根据以上数据分析各还款能力级别的客户逾期情况，按照还款能力级别统计有逾期行为客户占比。要求输出还款能力级别、逾期客户占比。</p><p>注：逾期客户占比要求按照百分数形式输出并四舍五入保留 1 位小数，最终结果按照占比降序排序。</p><p>示例数据结果如下：</p><table><thead><tr><th>pay_ability</th><th>overdue_ratio</th></tr></thead><tbody><tr><td>C</td><td>66.7%</td></tr><tr><td>B</td><td>25.0%</td></tr><tr><td>A</td><td>0.0%</td></tr></tbody></table><p>结果解释：</p><p>还款能力级别为 C 的客户有1113、1116、1119，其中有逾期行为的客户为 1113、1119，故结果为 2/3=66.7%；其他结果同理。</p><p>我去了，对现在的我还是有些难的啊这个题目。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select c.pay_ability,</span><br><span class="line">    concat(format(cast(sum(<span class="keyword">case</span> when l.overdue_days is not <span class="literal">null</span> then <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> end)as real)*<span class="number">100.0</span>/count(DISTINCT c.customer_id),<span class="number">1</span>),<span class="string">&#x27;%&#x27;</span>)</span><br><span class="line"></span><br><span class="line">as overdue_ratio</span><br><span class="line">from customer_tb as c</span><br><span class="line">left join loan_tb as l on c.customer_id=l.customer_id</span><br><span class="line">group by c.pay_ability</span><br><span class="line">order by overdue_ratio desc;</span><br></pre></td></tr></table></figure><p>最主要的就是这个</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">concat(format(<span class="built_in">cast</span>(<span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> l.overdue_days <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)<span class="keyword">as</span> <span class="type">real</span>)<span class="operator">*</span><span class="number">100.0</span><span class="operator">/</span><span class="built_in">count</span>(<span class="keyword">DISTINCT</span> c.customer_id),<span class="number">1</span>),<span class="string">&#x27;%&#x27;</span>)</span><br></pre></td></tr></table></figure><p>计算的过程，主要是浮点数的格式话的问题，其他的还好其实。</p><h2 id="6-SQL204-查找所有员工的last-name和first-name以及对应部门编号dept-no">6.<strong>SQL204</strong> <strong>查找所有员工的last_name和first_name以及对应部门编号dept_no</strong></h2><p>有一个员工表，employees简况如下:</p><table><thead><tr><th>emp_no</th><th>birth_date</th><th>first_name</th><th>last_name</th><th>gender</th><th>hire_date</th></tr></thead><tbody><tr><td>10001</td><td>1953-09-02</td><td>Georgi</td><td>Facello</td><td>M</td><td>1986-06-26</td></tr><tr><td>10002</td><td>1964-06-02</td><td>Bezalel</td><td>Simmel</td><td>F</td><td>1985-11-21</td></tr><tr><td>10003</td><td>1959-12-03</td><td>Parto</td><td>Bamford</td><td>M</td><td>1986-08-28</td></tr><tr><td>10004</td><td>1954-05-01</td><td>Christian</td><td>Koblick</td><td>M</td><td>1986-12-01</td></tr></tbody></table><p>有一个部门表，dept_emp简况如下:</p><table><thead><tr><th>emp_no</th><th>dept_no</th><th>from_date</th><th>to_date</th></tr></thead><tbody><tr><td>10001</td><td>d001</td><td>1986-06-26</td><td>9999-01-01</td></tr><tr><td>10002</td><td>d002</td><td>1989-08-03</td><td>9999-01-01</td></tr></tbody></table><p>请你查找所有已经分配部门的员工的last_name和first_name以及dept_no，也包括暂时没有分配具体部门的员工，以上例子如下:</p><table><thead><tr><th>last_name</th><th>first_name</th><th>dept_no</th></tr></thead><tbody><tr><td>Facello</td><td>Georgi</td><td>d001</td></tr><tr><td>Simmel</td><td>Bezalel</td><td>d002</td></tr><tr><td>Bamford</td><td>Parto</td><td>NULL</td></tr><tr><td>Koblick</td><td>Chirstian</td><td>NULL</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.last_name ,e.first_name ,d.dept_no</span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">as</span> e</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dept_emp <span class="keyword">as</span> d <span class="keyword">on</span> e.emp_no <span class="operator">=</span> d.emp_no;</span><br></pre></td></tr></table></figure><h2 id="7-SQL46-查询培训指定课程的员工信息">7.<strong>SQL46</strong> <strong>查询培训指定课程的员工信息</strong></h2><p>某公司员工信息数据及员工培训信息数据如下：</p><p>员工信息表<strong>staff_tb</strong>(staff_id-员工id，staff_name-员工姓名，staff_gender-员工性别，post-员工岗位类别，department-员工所在部门)，如下所示：</p><table><thead><tr><th>staff_id</th><th>staff_name</th><th>staff_gender</th><th>post</th><th>department</th></tr></thead><tbody><tr><td>1</td><td>Angus</td><td>male</td><td>Financial</td><td>dep1</td></tr><tr><td>2</td><td>Cathy</td><td>female</td><td>Director</td><td>dep1</td></tr><tr><td>3</td><td>Aldis</td><td>female</td><td>Director</td><td>dep2</td></tr><tr><td>4</td><td>Lawson</td><td>male</td><td>Engineer</td><td>dep1</td></tr><tr><td>5</td><td>Carl</td><td>male</td><td>Engineer</td><td>dep2</td></tr><tr><td>6</td><td>Ben</td><td>male</td><td>Engineer</td><td>dep1</td></tr><tr><td>7</td><td>Rose</td><td>female</td><td>Financial</td><td>dep2</td></tr></tbody></table><p>员工培训信息表<strong>cultivate_tb</strong>(info_id-信息id，staff_id-员工id，course-培训课程)，如下所示：</p><p>注：该公司共开设了三门课程，员工可自愿原则性培训0-3项；</p><table><thead><tr><th>info_id</th><th>staff_id</th><th>course</th></tr></thead><tbody><tr><td>101</td><td>1</td><td>course1, course2</td></tr><tr><td>102</td><td>2</td><td>course2</td></tr><tr><td>103</td><td>3</td><td>course1, course3</td></tr><tr><td>104</td><td>4</td><td>course1, course2, course3</td></tr><tr><td>105</td><td>5</td><td>course3</td></tr><tr><td>106</td><td>6</td><td>NULL</td></tr><tr><td>107</td><td>7</td><td>course1, course2</td></tr></tbody></table><p>问题：请查询培训课程course3的员工信息？</p><p>注：只要培训的课程中包含course3课程就计入结果</p><p>要求输出：员工id、姓名，按照员工id升序排序；<br>示例数据结果如下：</p><table><thead><tr><th>staff_id</th><th>staff_name</th></tr></thead><tbody><tr><td>3</td><td>Aldis</td></tr><tr><td>4</td><td>Lawson</td></tr><tr><td>5</td><td>Carl</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.staff_id,s.staff_name</span><br><span class="line"><span class="keyword">from</span> staff_tb <span class="keyword">as</span> s</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> cultivate_tb <span class="keyword">as</span> c <span class="keyword">on</span> s.staff_id<span class="operator">=</span>c.staff_id</span><br><span class="line"><span class="keyword">where</span> concat(<span class="string">&#x27;,&#x27;</span>,c.course,<span class="string">&#x27;,&#x27;</span>) <span class="keyword">like</span> <span class="string">&#x27;%course3%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>使用分隔符来进行模糊匹配，确保只匹配到course3</p><h2 id="8-SQL43-获取指定客户每月的消费额">8.<strong>SQL43</strong> <strong>获取指定客户每月的消费额</strong></h2><p>某金融公司某项目下有如下 2 张表：</p><p>交易表 <strong>trade</strong>（t_id：交易流水号，t_time：交易时间，t_cus：交易客户，t_type：交易类型【1表示消费，0表示转账】，t_amount：交易金额）:</p><table><thead><tr><th>t_id</th><th>t_time</th><th>t_cus</th><th>t_type</th><th>t_amount</th></tr></thead><tbody><tr><td>1</td><td>2022-01-19 03:14:08</td><td>101</td><td>1</td><td>45.0</td></tr><tr><td>2</td><td>2023-02-15 11:22:11</td><td>101</td><td>1</td><td>23.6</td></tr><tr><td>3</td><td>2023-03-19 05:33:22</td><td>102</td><td>0</td><td>350.0</td></tr><tr><td>4</td><td>2023-03-21 06:44:09</td><td>103</td><td>1</td><td>16.9</td></tr><tr><td>5</td><td>2023-02-21 08:44:09</td><td>101</td><td>1</td><td>26.9</td></tr><tr><td>6</td><td>2023-07-07 07:11:45</td><td>101</td><td>1</td><td>1200.0</td></tr><tr><td>7</td><td>2023-07-19 06:04:32</td><td>102</td><td>1</td><td>132.5</td></tr><tr><td>8</td><td>2023-09-19 11:23:11</td><td>101</td><td>1</td><td>130.6</td></tr><tr><td>9</td><td>2023-10-19 04:32:30</td><td>103</td><td>1</td><td>110.0</td></tr></tbody></table><p>客户表 <strong>customer</strong>（c_id：客户号，c_name：客户名称）:</p><table><thead><tr><th>c_id</th><th>c_name</th></tr></thead><tbody><tr><td>101</td><td>Tom</td></tr><tr><td>102</td><td>Ross</td></tr><tr><td>103</td><td>Julie</td></tr><tr><td>104</td><td>Niki</td></tr></tbody></table><p>现需要查询 Tom 这个客户在 2023 年每月的消费金额（按月份正序显示），示例如下：</p><table><thead><tr><th>time</th><th>total</th></tr></thead><tbody><tr><td>2023-02</td><td>50.5</td></tr><tr><td>2023-07</td><td>1200.0</td></tr><tr><td>2023-09</td><td>130.6</td></tr></tbody></table><p>请编写 SQL 语句实现上述需求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">    <span class="title function_">DATE_FORMAT</span><span class="params">(t.t_time, <span class="string">&#x27;%Y-%m&#x27;</span>)</span> AS time,</span><br><span class="line">    SUM(t.t_amount) AS total</span><br><span class="line">from</span><br><span class="line">    trade as t</span><br><span class="line">    left join customer as c on t.t_cus = c.c_id</span><br><span class="line">where</span><br><span class="line">    c.c_name = <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">    AND t.t_type = <span class="number">1</span></span><br><span class="line">    AND <span class="title function_">YEAR</span><span class="params">(t.t_time)</span> = <span class="number">2023</span></span><br><span class="line">GROUP BY</span><br><span class="line">    <span class="title function_">DATE_FORMAT</span><span class="params">(t.t_time, <span class="string">&#x27;%Y-%m&#x27;</span>)</span></span><br><span class="line">ORDER BY</span><br><span class="line">    time;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-查询连续入住多晚的客户信息？">9.<strong>查询连续入住多晚的客户信息？</strong></h2><p>某酒店客房信息数据及某晚入住信息数据如下：</p><p>客房信息表<strong>guestroom_tb</strong>(room_id-房间号,room_type-房间类型,room_price-房间价格)，如下所示：</p><table><thead><tr><th>room_id</th><th>room_type</th><th>room_price</th></tr></thead><tbody><tr><td>1001</td><td>商务标准房</td><td>165</td></tr><tr><td>1002</td><td>家庭套房</td><td>376</td></tr><tr><td>1003</td><td>商务单人房</td><td>100</td></tr><tr><td>1004</td><td>商务单人房</td><td>100</td></tr><tr><td>1005</td><td>商务标准房</td><td>165</td></tr><tr><td>1006</td><td>商务单人房</td><td>100</td></tr><tr><td>1007</td><td>商务标准房</td><td>165</td></tr><tr><td>1008</td><td>家庭套房</td><td>365</td></tr><tr><td>1009</td><td>商务标准房</td><td>165</td></tr></tbody></table><p>入住信息表<strong>checkin_tb</strong>(info_id-信息id.room_id-房间号,user_id-客户id,checkin_time-入住时间,checkout_time-退房时间)，</p><p>该表存储该晚客户入住信息及后续退房信息，如下所示：</p><table><thead><tr><th>info_id</th><th>room_id</th><th>user_id</th><th>checkin_time</th><th>checkout_time</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>201</td><td>2022-06-12 15:00:00</td><td>2022-06-13 09:00:00</td></tr><tr><td>2</td><td>1001</td><td>202</td><td>2022-06-12 15:00:00</td><td>2022-06-13 09:00:00</td></tr><tr><td>3</td><td>1003</td><td>203</td><td>2022-06-12 14:00:00</td><td>2022-06-14 08:00:00</td></tr><tr><td>4</td><td>1004</td><td>204</td><td>2022-06-12 15:00:00</td><td>2022-06-13 11:00:00</td></tr><tr><td>5</td><td>1007</td><td>205</td><td>2022-06-12 16:00:00</td><td>2022-06-15 12:00:00</td></tr><tr><td>6</td><td>1008</td><td>206</td><td>2022-06-12 19:00:00</td><td>2022-06-13 12:00:00</td></tr><tr><td>7</td><td>1008</td><td>207</td><td>2022-06-12 19:00:00</td><td>2022-06-13 12:00:00</td></tr><tr><td>8</td><td>1009</td><td>208</td><td>2022-06-12 20:00:00</td><td>2022-06-16 09:00:00</td></tr></tbody></table><p>问题：请查询该酒店从6月12日开始连续入住多晚的客户信息？要求输出：客户id、房间号、房间类型、连续入住天数（按照连续入住天数的升序排序，再按照房间号的升序排序，再按照客户id的降序排序）示例数据结果如下：user_idroom_idroom_typedays2031003商务单人房22051007商务标准房32081009商务标准房4解释：以客户203为例，在2022-06-12入住酒店，在2022-06-14退房，连续在12日晚、13日晚入住在该酒店，故结果如上；其他结果同理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select c.user_id,c.room_id,g.room_type,</span><br><span class="line">datediff(c.checkout_time, c.checkin_time) as days</span><br><span class="line">from guestroom_tb as g</span><br><span class="line">join checkin_tb as c on g.room_id = c.room_id</span><br><span class="line">where <span class="title function_">date</span><span class="params">(c.checkin_time)</span> =<span class="string">&#x27;2022-06-12&#x27;</span> </span><br><span class="line">and <span class="title function_">datediff</span><span class="params">(c.checkout_time, c.checkin_time)</span>&gt;=<span class="number">2</span></span><br><span class="line">order by days ASC,c.room_id,c.user_id desc;</span><br></pre></td></tr></table></figure><p>这个题目主要是时间函数的使用</p><h2 id="10-SQL45-统计所有课程参加培训人次">10.<strong>SQL45</strong> <strong>统计所有课程参加培训人次</strong></h2><p>某公司员工培训信息数据如下：</p><p>员工培训信息表<strong>cultivate_tb</strong>(info_id-信息id,staff_id-员工id,course-培训课程)，如下所示：</p><p>注：该公司共开设了三门课程，员工可自愿原则性培训0-3项，每项课程每人可培训1次。</p><table><thead><tr><th>info_id</th><th>staff_id</th><th>course</th></tr></thead><tbody><tr><td>101</td><td>1</td><td>course1,course2</td></tr><tr><td>102</td><td>2</td><td>course2</td></tr><tr><td>103</td><td>3</td><td>course1,course3</td></tr><tr><td>104</td><td>4</td><td>course1,course2,course3</td></tr><tr><td>105</td><td>5</td><td>course3</td></tr><tr><td>106</td><td>6</td><td>NULL</td></tr><tr><td>107</td><td>7</td><td>course1,course2</td></tr></tbody></table><p>问题：请统计该公司所有课程参加培训人次？</p><p>示例数据结果如下：</p><table><thead><tr><th>staff_nums</th></tr></thead><tbody><tr><td>11</td></tr></tbody></table><p>解释：course1课程共有员工1、3、4、7共4名员工培训；</p><p>course2课程共有员工1、2、4、7共4名员工培训；</p><p>course3课程共有员工3、4、5共3名员工培训。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    <span class="title function_">SUM</span><span class="params">(CONCAT(<span class="string">&#x27;,&#x27;</span>, c.course, <span class="string">&#x27;,&#x27;</span>)</span> LIKE <span class="string">&#x27;%,course1,%&#x27;</span>) +</span><br><span class="line">    SUM(CONCAT(<span class="string">&#x27;,&#x27;</span>, c.course, <span class="string">&#x27;,&#x27;</span>) LIKE <span class="string">&#x27;%,course2,%&#x27;</span>) +</span><br><span class="line">    SUM(CONCAT(<span class="string">&#x27;,&#x27;</span>, c.course, <span class="string">&#x27;,&#x27;</span>) LIKE <span class="string">&#x27;%,course3,%&#x27;</span>) AS staff_nums</span><br><span class="line">FROM </span><br><span class="line">    cultivate_tb c;</span><br></pre></td></tr></table></figure><p>更具性价比的方法</p>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/sql/">sql</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/mysql/">mysql</category>
      
      
      <comments>https://blog.tokenlen.top/2025/06/09/mysql/sqltest3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>shopping项目文档面试八股</title>
      <link>https://blog.tokenlen.top/2025/06/07/doc/shopping-mengnankk/</link>
      <guid>https://blog.tokenlen.top/2025/06/07/doc/shopping-mengnankk/</guid>
      <pubDate>Fri, 06 Jun 2025 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1&gt;JWT+双token+双拦截器登录校验&lt;/h1&gt;
&lt;p&gt;项目文件:&lt;/p&gt;
&lt;p&gt;JwtConfig.java JWT配置类&lt;/p&gt;
&lt;p&gt;SecurityConfig.java 安全请求放行文件&lt;/p&gt;
&lt;p&gt;UserController.java</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1>JWT+双token+双拦截器登录校验</h1><p>项目文件:</p><p>JwtConfig.java JWT配置类</p><p>SecurityConfig.java 安全请求放行文件</p><p>UserController.java controller请求层</p><p>JwtAuthenticationFilter.java JWT过滤器</p><p>UserServiceImpl.java 具体的方法实现</p><h1>swagger文档</h1><h1>优惠劵</h1><h1>视频处理</h1><h1>redis限流</h1>]]></content:encoded>
      
      
      <category domain="https://blog.tokenlen.top/categories/java/">java</category>
      
      <category domain="https://blog.tokenlen.top/categories/java/%E9%A1%B9%E7%9B%AE/">项目</category>
      
      
      <category domain="https://blog.tokenlen.top/tags/spring-boot/">spring boot</category>
      
      <category domain="https://blog.tokenlen.top/tags/java/">java</category>
      
      
      <comments>https://blog.tokenlen.top/2025/06/07/doc/shopping-mengnankk/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
